using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using TA.Data.DataTransfer;
using TA.Data.Models;

namespace TA.Data.Repositories
{
    public interface IItemRepository : IRepository<Item>
    {
        public Item GetByID(Guid ID);
        public Item GetBySKU(string SKU);
        public Item GetByURLCode(string URLCode);
        //public int InsertBySQL(Item model);
        public int ItemInsertOrUpdateSingleItemBySQL(ItemDataTransfer model);
        public int UpdateSearchTable();
        public int UpdateNewSearchTable();
        public int UpdateItemsURLCode();
        public int UpdateItemsDescription();
        public int UpdateItemsImageCount();
        public int UpdateBySQL(Item model);
        public int UpdateBedInfomationBySQL(Item model);
        public int UpdateProductNameAndExtendedDescriptionBySQL(Item model);
        public int UpdateIsBestSellerBySQL(Item model);
        public int UpdateAdditionalFeaturesBySQL(Item model);
        public Task<int> AsyncUpdateBySQL(Item model);
        public int UpdateItemsURLCodeByConectionString(string conectionString);
        public int UpdateItemsDescriptionByConectionString(string conectionString);
        public int UpdateBySQLAndConectionString(Item model, string conectionString);
        public Task<int> AsyncUpdateBySQLAndConectionString(Item model, string conectionString);
        public Task<int> AsyncUpdateItemsURLCodeByConectionString001(string conectionString);
        public Task<int> AsyncUpdateItemsDescriptionByConectionString001(string conectionString);
        public Task<int> AsyncUpdateItemsImageCountByConectionString001(string conectionString);
        public Task<int> AsyncUpdateItemsImageByConectionString001(string conectionString);
        public Task<int> AsyncUpdateBySQLAndConectionStringByIDWithImageIsNull(Item model, string conectionString);
        public Task<int> AsyncUpdateBySQLAndConectionStringByIDWithImageIsNull001(Item model, string conectionString);
        public List<Item> GetByActiveToList();
        public List<Item> GetByTypeIDAndIDToList(string typeID, string ID);
        public List<Item> GetByTypeIDAndIDAndRowCountToList(string typeID, string ID, int rowCount);
        public List<ItemDataTransfer> GetItemDataTransferByActiveToList();
        public List<Item> GetByIDListToList(string IDList);
        public List<Item> GetBySKUListToList(string SKUList);
        public Task<List<Item>> AsyncGetByActiveToList();
        public List<Item> GetByActiveAndConectionStringToList(string conectionString);
        public Task<List<Item>> AsyncGetByActiveAndConectionStringToList(string conectionString);
        public List<Item> GetByIsActiveToList(bool isActive);
        public List<Item> GetWithImageIsNullToList();
        public List<Item> GetByConectionStringWithImageIsNullToList(string conectionString);
        public List<Item> GetConectionStringByIsActiveWithImageCountIsNullToList(string conectionString);
        public List<ItemDataTransfer> GetDataTransferBySearchStringToList(string searchString);        
        public List<ItemDataTransfer> GetDataTransferByRowNumberToList(int rowNumber);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndCollection_IDAndInStockProgramAndIsStockedToList(bool isActiveTAUS, string collection_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndShape_IDAndInStockProgramAndIsStockedToList(bool isActiveTAUS, string shape_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndLifeStyle_IDAndInStockProgramAndIsStockedToList(bool isActiveTAUS, string lifeStyle_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndType_IDAndInStockProgramAndIsStockedToList(bool isActiveTAUS, string type_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndRoomAndUsage_IDAndInStockProgramAndIsStockedToList(bool isActiveTAUS, string roomAndUsage_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndBrand_IDAndInStockProgramAndIsStockedToList(bool isActiveTAUS, string brand_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndExtendingAndInStockProgramAndIsStockedToList(bool isActiveTAUS, bool extending, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByIsActiveTAUSAndSearchStringAndInStockProgramAndIsStockedToList(bool isActiveTAUS, string searchString, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndType_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string type_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndShape_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string shape_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndRoomAndUsage_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string roomAndUsage_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndLifeStyle_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string lifeStyle_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndCollection_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string collection_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndBrand_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string brand_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndExtendingAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool extending, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndSearchStringAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string searchString, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndCasualLivingAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndStyle_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string style_ID, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndIsCFPItemAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool isCFPItem, bool inStockProgram, bool isStocked);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(string user_ID, bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString, bool extending, bool isStocked, bool isCFPItem, bool isNew);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndTailorFitProgramToList(string user_ID, bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString, bool extending, bool isStocked, bool isCFPItem, bool isNew);
        public List<ItemDataTransfer> GetDataTransferByUser_IDAndIsActiveTAUSAndFilters002ToList(string user_ID, bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString, bool extending, bool isStocked, bool isCFPItem, bool isNew, bool isBestSeller);
        public List<ItemMenuLeftDataTransfer> GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(string user_ID, bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString, bool extending, bool isStocked, bool isCFPItem, bool isNew);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndType_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string type_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndShape_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string shape_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndRoomAndUsage_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string roomAndUsage_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndLifeStyle_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string lifeStyle_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndStyle_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string style_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndCollection_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string collection_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndBrand_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string brand_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndExtendingAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool extending, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndSearchStringAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string searchString, bool inStockProgram, bool isStocked);
        public Task<int> AsyncGetByIsActiveTAUSAndExtendingToItemCount(bool isActiveTAUS, bool extending);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndCasualLivingAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndIsCFPItemAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, bool isCFPItem, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndOptionGroup2_IDAndInStockProgramAndIsStockedToList(string user_ID, bool isActiveTAUS, string optionGroup2_ID, bool inStockProgram, bool isStocked);
        public Task<List<ItemDataTransfer>> AsyncGetDataTransferByUser_IDAndIsActiveTAUSAndFiltersAndExtendingAndIsStockedToList(string user_ID, bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString, bool extending, bool isStocked);
        
    }
}
