using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Json;
using System.Net;
using System.Text;
using System.Xml;
using TA.Data.DataTransfer;
using TA.Data.Models;
using TA.Data.Repositories;
using TA.Helpers;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Processing;
using SixLabors.ImageSharp.PixelFormats;
using System.Threading.Tasks;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using System.Linq;
using Newtonsoft.Json;

namespace TA.API.Controllers
{

    public class DownloadController : BaseController
    {
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly IHR_Recruitment_CareerRepository _hR_Recruitment_CareerRepository;
        private readonly IHR_Recruitment_IntroduceRepository _hR_Recruitment_IntroduceRepository;
        private readonly ICollectionRepository _collectionRepository;
        private readonly ILifeStyleRepository _lifeStyleRepository;
        private readonly IStyleRepository _styleRepository;
        private readonly IShapeRepository _shapeRepository;
        private readonly ITypeRepository _typeRepository;
        private readonly IBrandRepository _brandRepository;
        private readonly IRoomAndUsageRepository _roomAndUsageRepository;
        private readonly IDesignerRepository _designerRepository;
        private readonly IItemRepository _itemRepository;
        private readonly IUserRepository _userRepository;
        private readonly IUPHFabricRepository _uPHFabricRepository;
        private readonly ISEOBlogItemRepository _sEOBlogItemRepository;
        private readonly ISEOBlogTypeRepository _sEOBlogTypeRepository;
        private readonly ISEOBlogStoreRepository _sEOBlogStoreRepository;
        private readonly ISEOBlogRepository _sEOBlogRepository;
        private readonly ISEOKeywordRepository _sEOKeywordRepository;
        private readonly ICountryRepository _countryRepository;

        public DownloadController(IHR_Recruitment_IntroduceRepository hR_Recruitment_IntroduceRepository
            , IHR_Recruitment_CareerRepository hR_Recruitment_CareerRepository
            , ICollectionRepository collectionRepository
            , ILifeStyleRepository lifeStyleRepository
            , IStyleRepository styleRepository
            , IShapeRepository shapeRepository
            , ITypeRepository typeRepository
            , IBrandRepository brandRepository
            , IRoomAndUsageRepository roomAndUsageRepository
            , IDesignerRepository designerRepository
            , IItemRepository itemRepository
            , IUserRepository userRepository
            , IUPHFabricRepository uPHFabricRepository
            , IWebHostEnvironment webHostEnvironment
            , ISEOBlogItemRepository sEOBlogItemRepository
            , ISEOBlogTypeRepository sEOBlogTypeRepository
            , ISEOBlogStoreRepository sEOBlogStoreRepository
            , ISEOBlogRepository sEOBlogRepository
            , ISEOKeywordRepository sEOKeywordRepository
            , ICountryRepository countryRepository
        ) : base()
        {
            _webHostEnvironment = webHostEnvironment;
            _hR_Recruitment_IntroduceRepository = hR_Recruitment_IntroduceRepository;
            _hR_Recruitment_CareerRepository = hR_Recruitment_CareerRepository;
            _itemRepository = itemRepository;
            _collectionRepository = collectionRepository;
            _lifeStyleRepository = lifeStyleRepository;
            _styleRepository = styleRepository;
            _shapeRepository = shapeRepository;
            _typeRepository = typeRepository;
            _roomAndUsageRepository = roomAndUsageRepository;
            _designerRepository = designerRepository;
            _brandRepository = brandRepository;
            _userRepository = userRepository;
            _uPHFabricRepository = uPHFabricRepository;
            _sEOBlogItemRepository = sEOBlogItemRepository;
            _sEOBlogTypeRepository = sEOBlogTypeRepository;
            _sEOBlogStoreRepository = sEOBlogStoreRepository;
            _sEOBlogRepository = sEOBlogRepository;
            _sEOKeywordRepository = sEOKeywordRepository;
            _countryRepository = countryRepository;
        }
        [HttpGet]
        public JsonResult GetHR_Recruitment_IntroduceBySearchStringToExcel(string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<HR_Recruitment_Introduce> list = _hR_Recruitment_IntroduceRepository.GetBySearchStringToList(searchString);
                string fileName = @"HR_Recruitment_Recommender_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Date send";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Full name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Bank account";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Bank name";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }

                    row = row + 1;
                    int no = 0;
                    foreach (HR_Recruitment_Introduce item in list)
                    {
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.DateUpdated.Value.ToString("dd/MM/yyyy HH:mm:ss");
                        workSheet.Cells[row, 3].Value = item.FullName;
                        workSheet.Cells[row, 4].Value = item.Phone;
                        workSheet.Cells[row, 5].Value = item.BankID;
                        workSheet.Cells[row, 6].Value = item.BankName;

                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                                case 2:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult GetHR_Recruitment_IntroduceBySearchStringToHTML(string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string fileName = @"HR_Recruitment_Recommender_" + AppGlobal.InitializationDateTimeCode + AppGlobal.HTMLExtension;
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.HeaderHTML);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }
                StringBuilder html = new StringBuilder();
                List<HR_Recruitment_Introduce> list = _hR_Recruitment_IntroduceRepository.GetBySearchStringToList(searchString);
                html.AppendLine(@"<table class='border'>");

                html.AppendLine(@"<thead>");
                html.AppendLine(@"<tr>");
                html.AppendLine(@"<th>No</th>");
                html.AppendLine(@"<th>Date register</th>");
                html.AppendLine(@"<th>Full name</th>");
                html.AppendLine(@"<th>Phone</th>");
                html.AppendLine(@"<th>Bank account</th>");
                html.AppendLine(@"<th>Bank name </th>");
                html.AppendLine(@"</tr>");
                html.AppendLine(@"</thead>");
                html.AppendLine(@"<tbody>");
                int no = 0;
                foreach (HR_Recruitment_Introduce item in list)
                {
                    no = no + 1;
                    html.AppendLine(@"<tr>");
                    html.AppendLine(@"<td>" + no + "</td>");
                    html.AppendLine(@"<td>" + item.DateUpdated.Value.ToString("dd/MM/yyyy HH:mm:ss") + "</td>");
                    html.AppendLine(@"<td>" + item.FullName + "</td>");
                    html.AppendLine(@"<td>" + item.Phone + "</td>");
                    html.AppendLine(@"<td>" + item.BankID + "</td>");
                    html.AppendLine(@"<td>" + item.BankName + "</td>");
                    html.AppendLine(@"</tr>");
                }
                html.AppendLine(@"</tbody>");
                html.AppendLine(@"</table>");
                contentHTML = contentHTML.Replace(@"[PageTitle]", "Recruitment Recommender");
                contentHTML = contentHTML.Replace(@"[ContentDetail]", html.ToString());
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentHTML);
                    }
                }
                result = AppGlobal.DomainURL + subPath + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult GetHR_Recruitment_CareerByRecommendPhoneAndSearchStringToExcel(string recommendPhone, string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<HR_Recruitment_Career> list = _hR_Recruitment_CareerRepository.GetByRecommendPhoneAndSearchStringToList(recommendPhone, searchString);
                string fileName = @"HR_Recruitment_CareerByRecommendPhone_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Date register";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Full name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Email";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Experience";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Job function";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Source";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Recommender";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }

                    row = row + 1;
                    int no = 0;
                    foreach (HR_Recruitment_Career item in list)
                    {
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.DateUpdated.Value.ToString("dd/MM/yyyy HH:mm:ss");
                        workSheet.Cells[row, 3].Value = item.FullName;
                        workSheet.Cells[row, 4].Value = item.Phone;
                        workSheet.Cells[row, 5].Value = item.Email;
                        workSheet.Cells[row, 6].Value = item.Experience;
                        workSheet.Cells[row, 7].Value = item.JobFunction;
                        workSheet.Cells[row, 8].Value = item.MediaSource;
                        workSheet.Cells[row, 9].Value = item.RecommendFullName;
                        workSheet.Cells[row, 10].Value = item.RecommendPhone;

                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                                case 2:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult GetHR_Recruitment_CareerByRecommendPhoneAndSearchStringToHTML(string recommendPhone, string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string fileName = @"HR_Recruitment_CareerByRecommendPhone_" + AppGlobal.InitializationDateTimeCode + AppGlobal.HTMLExtension;
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.HeaderHTML);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }
                StringBuilder html = new StringBuilder();
                List<HR_Recruitment_Career> list = _hR_Recruitment_CareerRepository.GetByRecommendPhoneAndSearchStringToList(recommendPhone, searchString);
                html.AppendLine(@"<table class='border'>");

                html.AppendLine(@"<thead>");
                html.AppendLine(@"<tr>");
                html.AppendLine(@"<th>No</th>");
                html.AppendLine(@"<th>Date register</th>");
                html.AppendLine(@"<th>Full name</th>");
                html.AppendLine(@"<th>Phone</th>");
                html.AppendLine(@"<th>Email</th>");
                html.AppendLine(@"<th>Experience</th>");
                html.AppendLine(@"<th>Job function</th>");
                html.AppendLine(@"<th>Source</th>");
                html.AppendLine(@"<th>Recommender</th>");
                html.AppendLine(@"<th>Phone</th>");
                html.AppendLine(@"</tr>");
                html.AppendLine(@"</thead>");
                html.AppendLine(@"<tbody>");
                int no = 0;
                foreach (HR_Recruitment_Career item in list)
                {
                    no = no + 1;
                    html.AppendLine(@"<tr>");
                    html.AppendLine(@"<td>" + no + "</td>");
                    html.AppendLine(@"<td>" + item.DateUpdated.Value.ToString("dd/MM/yyyy HH:mm:ss") + "</td>");
                    html.AppendLine(@"<td>" + item.FullName + "</td>");
                    html.AppendLine(@"<td>" + item.Phone + "</td>");
                    html.AppendLine(@"<td>" + item.Email + "</td>");
                    html.AppendLine(@"<td>" + item.Experience + "</td>");
                    html.AppendLine(@"<td>" + item.JobFunction + "</td>");
                    html.AppendLine(@"<td>" + item.MediaSource + "</td>");
                    html.AppendLine(@"<td>" + item.RecommendFullName + "</td>");
                    html.AppendLine(@"<td>" + item.RecommendPhone + "</td>");
                    html.AppendLine(@"</tr>");
                }
                html.AppendLine(@"</tbody>");
                html.AppendLine(@"</table>");
                contentHTML = contentHTML.Replace(@"[PageTitle]", "Register to apply");
                contentHTML = contentHTML.Replace(@"[ContentDetail]", html.ToString());
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentHTML);
                    }
                }
                result = AppGlobal.DomainURL + subPath + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult GetHR_Recruitment_CareerBySearchStringToExcel(string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<HR_Recruitment_Career> list = _hR_Recruitment_CareerRepository.GetBySearchStringToList(searchString);
                string fileName = @"HR_Recruitment_Career_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Date register";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Full name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Email";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Experience";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Job function";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Source";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Recommender";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Address";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }

                    row = row + 1;
                    int no = 0;
                    foreach (HR_Recruitment_Career item in list)
                    {
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.DateUpdated.Value.ToString("dd/MM/yyyy HH:mm:ss");
                        workSheet.Cells[row, 3].Value = item.FullName;
                        workSheet.Cells[row, 4].Value = item.Phone;
                        workSheet.Cells[row, 5].Value = item.Email;
                        workSheet.Cells[row, 6].Value = item.Experience;
                        workSheet.Cells[row, 7].Value = item.JobFunction;
                        workSheet.Cells[row, 8].Value = item.MediaSource;
                        workSheet.Cells[row, 9].Value = item.RecommendFullName;
                        workSheet.Cells[row, 10].Value = item.RecommendPhone;
                        workSheet.Cells[row, 11].Value = item.Address;

                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                                case 2:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult GetHR_Recruitment_CareerBySearchStringToHTML(string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string fileName = @"HR_Recruitment_Career_" + AppGlobal.InitializationDateTimeCode + AppGlobal.HTMLExtension;
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.HeaderHTML);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }
                StringBuilder html = new StringBuilder();
                List<HR_Recruitment_Career> list = _hR_Recruitment_CareerRepository.GetBySearchStringToList(searchString);
                html.AppendLine(@"<table class='border'>");
                html.AppendLine(@"<thead>");
                html.AppendLine(@"<tr>");
                html.AppendLine(@"<th>No</th>");
                html.AppendLine(@"<th>Date register</th>");
                html.AppendLine(@"<th>Full name</th>");
                html.AppendLine(@"<th>Phone</th>");
                html.AppendLine(@"<th>Email</th>");
                html.AppendLine(@"<th>Experience</th>");
                html.AppendLine(@"<th>Job function</th>");
                html.AppendLine(@"<th>Source</th>");
                html.AppendLine(@"<th>Recommender</th>");
                html.AppendLine(@"<th>Phone</th>");
                html.AppendLine(@"<th>Address</th>");
                html.AppendLine(@"</tr>");
                html.AppendLine(@"</thead>");
                html.AppendLine(@"<tbody>");
                int no = 0;
                foreach (HR_Recruitment_Career item in list)
                {
                    no = no + 1;
                    html.AppendLine(@"<tr>");
                    html.AppendLine(@"<td>" + no + "</td>");
                    html.AppendLine(@"<td>" + item.DateUpdated.Value.ToString("dd/MM/yyyy HH:mm:ss") + "</td>");
                    html.AppendLine(@"<td>" + item.FullName + "</td>");
                    html.AppendLine(@"<td>" + item.Phone + "</td>");
                    html.AppendLine(@"<td>" + item.Email + "</td>");
                    html.AppendLine(@"<td>" + item.Experience + "</td>");
                    html.AppendLine(@"<td>" + item.JobFunction + "</td>");
                    html.AppendLine(@"<td>" + item.MediaSource + "</td>");
                    html.AppendLine(@"<td>" + item.RecommendFullName + "</td>");
                    html.AppendLine(@"<td>" + item.RecommendPhone + "</td>");
                    html.AppendLine(@"<td>" + item.Address + "</td>");
                    html.AppendLine(@"</tr>");
                }
                html.AppendLine(@"</tbody>");
                html.AppendLine(@"</table>");
                contentHTML = contentHTML.Replace(@"[PageTitle]", "Register to apply");
                contentHTML = contentHTML.Replace(@"[ContentDetail]", html.ToString());
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentHTML);
                    }
                }
                result = AppGlobal.DomainURL + subPath + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult GetUserDataTransferByStoreIDToExcel(string storeID)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<UserDataTransfer> list = _userRepository.GetDataTransferByStoreIDToList(storeID);
                string fileName = @"User_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Username";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Email";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "First name";
                    column = column + 1;
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "AccountEnabled";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DateCreated";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Address1";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Address2";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PostalCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "City";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "UserType";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DealerGroup";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Website";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PriceMultiplier";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreAddr1";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreAddr2";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StorePostCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StorePhone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreFax";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TausID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TausName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Region";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Country";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreBrand";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }

                    row = row + 1;
                    int no = 0;
                    foreach (UserDataTransfer item in list)
                    {
                        if (item.DateCreated == null)
                        {
                            item.DateCreated = AppGlobal.InitializationDateTime;
                        }
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.Username;
                        workSheet.Cells[row, 3].Value = item.Email;
                        workSheet.Cells[row, 4].Value = item.Firstname;
                        workSheet.Cells[row, 5].Value = item.Lastname;
                        workSheet.Cells[row, 6].Value = item.AccountEnabled;
                        if (item.DateCreated != null)
                        {
                            workSheet.Cells[row, 7].Value = item.DateCreated.Value.ToString("dd/MM/yyyy HH:mm:ss");
                        }
                        else
                        {
                            workSheet.Cells[row, 7].Value = "";
                        }
                        workSheet.Cells[row, 8].Value = item.Address1;
                        workSheet.Cells[row, 9].Value = item.Address2;
                        workSheet.Cells[row, 10].Value = item.PostalCode;
                        workSheet.Cells[row, 11].Value = item.Phone;
                        workSheet.Cells[row, 12].Value = item.CityName;
                        workSheet.Cells[row, 13].Value = item.UserTypeName;
                        workSheet.Cells[row, 14].Value = item.DealerGroup;
                        workSheet.Cells[row, 15].Value = item.StoreName;
                        workSheet.Cells[row, 16].Value = item.StoreWebsite;
                        if (item.StorePriceMultiplier != null)
                        {
                            workSheet.Cells[row, 17].Value = item.StorePriceMultiplier.Value.ToString();
                        }
                        else
                        {
                            workSheet.Cells[row, 17].Value = "";
                        }
                        workSheet.Cells[row, 18].Value = item.StoreAddress1;
                        workSheet.Cells[row, 19].Value = item.StoreAddress2;
                        workSheet.Cells[row, 20].Value = item.StorePostalCode;
                        workSheet.Cells[row, 21].Value = item.StorePhone;
                        workSheet.Cells[row, 22].Value = item.StoreFax;
                        workSheet.Cells[row, 23].Value = item.TausID;
                        workSheet.Cells[row, 24].Value = item.TausName;
                        workSheet.Cells[row, 25].Value = item.RegionName;
                        workSheet.Cells[row, 26].Value = item.CountryName;
                        if (item.StoreID != null)
                        {
                            workSheet.Cells[row, 27].Value = item.StoreID;
                        }
                        else
                        {
                            workSheet.Cells[row, 27].Value = "";
                        }
                        workSheet.Cells[row, 28].Value = item.StoreBrand;

                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult GetUserDataTransferToExcel()
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<UserDataTransfer> list = _userRepository.GetDataTransferByRowNumberToList(1000000);
                string fileName = @"User_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Username";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Email";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "First name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Last name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "AccountEnabled";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DateCreated";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Address1";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Address2";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PostalCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "City";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "UserType";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DealerGroup";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Website";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PriceMultiplier";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreAddr1";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreAddr2";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StorePostCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StorePhone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreFax";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TausID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TausName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Region";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Country";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreBrand";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }


                    row = row + 1;
                    int no = 0;
                    foreach (UserDataTransfer item in list)
                    {
                        if (item.DateCreated == null)
                        {
                            item.DateCreated = AppGlobal.InitializationDateTime;
                        }
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.Username;
                        workSheet.Cells[row, 3].Value = item.Email;
                        workSheet.Cells[row, 4].Value = item.Firstname;
                        workSheet.Cells[row, 5].Value = item.Lastname;
                        workSheet.Cells[row, 6].Value = item.AccountEnabled;
                        if (item.DateCreated != null)
                        {
                            workSheet.Cells[row, 7].Value = item.DateCreated.Value.ToString("dd/MM/yyyy HH:mm:ss");
                        }
                        else
                        {
                            workSheet.Cells[row, 7].Value = "";
                        }
                        workSheet.Cells[row, 8].Value = item.Address1;
                        workSheet.Cells[row, 9].Value = item.Address2;
                        workSheet.Cells[row, 10].Value = item.PostalCode;
                        workSheet.Cells[row, 11].Value = item.Phone;
                        workSheet.Cells[row, 12].Value = item.CityName;
                        workSheet.Cells[row, 13].Value = item.UserTypeName;
                        workSheet.Cells[row, 14].Value = item.DealerGroup;
                        workSheet.Cells[row, 15].Value = item.StoreName;
                        workSheet.Cells[row, 16].Value = item.StoreWebsite;
                        if (item.StorePriceMultiplier != null)
                        {
                            workSheet.Cells[row, 17].Value = item.StorePriceMultiplier.Value.ToString();
                        }
                        else
                        {
                            workSheet.Cells[row, 17].Value = "";
                        }
                        workSheet.Cells[row, 18].Value = item.StoreAddress1;
                        workSheet.Cells[row, 19].Value = item.StoreAddress2;
                        workSheet.Cells[row, 20].Value = item.StorePostalCode;
                        workSheet.Cells[row, 21].Value = item.StorePhone;
                        workSheet.Cells[row, 22].Value = item.StoreFax;
                        workSheet.Cells[row, 23].Value = item.TausID;
                        workSheet.Cells[row, 24].Value = item.TausName;
                        workSheet.Cells[row, 25].Value = item.RegionName;
                        workSheet.Cells[row, 26].Value = item.CountryName;
                        if (item.StoreID != null)
                        {
                            workSheet.Cells[row, 27].Value = item.StoreID;
                        }
                        else
                        {
                            workSheet.Cells[row, 27].Value = "";
                        }
                        workSheet.Cells[row, 28].Value = item.StoreBrand;

                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult GetUserEmailDataTransferByDateBeginAndDateEndToExcel(int dateBeginYear, int dateBeginMonth, int dateBeginDay, int dateEndYear, int dateEndMonth, int dateEndDay, bool isSubcribed, bool isRegister, bool isQuotation)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<UserDataTransfer> list = _userRepository.GetUserEmailDataTransferByDateBeginAndDateEndToList(dateBeginYear, dateBeginMonth, dateBeginDay, dateEndYear, dateEndMonth, dateEndDay, isSubcribed, isRegister, isQuotation);
                string fileName = @"UserEmail_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                if (isQuotation == true)
                {
                    fileName = @"Quotation_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                }
                if (isSubcribed == true)
                {
                    fileName = @"Subcribed_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                }
                if (isRegister == true)
                {
                    fileName = @"Register_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                }
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Username";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Email";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "First name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Last name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "AccountEnabled";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DateCreated";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Address1";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Address2";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PostalCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Phone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "City";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "UserType";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DealerGroup";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Website";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PriceMultiplier";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreAddr1";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreAddr2";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StorePostCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StorePhone";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreFax";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TausID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TausName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Region";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Country";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "StoreBrand";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }

                    row = row + 1;
                    int no = 0;
                    foreach (UserDataTransfer item in list)
                    {
                        if (item.DateCreated == null)
                        {
                            item.DateCreated = AppGlobal.InitializationDateTime;
                        }
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.Username;
                        workSheet.Cells[row, 3].Value = item.Email;
                        workSheet.Cells[row, 4].Value = item.Firstname;
                        workSheet.Cells[row, 5].Value = item.Lastname;
                        workSheet.Cells[row, 6].Value = item.AccountEnabled;
                        if (item.DateCreated != null)
                        {
                            workSheet.Cells[row, 7].Value = item.DateCreated.Value.ToString("dd/MM/yyyy HH:mm:ss");
                        }
                        else
                        {
                            workSheet.Cells[row, 7].Value = "";
                        }
                        workSheet.Cells[row, 8].Value = item.Address1;
                        workSheet.Cells[row, 9].Value = item.Address2;
                        workSheet.Cells[row, 10].Value = item.PostalCode;
                        workSheet.Cells[row, 11].Value = item.Phone;
                        workSheet.Cells[row, 12].Value = item.CityName;
                        workSheet.Cells[row, 13].Value = item.UserTypeName;
                        workSheet.Cells[row, 14].Value = item.DealerGroup;
                        workSheet.Cells[row, 15].Value = item.StoreName;
                        workSheet.Cells[row, 16].Value = item.StoreWebsite;
                        if (item.StorePriceMultiplier != null)
                        {
                            workSheet.Cells[row, 17].Value = item.StorePriceMultiplier.Value.ToString();
                        }
                        else
                        {
                            workSheet.Cells[row, 17].Value = "";
                        }
                        workSheet.Cells[row, 18].Value = item.StoreAddress1;
                        workSheet.Cells[row, 19].Value = item.StoreAddress2;
                        workSheet.Cells[row, 20].Value = item.StorePostalCode;
                        workSheet.Cells[row, 21].Value = item.StorePhone;
                        workSheet.Cells[row, 22].Value = item.StoreFax;
                        workSheet.Cells[row, 23].Value = item.TausID;
                        workSheet.Cells[row, 24].Value = item.TausName;
                        workSheet.Cells[row, 25].Value = item.RegionName;
                        workSheet.Cells[row, 26].Value = item.CountryName;
                        if (item.StoreID != null)
                        {
                            workSheet.Cells[row, 27].Value = item.StoreID;
                        }
                        else
                        {
                            workSheet.Cells[row, 27].Value = "";
                        }
                        workSheet.Cells[row, 28].Value = item.StoreBrand;

                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult GetUPHFabricByIsFabricAndIsLeatherAndIsTrimsAndSearchStringExcel(bool isFabric, bool isLeather, bool isTrims, string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<UPHFabric> list = _uPHFabricRepository.GetByIsFabricAndIsLeatherAndIsTrimsAndSearchStringToList(isFabric, isLeather, isTrims, searchString);
                string fileName = @"UPHFabric" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                if (string.IsNullOrEmpty(searchString))
                {
                    if ((isFabric == true) && (isLeather == false) && (isTrims == false))
                    {
                        fileName = @"Fabric" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                    }
                    if ((isFabric == false) && (isLeather == true) && (isTrims == false))
                    {
                        fileName = @"Leather" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                    }
                    if ((isFabric == false) && (isLeather == false) && (isTrims == true))
                    {
                        fileName = @"Trims" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                    }
                }
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Fabric";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Grade";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "GradeStudio";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Content1";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Content2";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Content3";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Content4";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Content5";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Content6";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Sampled";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Color";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ColorCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Pattern";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PatternCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "VRepeat";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "HRepeat";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Width";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CleaningCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Application";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Durability";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "enable";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CreatedDate";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "InStock";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsEnabledOnWeb";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsCutYardage";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RLC";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "GradeTrim";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Category";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CategoryTrim";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Rubs";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "QtyOnHand";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "UM";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PFP";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }

                    row = row + 1;
                    int no = 0;
                    foreach (UPHFabric item in list)
                    {
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.Fabric;
                        workSheet.Cells[row, 3].Value = item.Grade;
                        workSheet.Cells[row, 4].Value = item.GradeStudio;
                        workSheet.Cells[row, 5].Value = item.Content1;
                        workSheet.Cells[row, 6].Value = item.Content2;
                        workSheet.Cells[row, 7].Value = item.Content3;
                        workSheet.Cells[row, 8].Value = item.Content4;
                        workSheet.Cells[row, 9].Value = item.Content5;
                        workSheet.Cells[row, 10].Value = item.Content6;
                        workSheet.Cells[row, 11].Value = item.Sampled;
                        workSheet.Cells[row, 12].Value = item.Color;
                        workSheet.Cells[row, 13].Value = item.ColorCode;
                        workSheet.Cells[row, 14].Value = item.Pattern;
                        workSheet.Cells[row, 15].Value = item.PatternCode;
                        workSheet.Cells[row, 16].Value = item.VRepeat;
                        workSheet.Cells[row, 17].Value = item.HRepeat;
                        workSheet.Cells[row, 18].Value = item.Width;
                        workSheet.Cells[row, 19].Value = item.CleaningCode;
                        workSheet.Cells[row, 20].Value = item.Application;
                        workSheet.Cells[row, 21].Value = item.Durability;
                        workSheet.Cells[row, 22].Value = item.enable;
                        if (item.CreatedDate != null)
                        {
                            workSheet.Cells[row, 23].Value = item.CreatedDate.Value.ToString("dd/MM/yyyy HH:mm:ss");
                        }
                        else
                        {
                            workSheet.Cells[row, 23].Value = "";
                        }
                        workSheet.Cells[row, 24].Value = item.InStock;
                        workSheet.Cells[row, 25].Value = item.IsEnabledOnWeb;
                        workSheet.Cells[row, 26].Value = item.IsCutYardage;
                        workSheet.Cells[row, 27].Value = item.Name;
                        workSheet.Cells[row, 28].Value = item.RLC;
                        workSheet.Cells[row, 29].Value = item.GradeTrim;
                        workSheet.Cells[row, 30].Value = item.Category;
                        workSheet.Cells[row, 31].Value = item.CategoryTrim;
                        workSheet.Cells[row, 32].Value = item.Rubs;
                        workSheet.Cells[row, 33].Value = item.QtyOnHand;
                        workSheet.Cells[row, 34].Value = item.UM;
                        workSheet.Cells[row, 35].Value = item.PFP;

                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public async Task<string> AsyncDownloadItemImagesWithImageIsNullTEST()
        {
            string conectionString = AppGlobal.TheodoreAlexander_NewSQLServerConectionString;
            string result = AppGlobal.InitializationString;
            _itemRepository.UpdateItemsURLCodeByConectionString(conectionString);
            _itemRepository.UpdateItemsDescriptionByConectionString(conectionString);
            List<Item> list = _itemRepository.GetByConectionStringWithImageIsNullToList(conectionString);
            bool isDownload = false;
            foreach (Item item in list)
            {
                if (!string.IsNullOrEmpty(item.URLCode))
                {
                    string fileName = item.URLCode + ".jpg";
                    string subPath = AppGlobal.Images + @"\Item";
                    var physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, subPath, fileName);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            client.DownloadFile(new Uri(item.ImageSirv), physicalPathCreate);
                            isDownload = true;
                            item.IsDownloadImageSirv = true;
                            item.Image = fileName;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                            if (isDownload == true)
                            {
                                using (SixLabors.ImageSharp.Image image = SixLabors.ImageSharp.Image.Load(physicalPathCreate))
                                {
                                    image.Mutate(x => x.Resize(AppGlobal.ImageWidth, AppGlobal.ImageHeight));
                                    await image.SaveAsync(physicalPathCreate);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                            isDownload = false;

                            item.IsDownloadImageSirv = true;
                            item.Image = AppGlobal.ImageTheodoreAlexander404;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                        }
                    }
                }
            }
            return result;
        }
        [HttpGet]
        public async Task<string> AsyncDownloadItemImagesWithImageIsNullPRE()
        {
            string conectionString = AppGlobal.TheodoreAlexander_PreSQLServerConectionString;
            string result = AppGlobal.InitializationString;
            _itemRepository.UpdateItemsURLCodeByConectionString(conectionString);
            _itemRepository.UpdateItemsDescriptionByConectionString(conectionString);
            List<Item> list = _itemRepository.GetByConectionStringWithImageIsNullToList(conectionString);
            bool isDownload = false;
            foreach (Item item in list)
            {
                if (!string.IsNullOrEmpty(item.URLCode))
                {
                    string fileName = item.URLCode + ".jpg";
                    string subPath = AppGlobal.Images + @"\Item";
                    var physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, subPath, fileName);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            client.DownloadFile(new Uri(item.ImageSirv), physicalPathCreate);
                            isDownload = true;
                            item.IsDownloadImageSirv = true;
                            item.Image = fileName;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                            if (isDownload == true)
                            {
                                using (SixLabors.ImageSharp.Image image = SixLabors.ImageSharp.Image.Load(physicalPathCreate))
                                {
                                    image.Mutate(x => x.Resize(AppGlobal.ImageWidth, AppGlobal.ImageHeight));
                                    await image.SaveAsync(physicalPathCreate);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                            isDownload = false;

                            item.IsDownloadImageSirv = true;
                            item.Image = AppGlobal.ImageTheodoreAlexander404;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                        }
                    }
                }
            }
            return result;
        }
        [HttpGet]
        public async Task<string> AsyncDownloadItemImagesWithImageIsNullLIVE()
        {
            string conectionString = AppGlobal.TheodoreAlexander_NewSQLServerConectionStringLIVE;
            string result = AppGlobal.InitializationString;
            _itemRepository.UpdateItemsURLCodeByConectionString(conectionString);
            _itemRepository.UpdateItemsDescriptionByConectionString(conectionString);
            List<Item> list = _itemRepository.GetByConectionStringWithImageIsNullToList(conectionString);
            bool isDownload = false;
            foreach (Item item in list)
            {
                if (!string.IsNullOrEmpty(item.URLCode))
                {
                    string fileName = item.SKU + "_main_1.jpg";
                    string subPath = AppGlobal.Images + @"\Item";
                    var physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, subPath, fileName);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            client.DownloadFile(new Uri(item.ImageSirv), physicalPathCreate);
                            if (isDownload == true)
                            {
                                using (SixLabors.ImageSharp.Image image = SixLabors.ImageSharp.Image.Load(physicalPathCreate))
                                {
                                    image.Mutate(x => x.Resize(AppGlobal.ImageWidth, AppGlobal.ImageHeight));
                                    await image.SaveAsync(physicalPathCreate);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }
                }
            }
            return result;
        }

        [HttpGet]
        public async Task<string> AsyncDownloadItemImagesTEST()
        {
            string conectionString = AppGlobal.TheodoreAlexander_NewSQLServerConectionString;
            string result = AppGlobal.InitializationString;
            _itemRepository.UpdateItemsURLCodeByConectionString(conectionString);
            _itemRepository.UpdateItemsDescriptionByConectionString(conectionString);
            List<Item> list = _itemRepository.GetByActiveAndConectionStringToList(conectionString);
            bool isDownload = false;
            foreach (Item item in list)
            {
                if (!string.IsNullOrEmpty(item.URLCode))
                {
                    string fileName = item.URLCode + ".jpg";
                    string subPath = AppGlobal.Images + @"\Item";
                    var physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, subPath, fileName);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            client.DownloadFile(new Uri(item.ImageSirv), physicalPathCreate);
                            isDownload = true;
                            item.IsDownloadImageSirv = true;
                            item.Image = fileName;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                            if (isDownload == true)
                            {
                                using (SixLabors.ImageSharp.Image image = SixLabors.ImageSharp.Image.Load(physicalPathCreate))
                                {
                                    image.Mutate(x => x.Resize(AppGlobal.ImageWidth, AppGlobal.ImageHeight));
                                    await image.SaveAsync(physicalPathCreate);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                            isDownload = false;

                            item.IsDownloadImageSirv = true;
                            item.Image = AppGlobal.ImageTheodoreAlexander404;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                        }
                    }
                }
            }
            return result;
        }
        [HttpGet]
        public async Task<string> AsyncDownloadItemImagesPRE()
        {
            string conectionString = AppGlobal.TheodoreAlexander_PreSQLServerConectionString;
            string result = AppGlobal.InitializationString;
            _itemRepository.UpdateItemsURLCodeByConectionString(conectionString);
            _itemRepository.UpdateItemsDescriptionByConectionString(conectionString);
            List<Item> list = _itemRepository.GetByActiveAndConectionStringToList(conectionString);
            bool isDownload = false;
            foreach (Item item in list)
            {
                if (!string.IsNullOrEmpty(item.URLCode))
                {
                    string fileName = item.URLCode + ".jpg";
                    string subPath = AppGlobal.Images + @"\Item";
                    var physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, subPath, fileName);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            client.DownloadFile(new Uri(item.ImageSirv), physicalPathCreate);
                            isDownload = true;
                            item.IsDownloadImageSirv = true;
                            item.Image = fileName;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                            if (isDownload == true)
                            {
                                using (SixLabors.ImageSharp.Image image = SixLabors.ImageSharp.Image.Load(physicalPathCreate))
                                {
                                    image.Mutate(x => x.Resize(AppGlobal.ImageWidth, AppGlobal.ImageHeight));
                                    await image.SaveAsync(physicalPathCreate);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                            isDownload = false;

                            item.IsDownloadImageSirv = true;
                            item.Image = AppGlobal.ImageTheodoreAlexander404;
                            await _itemRepository.AsyncUpdateBySQLAndConectionString(item, conectionString);
                        }
                    }
                }
            }
            return result;
        }
        [HttpGet]
        public async Task<string> AsyncDownloadItemImagesLIVE()
        {
            string conectionString = AppGlobal.TheodoreAlexander_NewSQLServerConectionStringLIVE;
            string result = AppGlobal.InitializationString;
            _itemRepository.UpdateItemsURLCodeByConectionString(conectionString);
            _itemRepository.UpdateItemsDescriptionByConectionString(conectionString);
            List<Item> list = _itemRepository.GetByActiveAndConectionStringToList(conectionString);
            bool isDownload = false;
            foreach (Item item in list)
            {
                if (!string.IsNullOrEmpty(item.URLCode))
                {
                    string fileName = item.SKU + "_main_1.jpg";
                    string subPath = AppGlobal.Images + @"\Item";
                    var physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, subPath, fileName);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            client.DownloadFile(new Uri(item.ImageSirv), physicalPathCreate);
                            if (isDownload == true)
                            {
                                using (SixLabors.ImageSharp.Image image = SixLabors.ImageSharp.Image.Load(physicalPathCreate))
                                {
                                    image.Mutate(x => x.Resize(AppGlobal.ImageWidth, AppGlobal.ImageHeight));
                                    await image.SaveAsync(physicalPathCreate);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }
                }
            }
            return result;
        }

        [HttpGet]
        public string SynchronizedTESTToLIVE()
        {
            string result = AppGlobal.InitializationDateTimeCode;

            //List<Brand> listBrand = _brandRepository.GetAllToList();
            //foreach (Brand item in listBrand)
            //{
            //    _brandRepository.UpdateBySQL(item);
            //}

            //List<Collection> listCollection = _collectionRepository.GetAllToList();
            //foreach (Collection item in listCollection)
            //{
            //    _collectionRepository.UpdateBySQL(item);
            //}

            //List<Designer> listDesigner = _designerRepository.GetAllToList();
            //foreach (Designer item in listDesigner)
            //{
            //    _designerRepository.UpdateBySQL(item);
            //}

            //List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetAllToList();
            //foreach (LifeStyle item in listLifeStyle)
            //{
            //    _lifeStyleRepository.UpdateBySQL(item);
            //}

            //List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetAllToList();
            //foreach (RoomAndUsage item in listRoomAndUsage)
            //{
            //    _roomAndUsageRepository.UpdateBySQL(item);
            //}

            //List<Shape> listShape = _shapeRepository.GetAllToList();
            //foreach (Shape item in listShape)
            //{
            //    _shapeRepository.UpdateBySQL(item);
            //}

            //List<TA.Data.Models.Style> listStyle = _styleRepository.GetAllToList();
            //foreach (TA.Data.Models.Style item in listStyle)
            //{
            //    _styleRepository.UpdateBySQL(item);
            //}

            return result;
        }
        [HttpGet]
        public async Task<string> AsyncSynchronizedItemTESTToLIVE()
        {
            string result = AppGlobal.InitializationDateTimeCode;
            List<TA.Data.Models.Item> listItem = await _itemRepository.AsyncGetByActiveToList();
            foreach (TA.Data.Models.Item item in listItem)
            {
                try
                {
                    await _itemRepository.AsyncUpdateBySQLAndConectionString(item, AppGlobal.TheodoreAlexander_NewSQLServerConectionStringLIVE);
                }
                catch (Exception e)
                {
                    string mes = e.Message;
                }
            }
            return result;
        }
        [HttpGet]
        public async Task<string> AsyncSynchronizedItemTESTToPreLIVE()
        {
            string result = AppGlobal.InitializationDateTimeCode;
            List<TA.Data.Models.Item> listItem = await _itemRepository.AsyncGetByActiveToList();
            foreach (TA.Data.Models.Item item in listItem)
            {
                try
                {
                    await _itemRepository.AsyncUpdateBySQLAndConectionString(item, AppGlobal.TheodoreAlexander_PreSQLServerConectionString);
                }
                catch (Exception e)
                {
                    string mes = e.Message;
                }
            }
            return result;
        }

        [HttpGet]
        public bool GetIsActiveTAUS()
        {
            return IsActiveTAUS;
        }
        [HttpGet]
        public JsonResult InitializationSiteMapListToXML()
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string fileName = @"sitemap_List.xml";
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                var physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.InitializationString, fileName);
                using (XmlTextWriter writer = new XmlTextWriter(physicalPathCreate, System.Text.Encoding.UTF8))
                {
                    writer.WriteStartDocument();
                    writer.WriteStartElement("urlset");
                    writer.WriteAttributeString("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
                    writer.WriteAttributeString("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                    writer.WriteAttributeString("xmlns:image", "http://www.google.com/schemas/sitemap-image/1.1");
                    writer.WriteAttributeString("xmlns:video", "http://www.google.com/schemas/sitemap-video/1.1");
                    writer.WriteAttributeString("xsi:schemaLocation", "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd");

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE);
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/index.jpg");
                    //writer.WriteElementString("image:caption", "Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + "dealer-locator.html");
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/TAStudio.jpg");
                    //writer.WriteElementString("image:caption", "Dealer locator, Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "Dealer locator - Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.AboutHTML);
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/about-us-000.jpg");
                    //writer.WriteElementString("image:caption", "About - Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "About - Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.ContactHTML);
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/contact-002.jpg");
                    //writer.WriteElementString("image:caption", "Contact - Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "Contact - Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Special + "/" + AppGlobal.InStock + AppGlobal.HTMLExtension);
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/index.jpg");
                    //writer.WriteElementString("image:caption", "In Stock - Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "In Stock - Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Special + "/" + AppGlobal.CasualLiving + AppGlobal.HTMLExtension);
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/index.jpg");
                    //writer.WriteElementString("image:caption", "Casual Living - Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "Casual Living - Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Special + "/" + AppGlobal.NewProducts + AppGlobal.HTMLExtension);
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/index.jpg");
                    //writer.WriteElementString("image:caption", "New Products - Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "New Products - Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    writer.WriteStartElement("url");
                    writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Special + "/" + AppGlobal.CustomPalette + AppGlobal.HTMLExtension);
                    //writer.WriteStartElement("image:image");
                    //writer.WriteElementString("image:loc", "https://theodorealexander.com/images/index.jpg");
                    //writer.WriteElementString("image:caption", "Custom Palette - Theodore Alexander is one of the finest luxury furniture brands in the world. We believe in using the most interesting materials for both function and beauty. Email: info@theodorealexander.com. Phone: (US) 336.885.5005. Fax: (US) 336.885.5260");
                    //writer.WriteElementString("image:title", "Custom Palette - Theodore Alexander is one of the finest luxury furniture brands in the world - theodorealexander.com");
                    //writer.WriteEndElement();
                    writer.WriteEndElement();

                    List<Collection> listCollection = _collectionRepository.GetByIsActiveToList(true);
                    foreach (Collection item in listCollection)
                    {
                        try
                        {

                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.ImageURL);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }

                    }

                    List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                    foreach (LifeStyle item in listLifeStyle)
                    {
                        try
                        {
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.LifeStyle + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.ImageURL);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    List<Shape> listShape = _shapeRepository.GetByIsActiveToList(true);
                    foreach (Shape item in listShape)
                    {
                        try
                        {
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Shape + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.ImageURL);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    List<TA.Data.Models.Type> listType = _typeRepository.GetByIsActiveToList(true);
                    foreach (TA.Data.Models.Type item in listType)
                    {
                        try
                        {
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Type + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.ImageURL);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                    foreach (RoomAndUsage item in listRoomAndUsage)
                    {
                        try
                        {
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.ImageURL);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    List<Brand> listBrand = _brandRepository.GetByIsActiveToList(true);
                    foreach (Brand item in listBrand)
                    {
                        try
                        {
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Brand + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.ImageURL);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    List<Style> listStyle = _styleRepository.GetByIsActiveToList(true);
                    foreach (Style item in listStyle)
                    {
                        try
                        {
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Style + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.ImageURL);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    List<Designer> listDesigner = _designerRepository.GetByIsActiveToList(true);
                    foreach (Designer item in listDesigner)
                    {
                        try
                        {
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.URLImageMain);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Designer + @"/" + item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension);
                            //writer.WriteStartElement("image:image");
                            //writer.WriteElementString("image:loc", item.URLImageMain);
                            //writer.WriteElementString("image:caption", item.Description);
                            //writer.WriteElementString("image:title", item.Name);
                            //writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }
                    writer.WriteEndDocument();
                    writer.Flush();
                }
                string ftpUrl = AppGlobal.LIVEFTP + fileName;
                FtpWebRequest requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                byte[] fileContents = System.IO.File.ReadAllBytes(physicalPathCreate);
                requestLIVEFTP.ContentLength = fileContents.Length;
                using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                {
                    requestStream.Write(fileContents, 0, fileContents.Length);
                }

            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult InitializationSiteMapItemToXML()
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string fileName = @"sitemap_Item2022.xml";
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                var physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.InitializationString, fileName);
                using (XmlTextWriter writer = new XmlTextWriter(physicalPathCreate, System.Text.Encoding.UTF8))
                {
                    writer.WriteStartDocument();
                    writer.WriteStartElement("urlset");
                    writer.WriteAttributeString("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
                    writer.WriteAttributeString("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                    writer.WriteAttributeString("xmlns:image", "http://www.google.com/schemas/sitemap-image/1.1");
                    writer.WriteAttributeString("xmlns:video", "http://www.google.com/schemas/sitemap-video/1.1");
                    writer.WriteAttributeString("xsi:schemaLocation", "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd");

                    List<TA.Data.Models.Item> listItem = _itemRepository.GetByIsActiveToList(true);
                    foreach (TA.Data.Models.Item item in listItem)
                    {
                        try
                        {
                            string imageURL = item.Image;
                            if (string.IsNullOrEmpty(imageURL))
                            {
                                imageURL = item.ImageSirv;
                            }
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.ProductDetail + "/" + item.URLCode + AppGlobal.HTMLExtension);
                            writer.WriteElementString("lastmod", item.DateCreated.Value.ToString("yyyy-MM-dd"));
                            writer.WriteStartElement("image:image");
                            writer.WriteElementString("image:loc", imageURL);
                            writer.WriteElementString("image:caption", item.Description);
                            writer.WriteElementString("image:title", item.ProductName);
                            writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    writer.WriteEndDocument();
                    writer.Flush();
                }

                string ftpUrl = AppGlobal.LIVEFTP + fileName;
                FtpWebRequest requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                byte[] fileContents = System.IO.File.ReadAllBytes(physicalPathCreate);
                requestLIVEFTP.ContentLength = fileContents.Length;
                using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                {
                    requestStream.Write(fileContents, 0, fileContents.Length);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationSiteMapProductToXML()
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string fileName = @"sitemap_Product2022.xml";
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                var physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.InitializationString, fileName);
                using (XmlTextWriter writer = new XmlTextWriter(physicalPathCreate, System.Text.Encoding.UTF8))
                {
                    writer.WriteStartDocument();
                    writer.WriteStartElement("urlset");
                    writer.WriteAttributeString("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
                    writer.WriteAttributeString("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                    writer.WriteAttributeString("xmlns:image", "http://www.google.com/schemas/sitemap-image/1.1");
                    writer.WriteAttributeString("xmlns:video", "http://www.google.com/schemas/sitemap-video/1.1");
                    writer.WriteAttributeString("xsi:schemaLocation", "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd");

                    List<TA.Data.DataTransfer.ItemDataTransfer> listItem = _itemRepository.GetItemDataTransferByActiveToList();
                    foreach (TA.Data.Models.Item item in listItem)
                    {

                        try
                        {
                            string imageURL = item.Image;
                            if (string.IsNullOrEmpty(imageURL))
                            {
                                imageURL = item.ImageSirv;
                            }
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Product + "/" + item.URLCode + AppGlobal.HTMLExtension);
                            writer.WriteElementString("lastmod", item.DateCreated.Value.ToString("yyyy-MM-dd"));
                            writer.WriteStartElement("image:image");
                            writer.WriteElementString("image:loc", imageURL);
                            writer.WriteElementString("image:caption", item.Description);
                            writer.WriteElementString("image:title", item.ProductName);
                            writer.WriteEndElement();
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    writer.WriteEndDocument();
                    writer.Flush();
                }
                string ftpUrl = AppGlobal.LIVEFTP + fileName;
                FtpWebRequest requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                byte[] fileContents = System.IO.File.ReadAllBytes(physicalPathCreate);
                requestLIVEFTP.ContentLength = fileContents.Length;
                using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                {
                    requestStream.Write(fileContents, 0, fileContents.Length);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationSiteMapSEOBlogBySEOKeywordIDCountryIDToXML(int sEOKeywordID, string countryID)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string ftpUrl = AppGlobal.InitializationString;
                FtpWebRequest requestLIVEFTP;
                byte[] fileContents;
                SEOKeyword itemSEOKeyword = _sEOKeywordRepository.GetByID(sEOKeywordID);
                Country country = _countryRepository.GetByID(Guid.Parse(countryID));
                string fileName = "sitemap_" + itemSEOKeyword.Code + "_" + country.ISO + @".xml";
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                var physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.InitializationString, fileName);
                using (XmlTextWriter writer = new XmlTextWriter(physicalPathCreate, System.Text.Encoding.UTF8))
                {
                    writer.WriteStartDocument();
                    writer.WriteStartElement("urlset");
                    writer.WriteAttributeString("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
                    writer.WriteAttributeString("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                    writer.WriteAttributeString("xmlns:image", "http://www.google.com/schemas/sitemap-image/1.1");
                    writer.WriteAttributeString("xmlns:video", "http://www.google.com/schemas/sitemap-video/1.1");
                    writer.WriteAttributeString("xsi:schemaLocation", "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd");

                    List<TA.Data.Models.SEOBlog> listSEOBlog = _sEOBlogRepository.GetByKeywordIDAndCountryIDAndActiveToList(itemSEOKeyword.ID, countryID, true);
                    for (int i = 0; i < listSEOBlog.Count; i++)
                    {
                        try
                        {
                            TA.Data.Models.SEOBlog item = listSEOBlog[i];
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", AppGlobal.DomainURLLIVE + AppGlobal.Article + "/" + item.URLCode + AppGlobal.HTMLExtension);
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }
                    writer.WriteEndDocument();
                    writer.Flush();
                }
                ftpUrl = AppGlobal.LIVEFTP + fileName;
                requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                fileContents = System.IO.File.ReadAllBytes(physicalPathCreate);
                requestLIVEFTP.ContentLength = fileContents.Length;
                using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                {
                    requestStream.Write(fileContents, 0, fileContents.Length);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult InitializationSiteMapBlogToXML()
        {
            string result = AppGlobal.InitializationString;
            try
            {
                WebClient webClient = new WebClient();
                System.Json.JsonValue listJsonValue = JsonValue.Parse(webClient.DownloadString(AppGlobal.BlogAPIURL));
                var listBlogJSON = listJsonValue["posts"];
                int count = listBlogJSON.Count;
                string fileName = @"sitemap_Blog.xml";
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                var physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.InitializationString, fileName);
                using (XmlTextWriter writer = new XmlTextWriter(physicalPathCreate, System.Text.Encoding.UTF8))
                {
                    writer.WriteStartDocument();
                    writer.WriteStartElement("urlset");
                    writer.WriteAttributeString("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
                    writer.WriteAttributeString("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                    writer.WriteAttributeString("xmlns:image", "http://www.google.com/schemas/sitemap-image/1.1");
                    writer.WriteAttributeString("xmlns:video", "http://www.google.com/schemas/sitemap-video/1.1");
                    writer.WriteAttributeString("xsi:schemaLocation", "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd");

                    for (int i = 0; i < count; i++)
                    {
                        try
                        {
                            string slug = listBlogJSON[i]["slug"];

                            slug = AppGlobal.DomainURLLIVE + AppGlobal.Blog + "/" + slug + ".html";
                            string updated_at = listBlogJSON[i]["updated_at"];
                            try
                            {
                                updated_at = updated_at.Split('T')[0];
                            }
                            catch (Exception e1)
                            {
                                result = e1.Message;
                            }
                            writer.WriteStartElement("url");
                            writer.WriteElementString("loc", slug);
                            writer.WriteEndElement();
                        }
                        catch (Exception e)
                        {
                            result = e.Message;
                        }
                    }

                    writer.WriteEndDocument();
                    writer.Flush();
                }

                string ftpUrl = AppGlobal.LIVEFTP + fileName;
                FtpWebRequest requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                byte[] fileContents = System.IO.File.ReadAllBytes(physicalPathCreate);
                requestLIVEFTP.ContentLength = fileContents.Length;
                using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                {
                    requestStream.Write(fileContents, 0, fileContents.Length);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationHTMLCategoryPageInTEST(bool isRoom = true, bool isType = true, bool isBrand = true, bool isCollection = true, bool isLifeStyle = true, bool isStyle = true, bool isShape = true, bool isDesigner = true, bool isSpecial = true, bool isProduct = true)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                string contentHTMLAbout = AppGlobal.InitializationString;
                string contentHTMLContact = AppGlobal.InitializationString;
                string contentHTMLNewProducts = AppGlobal.InitializationString;
                string contentHTMLCasualLiving = AppGlobal.InitializationString;
                string contentHTMLCustomPalette = AppGlobal.InitializationString;
                string contentHTMLInStocked = AppGlobal.InitializationString;
                string contentHTMLDesigner = AppGlobal.InitializationString;
                string contentHTMLDesignerInfomation = AppGlobal.InitializationString;
                string contentHTMLProduct = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplate);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateNewProducts);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLNewProducts = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateCasualLiving);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLCasualLiving = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateCustomPalette);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLCustomPalette = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateInStocked);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLInStocked = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateDesigner);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLDesigner = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateDesignerInfomation);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLDesignerInfomation = r.ReadToEnd();
                    }
                }

                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.AboutTemplate);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLAbout = r.ReadToEnd();
                    }
                }

                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ContactTemplate);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLContact = r.ReadToEnd();
                    }
                }

                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductTemplate);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLProduct = r.ReadToEnd();
                    }
                }

                contentHTML = contentHTML.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTML = contentHTML.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTML = contentHTML.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTML = contentHTML.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTML = contentHTML.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTML = contentHTML.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTML = contentHTML.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTML = contentHTML.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTML = contentHTML.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLProduct = contentHTMLProduct.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLProduct = contentHTMLProduct.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                string pageURL001 = AppGlobal.DomainURLTEST + AppGlobal.AboutHTML;
                contentHTMLAbout = contentHTMLAbout.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageTitle]", AppGlobal.About001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageDescription]", AppGlobal.About001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywords]", AppGlobal.About001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLCheck]", AppGlobal.About001.ToLower());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageURL]", pageURL001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                pageURL001 = AppGlobal.DomainURLTEST + AppGlobal.ContactHTML;
                contentHTMLContact = contentHTMLContact.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageTitle]", AppGlobal.Contact001);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageDescription]", AppGlobal.Contact001);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywords]", AppGlobal.Contact001);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLCheck]", AppGlobal.Contact001.ToLower());
                contentHTMLContact = contentHTMLContact.Replace(@"[PageURL]", pageURL001);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                List<Collection> listCollection = _collectionRepository.GetByIsActiveToList(true);
                List<Collection> listCollectionTheodoreAlexanderBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TheodoreAlexanderBrandID, true);
                List<Collection> listCollectionSaloneBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.SaloneBrandID, true);
                List<Collection> listCollectionTAStudioBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TAStudioBrandID, true);
                List<Collection> listCollectionUS = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Collection> listCollectionInternational = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Style> listStyle = _styleRepository.GetByIsActiveToList(true);
                List<Style> listStyleUS = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Style> listStyleInternational = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                List<RoomAndUsage> listRoomAndUsageUS = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<RoomAndUsage> listRoomAndUsageInternational = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Shape> listShape = _shapeRepository.GetByIsActiveToList(true);
                List<Shape> listShapeUS = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Shape> listShapeInternational = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                List<LifeStyle> listLifeStyleUS = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<LifeStyle> listLifeStyleInternational = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<TA.Data.Models.Type> listType = _typeRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Type> listTypeUS = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<TA.Data.Models.Type> listTypeInternational = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Brand> listBrand = _brandRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Designer> listDesigner = _designerRepository.GetByIsActiveToList(true);

                List<ItemDataTransfer> listItemDataTransferExtendingUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);
                List<ItemDataTransfer> listItemDataTransferExtendingInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);

                StringBuilder menuTopBrandTheodoreAlexander = new StringBuilder();
                StringBuilder menuTopBrandSalone = new StringBuilder();
                StringBuilder menuTopBrandTAStudio = new StringBuilder();
                StringBuilder menuTopProduct = new StringBuilder();
                StringBuilder menuTopDesigner = new StringBuilder();
                StringBuilder menuLeftUS = new StringBuilder();
                StringBuilder menuLeftInternational = new StringBuilder();
                StringBuilder menuBrandMobileTheodoreAlexander = new StringBuilder();
                StringBuilder menuBrandMobileSalone = new StringBuilder();
                StringBuilder menuBrandMobileTAStudio = new StringBuilder();
                StringBuilder menuProductMobile = new StringBuilder();
                StringBuilder menuDesignerMobile = new StringBuilder();
                StringBuilder productListProductsUSHTML = new StringBuilder();
                StringBuilder productListProductsInternationalHTML = new StringBuilder();

                int i = 1;
                int listCollectionTheodoreAlexanderBrandIDNumber = listCollectionTheodoreAlexanderBrandID.Count / 4;
                listCollectionTheodoreAlexanderBrandIDNumber = listCollectionTheodoreAlexanderBrandIDNumber + 1;
                foreach (Collection item in listCollectionTheodoreAlexanderBrandID)
                {
                    string liHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileTheodoreAlexander.AppendLine(liHTML);
                    if ((i == 1) || (i % listCollectionTheodoreAlexanderBrandIDNumber == 1))
                    {
                        menuTopBrandTheodoreAlexander.AppendLine("<ul>");
                    }
                    menuTopBrandTheodoreAlexander.AppendLine(liHTML);
                    if (i > 1)
                    {
                        if ((i == listCollectionTheodoreAlexanderBrandID.Count) || (i % listCollectionTheodoreAlexanderBrandIDNumber == 0))
                        {
                            menuTopBrandTheodoreAlexander.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }
                StringBuilder menuTopBrandTAStudioInternational = new StringBuilder();
                StringBuilder menuTopBrandTAStudioUS = new StringBuilder();
                menuTopBrandTAStudioInternational.AppendLine(@"<div id='MenuTopBrandTAStudioInternational' style='display: flex;'>");
                menuTopBrandTAStudioUS.AppendLine(@"<div id='MenuTopBrandTAStudioUS' style='display: flex;'>");
                i = 1;
                foreach (Collection item in listCollectionTAStudioBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    if (item.ID.ToString().ToUpper() == "461DA43B-0409-4EBD-8EF2-0FB911718678")
                    {
                        liMobileHTML = @"<li id='TAStudioFrenzy" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    if (item.ID.ToString().ToUpper() == "85CFC3ED-8876-436E-8159-B1E1025644C8")
                    {
                        liMobileHTML = @"<li id='TAStudioHolli" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    menuBrandMobileTAStudio.AppendLine(liMobileHTML);
                    if ((i == 1) || (i % 5 == 1))
                    {
                        menuTopBrandTAStudioInternational.AppendLine("<ul style='min-width: 150px;'>");
                        menuTopBrandTAStudioUS.AppendLine("<ul style='min-width: 150px;'>");
                    }
                    menuTopBrandTAStudioInternational.AppendLine(liHTML);
                    if ((item.ID.ToString().ToUpper() != "461DA43B-0409-4EBD-8EF2-0FB911718678") && (item.ID.ToString().ToUpper() != "85CFC3ED-8876-436E-8159-B1E1025644C8"))
                    {
                        menuTopBrandTAStudioUS.AppendLine(liHTML);
                    }
                    if (i > 1)
                    {
                        if ((i == listCollectionTAStudioBrandID.Count) || (i % 5 == 0))
                        {
                            menuTopBrandTAStudioInternational.AppendLine("</ul>");
                            menuTopBrandTAStudioUS.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }
                menuTopBrandTAStudioInternational.AppendLine(@"</div>");
                menuTopBrandTAStudioUS.AppendLine(@"</div>");
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioInternational.ToString());
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioUS.ToString());

                foreach (Collection item in listCollectionSaloneBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileSalone.AppendLine(liMobileHTML);
                    menuTopBrandSalone.AppendLine(liHTML);
                }


                foreach (RoomAndUsage item in listRoomAndUsage)
                {
                    string liMobileHTML = @"<li class='item_left_branch'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuTopProduct.AppendLine(@"<ul>");
                    menuTopProduct.AppendLine(@"<li>");
                    menuTopProduct.AppendLine(@"<h1><a title='" + item.DisplayName.ToUpper() + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension + "'>" + item.DisplayName.ToUpper() + "</a></h1>"); ;
                    menuTopProduct.AppendLine(@"</li>");

                    menuProductMobile.AppendLine(@"<li class='sub-item-mobile'>");
                    menuProductMobile.AppendLine(@"<a onclick='on" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Open + "()' title='" + item.DisplayName.ToUpper() + "'><i id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Icon + "' class='icon-plus'></i>" + item.DisplayName.ToUpper() + "</a>");
                    menuProductMobile.AppendLine(@"<ul id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + "Mobile' hidden>");


                    foreach (TA.Data.Models.Type itemType in listType)
                    {
                        string liHTML = @"<li><a title='" + itemType.DisplayName + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + @"/" + itemType.URLCode + AppGlobal.HTMLExtension + "'>" + itemType.DisplayName + "</a></li>";
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuTopProduct.AppendLine(liHTML);
                            menuProductMobile.AppendLine(liHTML);
                        }
                    }

                    menuTopProduct.AppendLine(@"</ul>");

                    menuProductMobile.AppendLine(@"</ul>");
                    menuProductMobile.AppendLine(@"<li>");
                }

                foreach (Designer item in listDesigner)
                {
                    if (!string.IsNullOrEmpty(item.ImageIcon))
                    {
                        item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                    }
                    if (!string.IsNullOrEmpty(item.ImageMain))
                    {
                        item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                    }
                    if (!string.IsNullOrEmpty(item.ImageBackground))
                    {
                        item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                    }
                    StringBuilder liHTML = new StringBuilder();
                    liHTML.AppendLine(@"<ul>");
                    liHTML.AppendLine(@"<li class='icon_designer_optimize'>");
                    liHTML.AppendLine(@"<div class='image'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>");
                    liHTML.AppendLine(@"<img src='" + item.URLImageIcon + "' title='" + item.DisplayName + "' alt='" + item.DisplayName + "' />");
                    liHTML.AppendLine(@"</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"<div class='title_menu_designer'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"</li>");
                    liHTML.AppendLine(@"</ul>");
                    string liMobileHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuDesignerMobile.AppendLine(liMobileHTML);
                    menuTopDesigner.AppendLine(liHTML.ToString());
                }

                menuLeftUS.AppendLine(@"<ul id='" + AppGlobal.MenuLeft + AppGlobal.US + "' " + AppGlobal.Hidden + ">");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.US + "'>");
                menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()'>ROOMS (<span id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul " + AppGlobal.Hidden + " id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "' style='padding-left: 10px;'>");
                int roomCountUS = AppGlobal.InitializationNumber;
                foreach (RoomAndUsage item in listRoomAndUsageUS)
                {
                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header' id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"'>");
                    menuLeftUS.AppendLine(@"<div style='cursor: pointer; display: flex; border-bottom: 1px dashed #d4d4d4; padding-bottom: 10px;' onclick=""on" + AppGlobal.RoomAndUsage001 + AppGlobal.Sub + AppGlobal.Change + "('" + item.ID.ToString().ToUpper() + @"')""><i id='" + item.ID.ToString().ToUpper() + AppGlobal.Icon + AppGlobal.US + "' class='ngb_accordion_header_expand-collapse-indicatior-arrow'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</div>");
                    menuLeftUS.AppendLine(@"<ul id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='margin-top: 10px; margin-left: 15px;'>");
                    foreach (TA.Data.Models.Type itemType in listTypeUS)
                    {
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuLeftUS.AppendLine(@"<li id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.Type001 + AppGlobal.Select + "('" + itemType.ID.ToString().ToUpper() + "', '" + itemType.URLCode + @"', 1)"">");
                            menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + itemType.DisplayName + "'><i class='icon-circle'></i> " + itemType.DisplayName + " (<span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + itemType.ItemCount + "</span><span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                            menuLeftUS.AppendLine(@"</li>");
                        }
                    }
                    menuLeftUS.AppendLine(@"</ul>");
                    menuLeftUS.AppendLine(@"</li>");
                    roomCountUS = roomCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.Collection + AppGlobal.US + "'>");
                menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()'>COLLECTIONS (<span id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' " + AppGlobal.Hidden + " class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' " + AppGlobal.Hidden + " id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "'>");
                int collectionCountUS = AppGlobal.InitializationNumber;
                foreach (Collection item in listCollectionUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.Collection001 + AppGlobal.Select + "('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    collectionCountUS = collectionCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.LifeStyle001 + AppGlobal.US + "'>");
                menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()'>LIFESTYLES (<span id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' " + AppGlobal.Hidden + " class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' " + AppGlobal.Hidden + " id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "'>");
                int lifeStyleCountUS = AppGlobal.InitializationNumber;
                foreach (LifeStyle item in listLifeStyleUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.LifeStyle001 + AppGlobal.Select + "('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    lifeStyleCountUS = lifeStyleCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftStyleUS'>");
                menuLeftUS.AppendLine(@"<span onclick='onStyleChangeUS()'>STYLES (<span id='StyleCountUS' hidden>[StyleCountUS]</span><span id='StyleCountUSFilter'>[StyleCountUSFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onStyleChangeUS()' id='StyleListIconPlusUS' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onStyleChangeUS()' id='StyleListIconMinusUS' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' hidden id='StyleListSubUS'>");
                int styleCountUS = AppGlobal.InitializationNumber;
                foreach (Style item in listStyleUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiUS' onclick=""onStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountUS' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountUSFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountUSFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "US' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    styleCountUS = styleCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftShapeUS'>");
                menuLeftUS.AppendLine(@"<span onclick='onShapeChangeUS()'>SHAPES (<span id='ShapeCountUS' hidden>[ShapeCountUS]</span><span id='ShapeCountUSFilter'>[ShapeCountUSFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onShapeChangeUS()' id='ShapeListIconPlusUS' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onShapeChangeUS()' id='ShapeListIconMinusUS' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' hidden id='ShapeListSubUS'>");
                int shapeCountUS = AppGlobal.InitializationNumber;
                foreach (Shape item in listShapeUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiUS' onclick=""onShapeSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountUS' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountUSFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountUSFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "US' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    shapeCountUS = shapeCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftExtendingUS' onclick='onEXTENDINGChangeUS()'>");
                menuLeftUS.AppendLine(@"<a title='EXTENDING'>EXTENDING (<span id='ExtendingCountUS' hidden>" + listItemDataTransferExtendingUS.Count + "</span><span id='ExtendingCountUSFilter'>[ExtendingCountUSFilter]</span>) <span id='EXTENDINGUS' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"</ul>");


                menuLeftInternational.AppendLine(@"<ul id='" + AppGlobal.MenuLeft + AppGlobal.International + "'>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.International + "'>");
                menuLeftInternational.AppendLine(@"<span onclick='onRoomChangeInternational()'>ROOMS (<span id='RoomCountInternational' hidden>[RoomCountInternational]</span><span id='RoomCountInternationalFilter'>[RoomCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onRoomChangeInternational()' id='RoomListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onRoomChangeInternational()' id='RoomListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul hidden id='RoomListSubInternational' style='padding-left: 10px;'>");
                int roomCountInternational = AppGlobal.InitializationNumber;
                foreach (RoomAndUsage item in listRoomAndUsageInternational)
                {
                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header' id='" + item.ID.ToString().ToUpper() + @"LiInternational'>");
                    menuLeftInternational.AppendLine(@"<div style='cursor: pointer; display: flex; border-bottom: 1px dashed #d4d4d4; padding-bottom: 10px;' onclick=""onRoomSubChange('" + item.ID.ToString().ToUpper() + @"')""><i id='" + item.ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>)</div>");
                    menuLeftInternational.AppendLine(@"<ul id='" + item.ID.ToString().ToUpper() + "International' hidden style='margin-top: 10px; margin-left: 15px;'>");
                    foreach (TA.Data.Models.Type itemType in listTypeInternational)
                    {
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuLeftInternational.AppendLine(@"<li id='" + itemType.ID.ToString().ToUpper() + @"LiInternational' onclick=""onTypeSelect('" + itemType.ID.ToString().ToUpper() + "', '" + itemType.URLCode + @"', 1)"">");
                            menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + itemType.DisplayName + "'><i class='icon-circle'></i> " + itemType.DisplayName + " (<span id='" + itemType.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + itemType.ItemCount + "</span><span id='" + itemType.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + itemType.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + itemType.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                            menuLeftInternational.AppendLine(@"</li>");
                        }
                    }
                    menuLeftInternational.AppendLine(@"</ul>");
                    menuLeftInternational.AppendLine(@"</li>");
                    roomCountInternational = roomCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftCollectionInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onCollectionChangeInternational()'>COLLECTIONS (<span id='CollectionCountInternational' hidden>[CollectionCountInternational]</span><span id='CollectionCountInternationalFilter'>[CollectionCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onCollectionChangeInternational()' id='CollectionListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onCollectionChangeInternational()' id='CollectionListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='CollectionListSubInternational'>");
                int collectionCountInternational = AppGlobal.InitializationNumber;
                foreach (Collection item in listCollectionInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onCollectionSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    collectionCountInternational = collectionCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftLifeStyleInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onLifeStyleChangeInternational()'>LIFESTYLES (<span id='LifeStyleCountInternational' hidden>[LifeStyleCountInternational]</span><span id='LifeStyleCountInternationalFilter'>[LifeStyleCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onLifeStyleChangeInternational()' id='LifeStyleListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onLifeStyleChangeInternational()' id='LifeStyleListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='LifeStyleListSubInternational'>");
                int lifeStyleCountInternational = AppGlobal.InitializationNumber;
                foreach (LifeStyle item in listLifeStyleInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onLifeStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    lifeStyleCountInternational = lifeStyleCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftStyleInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onStyleChangeInternational()'>STYLES (<span id='StyleCountInternational' hidden>[StyleCountInternational]</span><span id='StyleCountInternationalFilter'>[StyleCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onStyleChangeInternational()' id='StyleListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onStyleChangeInternational()' id='StyleListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='StyleListSubInternational'>");
                int styleCountInternational = AppGlobal.InitializationNumber;
                foreach (Style item in listStyleInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    styleCountInternational = styleCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftShapeInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onShapeChangeInternational()'>SHAPES (<span id='ShapeCountInternational' hidden>[ShapeCountInternational]</span><span id='ShapeCountInternationalFilter'>[ShapeCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onShapeChangeInternational()' id='ShapeListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onShapeChangeInternational()' id='ShapeListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='ShapeListSubInternational'>");
                int shapeCountInternational = AppGlobal.InitializationNumber;
                foreach (Shape item in listShapeInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onShapeSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    shapeCountInternational = shapeCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftExtendingInternational' onclick='onEXTENDINGChangeInternational()'>");
                menuLeftInternational.AppendLine(@"<a title='EXTENDING'>EXTENDING (<span id='ExtendingCountInternational' hidden>" + listItemDataTransferExtendingInternational.Count + "</span><span id='ExtendingCountInternationalFilter'>[ExtendingCountInternationalFilter]</span>)<span id='EXTENDINGInternational' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"</ul>");

                contentHTML = contentHTML.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTML = contentHTML.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTML = contentHTML.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTML = contentHTML.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTML = contentHTML.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLProduct = contentHTMLProduct.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                string contentIndex = AppGlobal.InitializationString;
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.IndexHTML);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentIndex = r.ReadToEnd();
                    }
                }

                StringBuilder blogContent = new StringBuilder();
                WebClient webClient = new WebClient();
                System.Json.JsonValue listJsonValue = JsonValue.Parse(webClient.DownloadString(AppGlobal.BlogAPIURL));
                var listBlogJSON = listJsonValue["posts"];
                int count = listBlogJSON.Count;
                if (count > 3)
                {
                    count = 3;
                }
                for (int j = 0; j < count; j++)
                {
                    string blogAuthor = "By Theodore Alexander";
                    string blogSlug = listBlogJSON[j]["slug"];
                    string blogTitle = listBlogJSON[j]["title"];
                    string blogDescription = listBlogJSON[j]["meta_description"];
                    string blogImage = listBlogJSON[j]["feature_image"];
                    string blogPublished = listBlogJSON[j]["published_at"];
                    DateTime blogDatePublished = AppGlobal.InitializationDateTime;
                    if (!string.IsNullOrEmpty(blogPublished))
                    {
                        try
                        {
                            string year = blogPublished.Split('-')[0];
                            string month = blogPublished.Split('-')[1];
                            string day = blogPublished.Split('-')[2];
                            day = day.Split('T')[0];
                            blogDatePublished = new DateTime(int.Parse(year), int.Parse(month), int.Parse(day));
                        }
                        catch (Exception e)
                        {
                            string blogMes = e.Message;
                        }
                    }
                    CultureInfo ci = new CultureInfo("en-US");
                    var monthName = DateTime.Now.ToString("MMMM", ci);
                    blogSlug = AppGlobal.DomainURLTEST + AppGlobal.Blog + "/" + blogSlug;
                    blogContent.AppendLine(@"<div class='swiper-slide slider_item d-flex' style='display: flex; justify-content: center;'>");
                    blogContent.AppendLine(@"<div class='img-fullsize-top-home-blog'>");
                    blogContent.AppendLine(@"<a title=""" + blogTitle + @""" style='color: #000 !important;' href='" + blogSlug + "'>");
                    blogContent.AppendLine(@"<img title=""" + blogTitle + @""" alt=""" + blogTitle + @""" class='pic-blog-top' style='object-fit: cover; object-position: center;' src='" + blogImage + "' width='100%' height='100%'>");
                    blogContent.AppendLine(@"</a>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"<div class='post-title content-main-post-top'>");
                    blogContent.AppendLine(@"<a title=""" + blogTitle + @""" style='color: #000 !important;' href='" + blogSlug + "'>");
                    blogContent.AppendLine(@"<h1 class='title-detail-post'>" + blogTitle + "</h1>");
                    blogContent.AppendLine(@"<div class='short-description-top'>" + blogDescription + "</div>");
                    blogContent.AppendLine(@"</a>");
                    blogContent.AppendLine(@"<div class='info-post'>");
                    blogContent.AppendLine(@"<span class='by-post'><i class='icon-user'></i><img style='width: 20px; height: 20px; border-radius: 10px;' alt='" + blogAuthor + "' title='" + blogAuthor + "' src='https://tablog.ghost.io/content/images/2021/01/_--1-.png' /><span style='margin-left: 5px;'>" + blogAuthor + "</span></span>");
                    blogContent.AppendLine(@"<span class='date-post-detail'><i class='icon-timer'></i>" + monthName + " " + blogDatePublished.Day + ", " + blogDatePublished.Year + "</span>");
                    blogContent.AppendLine(@"<div class='share-detail'>");
                    blogContent.AppendLine(@"<span>Share:</span>");
                    blogContent.AppendLine(@"<a target='_blank' href='https://www.facebook.com/sharer/sharer.php?u=" + blogSlug + "' title='facebook'><i class='icon-facebook'></i></a>");
                    blogContent.AppendLine(@"<a target='_blank' href='https://twitter.com/intent/tweet?text=" + blogTitle + "&url=" + blogSlug + "' title='twitter'><i class='icon-twitter'></i></a>");
                    blogContent.AppendLine(@"<a target='_blank' href='https://www.pinterest.com/pin-builder/?url=" + blogSlug + "&media=" + blogImage + "&description=" + blogDescription + "&method=button' title='pinterest'><i class='icon-pinterest2'></i></a>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"</div>");
                }

                contentIndex = contentIndex.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentIndex = contentIndex.Replace(@"[URLCheck]", AppGlobal.Index);
                contentIndex = contentIndex.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentIndex = contentIndex.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentIndex = contentIndex.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentIndex = contentIndex.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentIndex = contentIndex.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentIndex = contentIndex.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentIndex = contentIndex.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);
                contentIndex = contentIndex.Replace(@"[BlogContent]", blogContent.ToString());
                contentIndex = contentIndex.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentIndex = contentIndex.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentIndex = contentIndex.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentIndex = contentIndex.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentIndex = contentIndex.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentIndex = contentIndex.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentIndex = contentIndex.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentIndex = contentIndex.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentIndex = contentIndex.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentIndex = contentIndex.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Index;
                string physicalPathCreateIndex = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreateIndex))
                {
                    Directory.CreateDirectory(physicalPathCreateIndex);
                }

                physicalPathCreateIndex = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Index);
                if (!Directory.Exists(physicalPathCreateIndex))
                {
                    Directory.CreateDirectory(physicalPathCreateIndex);
                }
                //physicalPathCreateIndex = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.IndexHTML);
                //using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                //{
                //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                //    {
                //        w.WriteLine(contentIndex);
                //    }
                //}

                //subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Index;
                //physicalPathCreateIndex = Path.Combine(AppGlobal.APITESTWebRootPath, subPath);
                //if (!Directory.Exists(physicalPathCreateIndex))
                //{
                //    Directory.CreateDirectory(physicalPathCreateIndex);
                //}

                physicalPathCreateIndex = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Index, AppGlobal.IndexHTML);
                using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentIndex);
                    }
                }

                physicalPathCreateIndex = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.InitializationString, AppGlobal.AboutHTML);
                using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentHTMLAbout);
                    }
                }

                physicalPathCreateIndex = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.InitializationString, AppGlobal.ContactHTML);
                using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentHTMLContact);
                    }
                }


                List<ItemDataTransfer> listUS = new List<ItemDataTransfer>();
                List<ItemDataTransfer> listInternational = new List<ItemDataTransfer>();
                List<ItemMenuLeftDataTransfer> listUSMenuLeft = new List<ItemMenuLeftDataTransfer>();
                List<ItemMenuLeftDataTransfer> listInternationalMenuLeft = new List<ItemMenuLeftDataTransfer>();
                i = AppGlobal.InitializationNumber;
                string fileName = AppGlobal.InitializationString;
                string physicalPathCreate = AppGlobal.InitializationString;
                string pageTitle = AppGlobal.InitializationString;
                string pageDescription = AppGlobal.InitializationString;
                string pageKeywords = AppGlobal.InitializationString;
                string pageURL = AppGlobal.InitializationString;
                string uRLCheck = AppGlobal.InitializationString;
                string contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Collection;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Collection);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isCollection == true)
                {
                    foreach (Collection item in listCollection)
                    {

                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='CollectionMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Collection: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onCollectionTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Collection + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Collection + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        if (item.ID.ToString().ToUpper() == "939CCC3B-33DA-4168-A0E3-1C7C94883778")
                        {

                        }
                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }

                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }
                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubUS'", @"id='CollectionListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusUS'", @"id='CollectionListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusUS' hidden", @"id='CollectionListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");
                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubInternational'", @"id='CollectionListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusInternational'", @"id='CollectionListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusInternational' hidden", @"id='CollectionListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Collection");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Collection001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Collection, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }


                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Type;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Type);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isType == true)
                {
                    foreach (TA.Data.Models.Type item in listType)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='TypeMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Room: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onTypeTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Type + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Type + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubUS'", @"id='RoomListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusUS'", @"id='RoomListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusUS' hidden", @"id='RoomListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "US' hidden", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "US'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconUS' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconUS' class='icon-arrow_dropdown'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubInternational'", @"id='RoomListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusInternational'", @"id='RoomListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusInternational' hidden", @"id='RoomListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "International' hidden", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "International'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconInternational' class='icon-arrow_dropdown'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Type");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Type001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Type, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.RoomAndUsage;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.RoomAndUsage);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isRoom == true)
                {
                    foreach (TA.Data.Models.RoomAndUsage item in listRoomAndUsage)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        int j = AppGlobal.InitializationNumber;
                        List<TA.Data.Models.Type> listTypeSub = new List<Data.Models.Type>();
                        foreach (TA.Data.Models.Type itemType in listType)
                        {
                            if (itemType.RoomAndUsage_ID == item.ID)
                            {
                                listTypeSub.Add(itemType);
                                tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='TypeMenu" + j + "'>");
                                tagsHTML.AppendLine(@"<span style='color:#777777'>" + item.DisplayName + ": &nbsp;</span>");
                                tagsHTML.AppendLine(@"<span>" + itemType.DisplayName + "</span>");
                                tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onTypeTagClose(" + j + ")'></i>");
                                tagsHTML.AppendLine(@"</span>");
                            }
                            j = j + 1;
                        }

                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.RoomAndUsage + "_" + item.URLCode;

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubUS'", @"id='RoomListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusUS'", @"id='RoomListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusUS' hidden", @"id='RoomListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "IconUS' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.ID.ToString().ToUpper() + "IconUS' class='icon-arrow_dropdown'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubInternational'", @"id='RoomListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusInternational'", @"id='RoomListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusInternational' hidden", @"id='RoomListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.ID.ToString().ToUpper() + "IconInternational' class='icon-arrow_dropdown'");

                        string typeList = AppGlobal.InitializationString;
                        foreach (TA.Data.Models.Type itemType in listTypeSub)
                        {
                            if (itemType.RoomAndUsage_ID == item.ID)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemType.ID.ToString().ToUpper() + "US' hidden", @"id='" + itemType.ID.ToString().ToUpper() + "US'");
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemType.ID.ToString().ToUpper() + "International' hidden", @"id='" + itemType.ID.ToString().ToUpper() + "International'");
                                typeList = typeList + itemType.URLCode + ";";
                            }
                        }
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";" + typeList);
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Type");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Type001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.RoomAndUsage, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Brand;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Brand);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isBrand == true)
                {
                    foreach (TA.Data.Models.Brand item in listBrand)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        List<TA.Data.Models.Collection> listCollectionSub = new List<Data.Models.Collection>();
                        int j = AppGlobal.InitializationNumber;
                        foreach (TA.Data.Models.Collection itemCollection in listCollection)
                        {
                            if (itemCollection.Brand_ID == item.ID)
                            {
                                listCollectionSub.Add(itemCollection);
                                tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='CollectionMenu" + j + "'>");
                                tagsHTML.AppendLine(@"<span style='color:#777777'>" + item.DisplayName + ": &nbsp;</span>");
                                tagsHTML.AppendLine(@"<span>" + itemCollection.DisplayName + "</span>");
                                tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onCollectionTagClose(" + j + ")'></i>");
                                tagsHTML.AppendLine(@"</span>");
                            }
                            j = j + 1;
                        }

                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Brand + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Brand + "_" + item.URLCode;

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubUS'", @"id='CollectionListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusUS'", @"id='CollectionListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusUS' hidden", @"id='CollectionListIconMinusUS'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubInternational'", @"id='CollectionListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusInternational'", @"id='CollectionListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusInternational' hidden", @"id='CollectionListIconMinusInternational'");

                        string collectionList = AppGlobal.InitializationString;
                        foreach (TA.Data.Models.Collection itemCollection in listCollectionSub)
                        {
                            if (itemCollection.Brand_ID == item.ID)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemCollection.ID.ToString().ToUpper() + "US' hidden", @"id='" + itemCollection.ID.ToString().ToUpper() + "US'");
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemCollection.ID.ToString().ToUpper() + "International' hidden", @"id='" + itemCollection.ID.ToString().ToUpper() + "International'");
                                collectionList = collectionList + itemCollection.URLCode + ";";
                            }
                        }
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";" + collectionList);
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Brand");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Brand001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Brand, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Style;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Style);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                string styleList = AppGlobal.InitializationString;
                if (isStyle == true)
                {
                    foreach (TA.Data.Models.Style item in listStyle)
                    {
                        styleList = styleList + item.URLCode + ";";
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='StyleMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Style: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onStyleTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Style + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Style + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='StyleListSubUS'", @"id='StyleListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconPlusUS'", @"id='StyleListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconMinusUS' hidden", @"id='StyleListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='StyleListSubInternational'", @"id='StyleListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconPlusInternational'", @"id='StyleListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconMinusInternational' hidden", @"id='StyleListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Style");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Style001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Style, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.LifeStyle;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.LifeStyle);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isLifeStyle == true)
                {
                    foreach (TA.Data.Models.LifeStyle item in listLifeStyle)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='LifeStyleMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Life style: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onLifeStyleTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.LifeStyle + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.LifeStyle + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='LifeStyleListSubUS'", @"id='LifeStyleListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconPlusUS'", @"id='LifeStyleListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconMinusUS' hidden", @"id='LifeStyleListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='LifeStyleListSubInternational'", @"id='LifeStyleListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconPlusInternational'", @"id='LifeStyleListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconMinusInternational' hidden", @"id='LifeStyleListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "LifeStyle");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.LifeStyle001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.LifeStyle, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Shape;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Shape);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                if (isShape == true)
                {
                    foreach (TA.Data.Models.Shape item in listShape)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='ShapeMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Shape: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onShapeTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Shape + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Shape + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='ShapeListSubUS'", @"id='ShapeListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconPlusUS'", @"id='ShapeListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconMinusUS' hidden", @"id='ShapeListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='ShapeListSubInternational'", @"id='ShapeListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconPlusInternational'", @"id='ShapeListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconMinusInternational' hidden", @"id='ShapeListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "' hidden", @"id='" + item.ID.ToString().ToUpper() + "'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Shape");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Shape001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Shape, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Designer;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Designer);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isDesigner == true)
                {
                    foreach (TA.Data.Models.Designer item in listDesigner)
                    {
                        if (!string.IsNullOrEmpty(item.ImageIcon))
                        {
                            item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                        }
                        if (!string.IsNullOrEmpty(item.ImageMain))
                        {
                            item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                        }
                        if (!string.IsNullOrEmpty(item.ImageBackground))
                        {
                            item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                        }

                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='DesignerMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Designer: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onDesignerTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Designer + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLDesigner;
                        if (string.IsNullOrEmpty(item.URLImageMain))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImageMain);
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='DesignerListSubUS'", @"id='DesignerListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconPlusUS'", @"id='DesignerListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconMinusUS' hidden", @"id='DesignerListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='DesignerListSubInternational'", @"id='DesignerListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconPlusInternational'", @"id='DesignerListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconMinusInternational' hidden", @"id='DesignerListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "' hidden", @"id='" + item.ID.ToString().ToUpper() + "'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Designer");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", tagsHTML.ToString());

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Designer001);

                        string uRLReadMore = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;
                        contentHTMLSub = contentHTMLSub.Replace(@"[DisplayName]", item.DisplayName);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLImageMain]", item.URLImageMain);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLImageBackground]", item.URLImageBackground);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Title001]", item.Title001);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Description]", item.Description);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLReadMore]", uRLReadMore);


                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Designer, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        pageTitle = item.Name + " " + AppGlobal.Infomation;
                        string pageTitleDesigner = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;
                        string pageURLDesigner = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Designer + "_" + item.URLCode + AppGlobal.Infomation;
                        contentHTMLSub = contentHTMLDesignerInfomation;
                        if (string.IsNullOrEmpty(item.URLImageMain))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImageMain);
                        }
                        StringBuilder title002 = new StringBuilder();
                        if (!string.IsNullOrEmpty(item.Title002))
                        {
                            title002.AppendLine(@"<div class='content_funiture_care'>" + item.Title002 + "</div>");
                        }
                        StringBuilder descriptionLong = new StringBuilder();
                        if (!string.IsNullOrEmpty(item.DescriptionLong))
                        {
                            descriptionLong.AppendLine(@"<div class='content_funiture_care'>" + item.DescriptionLong + "</div>");
                        }
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitleDesigner]", pageTitleDesigner);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURLDesigner]", pageURLDesigner);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLImageMain]", item.URLImageMain);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DisplayName]", item.DisplayName);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Title001]", item.Title001);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Title002]", title002.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[DescriptionLong]", descriptionLong.ToString());

                        fileName = item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Designer, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                if (isSpecial == true)
                {
                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Special;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Special);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }

                    string title = AppGlobal.InStock001;
                    string pageURLSub = AppGlobal.InStock;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);

                    contentHTMLSub = contentHTMLInStocked;
                    contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = AppGlobal.CasualLiving001;
                    pageURLSub = AppGlobal.CasualLiving;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                    contentHTMLSub = contentHTMLCasualLiving;
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";" + styleList);
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = AppGlobal.NewProducts001;
                    pageURLSub = AppGlobal.NewProducts;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);

                    contentHTMLSub = contentHTMLNewProducts;
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = AppGlobal.CustomPalette001;
                    pageURLSub = AppGlobal.CustomPalette;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);

                    contentHTMLSub = contentHTMLCustomPalette;
                    contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = "Search";
                    pageURLSub = "search";
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                    contentHTMLSub = contentHTML;
                    contentHTMLSub = contentHTMLSub.Replace(@"onInitializationProductListData", @"getByQueryString001");
                    contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }
                }


                if (isProduct == true)
                {
                    physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Product);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    List<ItemDataTransfer> listItemDataTransfer = _itemRepository.GetItemDataTransferByActiveToList();

                    foreach (ItemDataTransfer itemDataTransfer in listItemDataTransfer)
                    {
                        pageKeywords = itemDataTransfer.METAKeyword;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Product + "/" + itemDataTransfer.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Product + "_" + itemDataTransfer.URLCode;
                        string contentHTMLProductSub = contentHTMLProduct;
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageTitle]", itemDataTransfer.ProductName + " (" + itemDataTransfer.SKU + ")");
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageDescription]", itemDataTransfer.Description);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[AdditionalFeatures]", itemDataTransfer.AdditionalFeatures);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[Story]", itemDataTransfer.Story);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[VariationDescription]", itemDataTransfer.VariationDescription);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[ProductImage]", itemDataTransfer.ImageSirv);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[URLCode]", itemDataTransfer.URLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[RoomAndUsageURLCode]", itemDataTransfer.RoomAndUsageURLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[RoomAndUsageName]", itemDataTransfer.RoomAndUsageName);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[TypeURLCode]", itemDataTransfer.TypeURLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[TypeName]", itemDataTransfer.TypeName);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandURLCode]", itemDataTransfer.BrandURLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandName]", itemDataTransfer.BrandName);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandURLCode]", itemDataTransfer.BrandURLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandName]", itemDataTransfer.BrandName);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[CollectionURLCode]", itemDataTransfer.CollectionURLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[CollectionName]", itemDataTransfer.CollectionName);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[LifeStyleURLCode]", itemDataTransfer.LifeStyleURLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[LifeStyleName]", itemDataTransfer.LifeStyleName);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[StyleURLCode]", itemDataTransfer.StyleURLCode);
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[StyleName]", itemDataTransfer.StyleName);
                        StringBuilder relatedProducts = new StringBuilder();
                        List<Item> listRelatedProducts = _itemRepository.GetByTypeIDAndIDAndRowCountToList(itemDataTransfer.Type_ID.ToString(), itemDataTransfer.ID.ToString(), 4);

                        i = AppGlobal.InitializationNumber;
                        foreach (Item item in listRelatedProducts)
                        {
                            if (i % 4 == 0)
                            {
                                relatedProducts.AppendLine(@"<div class='product_suggestion_slider row'>");
                            }
                            relatedProducts.AppendLine(@"<div class='col-sm-12 col-md-6 col-xl-3'>");
                            relatedProducts.AppendLine(@"<div class='product_suggestion_slider_item'>");
                            relatedProducts.AppendLine(@"<a title='" + item.ProductName + "' href='" + AppGlobal.DomainURLTEST + "product/" + item.URLCode + ".html' class='product_suggestion_slider_item-a w-100 h-100'>");
                            relatedProducts.AppendLine(@"<img title='" + item.ProductName + "' alt='" + item.ProductName + "' src='" + item.ImageSirv + "?scale.option=fill&scale.width=415&scale.height=415' class='product_suggestion_slider_item-img Sirv w-100 h-100'>");
                            relatedProducts.AppendLine(@"</a>");
                            relatedProducts.AppendLine(@"<div class='product_suggestion_slider_item-name'>");
                            relatedProducts.AppendLine(@"<a title='" + item.ProductName + "' href='" + AppGlobal.DomainURLTEST + "product/" + item.URLCode + ".html' class='product_suggestion_slider_item-name-a'>" + item.ProductName + "</a>");
                            relatedProducts.AppendLine(@"</div>");
                            relatedProducts.AppendLine(@"<div class='product_suggestion_slider_item-sku'>");
                            relatedProducts.AppendLine(@"<a title='" + item.ProductName + "' href='" + AppGlobal.DomainURLTEST + "product/" + item.URLCode + ".html' class='product_suggestion_slider_item-name-a'>" + item.SKU + "</a>");
                            relatedProducts.AppendLine(@"</div>");
                            relatedProducts.AppendLine(@"</div>");
                            relatedProducts.AppendLine(@"</div>");
                            if (i % 4 == 3)
                            {
                                relatedProducts.AppendLine(@"</div>");
                            }
                            i = i + 1;
                        }
                        contentHTMLProductSub = contentHTMLProductSub.Replace(@"[RelatedProducts]", relatedProducts.ToString());
                        fileName = itemDataTransfer.URLCode + AppGlobal.HTMLExtension;
                        physicalPathCreate = Path.Combine(AppGlobal.APITESTWebRootPath, AppGlobal.Product, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLProductSub);
                            }
                        }
                    }
                }

            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationHTMLCategoryPageInPRELIVE(bool isRoom = true, bool isType = true, bool isBrand = true, bool isCollection = true, bool isLifeStyle = true, bool isStyle = true, bool isShape = true, bool isDesigner = true, bool isSpecial = true)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                string contentHTMLAbout = AppGlobal.InitializationString;
                string contentHTMLContact = AppGlobal.InitializationString;
                string contentHTMLNewProducts = AppGlobal.InitializationString;
                string contentHTMLCasualLiving = AppGlobal.InitializationString;
                string contentHTMLCustomPalette = AppGlobal.InitializationString;
                string contentHTMLInStocked = AppGlobal.InitializationString;
                string contentHTMLDesigner = AppGlobal.InitializationString;
                string contentHTMLDesignerInfomation = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplate);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateNewProducts);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLNewProducts = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateCasualLiving);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLCasualLiving = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateCustomPalette);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLCustomPalette = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateInStocked);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLInStocked = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateDesigner);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLDesigner = r.ReadToEnd();
                    }
                }
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateDesignerInfomation);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLDesignerInfomation = r.ReadToEnd();
                    }
                }

                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.AboutTemplate);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLAbout = r.ReadToEnd();
                    }
                }

                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ContactTemplate);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTMLContact = r.ReadToEnd();
                    }
                }

                contentHTML = contentHTML.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTML = contentHTML.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTML = contentHTML.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTML = contentHTML.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTML = contentHTML.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTML = contentHTML.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTML = contentHTML.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTML = contentHTML.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTML = contentHTML.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                string pageURL001 = AppGlobal.DomainURLPRELIVE + AppGlobal.AboutHTML;
                contentHTMLAbout = contentHTMLAbout.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageTitle]", AppGlobal.About001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageDescription]", AppGlobal.About001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywords]", AppGlobal.About001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[URLCheck]", AppGlobal.About001.ToLower());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageURL]", pageURL001);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                pageURL001 = AppGlobal.DomainURLPRELIVE + AppGlobal.ContactHTML;
                contentHTMLContact = contentHTMLContact.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageTitle]", AppGlobal.Contact001);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageDescription]", AppGlobal.Contact001);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywords]", AppGlobal.Contact001);
                contentHTMLContact = contentHTMLContact.Replace(@"[URLCheck]", AppGlobal.Contact001.ToLower());
                contentHTMLContact = contentHTMLContact.Replace(@"[PageURL]", pageURL001);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                List<Collection> listCollection = _collectionRepository.GetByIsActiveToList(true);
                List<Collection> listCollectionTheodoreAlexanderBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TheodoreAlexanderBrandID, true);
                List<Collection> listCollectionSaloneBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.SaloneBrandID, true);
                List<Collection> listCollectionTAStudioBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TAStudioBrandID, true);
                List<Collection> listCollectionUS = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Collection> listCollectionInternational = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Style> listStyle = _styleRepository.GetByIsActiveToList(true);
                List<Style> listStyleUS = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Style> listStyleInternational = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                List<RoomAndUsage> listRoomAndUsageUS = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<RoomAndUsage> listRoomAndUsageInternational = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Shape> listShape = _shapeRepository.GetByIsActiveToList(true);
                List<Shape> listShapeUS = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Shape> listShapeInternational = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                List<LifeStyle> listLifeStyleUS = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<LifeStyle> listLifeStyleInternational = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<TA.Data.Models.Type> listType = _typeRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Type> listTypeUS = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<TA.Data.Models.Type> listTypeInternational = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Brand> listBrand = _brandRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Designer> listDesigner = _designerRepository.GetByIsActiveToList(true);

                List<ItemDataTransfer> listItemDataTransferExtendingUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);
                List<ItemDataTransfer> listItemDataTransferExtendingInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);

                StringBuilder menuTopBrandTheodoreAlexander = new StringBuilder();
                StringBuilder menuTopBrandSalone = new StringBuilder();
                StringBuilder menuTopBrandTAStudio = new StringBuilder();
                StringBuilder menuTopProduct = new StringBuilder();
                StringBuilder menuTopDesigner = new StringBuilder();
                StringBuilder menuLeftUS = new StringBuilder();
                StringBuilder menuLeftInternational = new StringBuilder();
                StringBuilder menuBrandMobileTheodoreAlexander = new StringBuilder();
                StringBuilder menuBrandMobileSalone = new StringBuilder();
                StringBuilder menuBrandMobileTAStudio = new StringBuilder();
                StringBuilder menuProductMobile = new StringBuilder();
                StringBuilder menuDesignerMobile = new StringBuilder();
                StringBuilder productListProductsUSHTML = new StringBuilder();
                StringBuilder productListProductsInternationalHTML = new StringBuilder();

                int i = 1;
                foreach (Collection item in listCollectionTheodoreAlexanderBrandID)
                {
                    string liHTML = @"<li> <a href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileTheodoreAlexander.AppendLine(liHTML);
                    if ((i == 1) || (i % 9 == 1))
                    {
                        menuTopBrandTheodoreAlexander.AppendLine("<ul>");
                    }
                    menuTopBrandTheodoreAlexander.AppendLine(liHTML);
                    if (i > 1)
                    {
                        if ((i == listCollectionTheodoreAlexanderBrandID.Count) || (i % 9 == 0))
                        {
                            menuTopBrandTheodoreAlexander.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }

                StringBuilder menuTopBrandTAStudioInternational = new StringBuilder();
                StringBuilder menuTopBrandTAStudioUS = new StringBuilder();
                menuTopBrandTAStudioInternational.AppendLine(@"<div id='MenuTopBrandTAStudioInternational' style='display: flex;'>");
                menuTopBrandTAStudioUS.AppendLine(@"<div id='MenuTopBrandTAStudioUS' style='display: flex;'>");
                i = 1;
                foreach (Collection item in listCollectionTAStudioBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    if (item.ID.ToString().ToUpper() == "461DA43B-0409-4EBD-8EF2-0FB911718678")
                    {
                        liMobileHTML = @"<li id='TAStudioFrenzy" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    if (item.ID.ToString().ToUpper() == "85CFC3ED-8876-436E-8159-B1E1025644C8")
                    {
                        liMobileHTML = @"<li id='TAStudioHolli" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    menuBrandMobileTAStudio.AppendLine(liMobileHTML);
                    if ((i == 1) || (i % 5 == 1))
                    {
                        menuTopBrandTAStudioInternational.AppendLine("<ul style='min-width: 150px;'>");
                        menuTopBrandTAStudioUS.AppendLine("<ul style='min-width: 150px;'>");
                    }
                    menuTopBrandTAStudioInternational.AppendLine(liHTML);
                    if ((item.ID.ToString().ToUpper() != "461DA43B-0409-4EBD-8EF2-0FB911718678") && (item.ID.ToString().ToUpper() != "85CFC3ED-8876-436E-8159-B1E1025644C8"))
                    {
                        menuTopBrandTAStudioUS.AppendLine(liHTML);
                    }
                    if (i > 1)
                    {
                        if ((i == listCollectionTAStudioBrandID.Count) || (i % 5 == 0))
                        {
                            menuTopBrandTAStudioInternational.AppendLine("</ul>");
                            menuTopBrandTAStudioUS.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }
                menuTopBrandTAStudioInternational.AppendLine(@"</div>");
                menuTopBrandTAStudioUS.AppendLine(@"</div>");
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioInternational.ToString());
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioUS.ToString());

                foreach (Collection item in listCollectionSaloneBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileSalone.AppendLine(liMobileHTML);
                    menuTopBrandSalone.AppendLine(liHTML);
                }


                foreach (RoomAndUsage item in listRoomAndUsage)
                {
                    string liMobileHTML = @"<li class='item_left_branch'><a class='item_left_branch' href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuTopProduct.AppendLine(@"<ul>");
                    menuTopProduct.AppendLine(@"<li>");
                    menuTopProduct.AppendLine(@"<h1><a title='" + item.DisplayName.ToUpper() + "' href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension + "'>" + item.DisplayName.ToUpper() + "</a></h1>"); ;
                    menuTopProduct.AppendLine(@"</li>");

                    menuProductMobile.AppendLine(@"<li class='sub-item-mobile'>");
                    menuProductMobile.AppendLine(@"<a onclick='on" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Open + "()' title='" + item.DisplayName.ToUpper() + "'><i id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Icon + "' class='icon-plus'></i>" + item.DisplayName.ToUpper() + "</a>");
                    menuProductMobile.AppendLine(@"<ul id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + "Mobile' hidden>");


                    foreach (TA.Data.Models.Type itemType in listType)
                    {
                        string liHTML = @"<li><a title='" + itemType.DisplayName + "' href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Type + @"/" + itemType.URLCode + AppGlobal.HTMLExtension + "'>" + itemType.DisplayName + "</a></li>";
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuTopProduct.AppendLine(liHTML);
                            menuProductMobile.AppendLine(liHTML);
                        }
                    }

                    menuTopProduct.AppendLine(@"</ul>");

                    menuProductMobile.AppendLine(@"</ul>");
                    menuProductMobile.AppendLine(@"<li>");
                }

                foreach (Designer item in listDesigner)
                {
                    if (!string.IsNullOrEmpty(item.ImageIcon))
                    {
                        item.URLImageIcon = AppGlobal.DomainURLPRELIVE + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                    }
                    if (!string.IsNullOrEmpty(item.ImageMain))
                    {
                        item.URLImageMain = AppGlobal.DomainURLPRELIVE + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                    }
                    if (!string.IsNullOrEmpty(item.ImageBackground))
                    {
                        item.URLImageBackground = AppGlobal.DomainURLPRELIVE + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                    }
                    StringBuilder liHTML = new StringBuilder();
                    liHTML.AppendLine(@"<ul>");
                    liHTML.AppendLine(@"<li class='icon_designer_optimize'>");
                    liHTML.AppendLine(@"<div class='image'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>");
                    liHTML.AppendLine(@"<img src='" + item.URLImageIcon + "' title='" + item.DisplayName + "' alt='" + item.DisplayName + "' />");
                    liHTML.AppendLine(@"</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"<div class='title_menu_designer'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"</li>");
                    liHTML.AppendLine(@"</ul>");
                    string liMobileHTML = @"<li> <a href='" + AppGlobal.DomainURLPRELIVE + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuDesignerMobile.AppendLine(liMobileHTML);
                    menuTopDesigner.AppendLine(liHTML.ToString());
                }

                menuLeftUS.AppendLine(@"<ul id='" + AppGlobal.MenuLeft + AppGlobal.US + "' " + AppGlobal.Hidden + ">");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.US + "'>");
                menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()'>ROOMS (<span id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul " + AppGlobal.Hidden + " id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "' style='padding-left: 10px;'>");
                int roomCountUS = AppGlobal.InitializationNumber;
                foreach (RoomAndUsage item in listRoomAndUsageUS)
                {
                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header' id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"'>");
                    menuLeftUS.AppendLine(@"<div style='cursor: pointer; display: flex; border-bottom: 1px dashed #d4d4d4; padding-bottom: 10px;' onclick=""on" + AppGlobal.RoomAndUsage001 + AppGlobal.Sub + AppGlobal.Change + "('" + item.ID.ToString().ToUpper() + @"')""><i id='" + item.ID.ToString().ToUpper() + AppGlobal.Icon + AppGlobal.US + "' class='ngb_accordion_header_expand-collapse-indicatior-arrow'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</div>");
                    menuLeftUS.AppendLine(@"<ul id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='margin-top: 10px; margin-left: 15px;'>");
                    foreach (TA.Data.Models.Type itemType in listTypeUS)
                    {
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuLeftUS.AppendLine(@"<li id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.Type001 + AppGlobal.Select + "('" + itemType.ID.ToString().ToUpper() + "', '" + itemType.URLCode + @"', 1)"">");
                            menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + itemType.DisplayName + "'><i class='icon-circle'></i> " + itemType.DisplayName + " (<span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + itemType.ItemCount + "</span><span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                            menuLeftUS.AppendLine(@"</li>");
                        }
                    }
                    menuLeftUS.AppendLine(@"</ul>");
                    menuLeftUS.AppendLine(@"</li>");
                    roomCountUS = roomCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.Collection + AppGlobal.US + "'>");
                menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()'>COLLECTIONS (<span id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' " + AppGlobal.Hidden + " class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' " + AppGlobal.Hidden + " id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "'>");
                int collectionCountUS = AppGlobal.InitializationNumber;
                foreach (Collection item in listCollectionUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.Collection001 + AppGlobal.Select + "('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    collectionCountUS = collectionCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.LifeStyle001 + AppGlobal.US + "'>");
                menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()'>LIFESTYLES (<span id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' " + AppGlobal.Hidden + " class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' " + AppGlobal.Hidden + " id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "'>");
                int lifeStyleCountUS = AppGlobal.InitializationNumber;
                foreach (LifeStyle item in listLifeStyleUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.LifeStyle001 + AppGlobal.Select + "('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    lifeStyleCountUS = lifeStyleCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftStyleUS'>");
                menuLeftUS.AppendLine(@"<span onclick='onStyleChangeUS()'>STYLES (<span id='StyleCountUS' hidden>[StyleCountUS]</span><span id='StyleCountUSFilter'>[StyleCountUSFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onStyleChangeUS()' id='StyleListIconPlusUS' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onStyleChangeUS()' id='StyleListIconMinusUS' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' hidden id='StyleListSubUS'>");
                int styleCountUS = AppGlobal.InitializationNumber;
                foreach (Style item in listStyleUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiUS' onclick=""onStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountUS' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountUSFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountUSFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "US' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    styleCountUS = styleCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftShapeUS'>");
                menuLeftUS.AppendLine(@"<span onclick='onShapeChangeUS()'>SHAPES (<span id='ShapeCountUS' hidden>[ShapeCountUS]</span><span id='ShapeCountUSFilter'>[ShapeCountUSFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onShapeChangeUS()' id='ShapeListIconPlusUS' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onShapeChangeUS()' id='ShapeListIconMinusUS' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' hidden id='ShapeListSubUS'>");
                int shapeCountUS = AppGlobal.InitializationNumber;
                foreach (Shape item in listShapeUS)
                {
                    menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiUS' onclick=""onShapeSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountUS' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountUSFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountUSFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "US' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");
                    shapeCountUS = shapeCountUS + item.ItemCount.Value;
                }
                menuLeftUS.AppendLine(@"</ul>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftExtendingUS' onclick='onEXTENDINGChangeUS()'>");
                menuLeftUS.AppendLine(@"<a title='EXTENDING'>EXTENDING (<span id='ExtendingCountUS' hidden>" + listItemDataTransferExtendingUS.Count + "</span><span id='ExtendingCountUSFilter'>[ExtendingCountUSFilter]</span>) <span id='EXTENDINGUS' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                menuLeftUS.AppendLine(@"</li>");

                menuLeftUS.AppendLine(@"</ul>");


                menuLeftInternational.AppendLine(@"<ul id='" + AppGlobal.MenuLeft + AppGlobal.International + "'>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.International + "'>");
                menuLeftInternational.AppendLine(@"<span onclick='onRoomChangeInternational()'>ROOMS (<span id='RoomCountInternational' hidden>[RoomCountInternational]</span><span id='RoomCountInternationalFilter'>[RoomCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onRoomChangeInternational()' id='RoomListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onRoomChangeInternational()' id='RoomListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul hidden id='RoomListSubInternational' style='padding-left: 10px;'>");
                int roomCountInternational = AppGlobal.InitializationNumber;
                foreach (RoomAndUsage item in listRoomAndUsageInternational)
                {
                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header' id='" + item.ID.ToString().ToUpper() + @"LiInternational'>");
                    menuLeftInternational.AppendLine(@"<div style='cursor: pointer; display: flex; border-bottom: 1px dashed #d4d4d4; padding-bottom: 10px;' onclick=""onRoomSubChange('" + item.ID.ToString().ToUpper() + @"')""><i id='" + item.ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>)</div>");
                    menuLeftInternational.AppendLine(@"<ul id='" + item.ID.ToString().ToUpper() + "International' hidden style='margin-top: 10px; margin-left: 15px;'>");
                    foreach (TA.Data.Models.Type itemType in listTypeInternational)
                    {
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuLeftInternational.AppendLine(@"<li id='" + itemType.ID.ToString().ToUpper() + @"LiInternational' onclick=""onTypeSelect('" + itemType.ID.ToString().ToUpper() + "', '" + itemType.URLCode + @"', 1)"">");
                            menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + itemType.DisplayName + "'><i class='icon-circle'></i> " + itemType.DisplayName + " (<span id='" + itemType.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + itemType.ItemCount + "</span><span id='" + itemType.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + itemType.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + itemType.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                            menuLeftInternational.AppendLine(@"</li>");
                        }
                    }
                    menuLeftInternational.AppendLine(@"</ul>");
                    menuLeftInternational.AppendLine(@"</li>");
                    roomCountInternational = roomCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftCollectionInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onCollectionChangeInternational()'>COLLECTIONS (<span id='CollectionCountInternational' hidden>[CollectionCountInternational]</span><span id='CollectionCountInternationalFilter'>[CollectionCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onCollectionChangeInternational()' id='CollectionListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onCollectionChangeInternational()' id='CollectionListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='CollectionListSubInternational'>");
                int collectionCountInternational = AppGlobal.InitializationNumber;
                foreach (Collection item in listCollectionInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onCollectionSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    collectionCountInternational = collectionCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftLifeStyleInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onLifeStyleChangeInternational()'>LIFESTYLES (<span id='LifeStyleCountInternational' hidden>[LifeStyleCountInternational]</span><span id='LifeStyleCountInternationalFilter'>[LifeStyleCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onLifeStyleChangeInternational()' id='LifeStyleListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onLifeStyleChangeInternational()' id='LifeStyleListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='LifeStyleListSubInternational'>");
                int lifeStyleCountInternational = AppGlobal.InitializationNumber;
                foreach (LifeStyle item in listLifeStyleInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onLifeStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    lifeStyleCountInternational = lifeStyleCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftStyleInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onStyleChangeInternational()'>STYLES (<span id='StyleCountInternational' hidden>[StyleCountInternational]</span><span id='StyleCountInternationalFilter'>[StyleCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onStyleChangeInternational()' id='StyleListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onStyleChangeInternational()' id='StyleListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='StyleListSubInternational'>");
                int styleCountInternational = AppGlobal.InitializationNumber;
                foreach (Style item in listStyleInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    styleCountInternational = styleCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftShapeInternational'>");
                menuLeftInternational.AppendLine(@"<span onclick='onShapeChangeInternational()'>SHAPES (<span id='ShapeCountInternational' hidden>[ShapeCountInternational]</span><span id='ShapeCountInternationalFilter'>[ShapeCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onShapeChangeInternational()' id='ShapeListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onShapeChangeInternational()' id='ShapeListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='ShapeListSubInternational'>");
                int shapeCountInternational = AppGlobal.InitializationNumber;
                foreach (Shape item in listShapeInternational)
                {
                    menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onShapeSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                    menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");
                    shapeCountInternational = shapeCountInternational + item.ItemCount.Value;
                }
                menuLeftInternational.AppendLine(@"</ul>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftExtendingInternational' onclick='onEXTENDINGChangeInternational()'>");
                menuLeftInternational.AppendLine(@"<a title='EXTENDING'>EXTENDING (<span id='ExtendingCountInternational' hidden>" + listItemDataTransferExtendingInternational.Count + "</span><span id='ExtendingCountInternationalFilter'>[ExtendingCountInternationalFilter]</span>)<span id='EXTENDINGInternational' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                menuLeftInternational.AppendLine(@"</li>");

                menuLeftInternational.AppendLine(@"</ul>");

                contentHTML = contentHTML.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTML = contentHTML.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTML = contentHTML.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTML = contentHTML.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTML = contentHTML.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTML = contentHTML.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTML = contentHTML.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLInStocked = contentHTMLInStocked.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLDesigner = contentHTMLDesigner.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLAbout = contentHTMLAbout.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTMLContact = contentHTMLContact.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                string contentIndex = AppGlobal.InitializationString;
                physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.IndexHTML);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentIndex = r.ReadToEnd();
                    }
                }

                StringBuilder blogContent = new StringBuilder();
                WebClient webClient = new WebClient();
                System.Json.JsonValue listJsonValue = JsonValue.Parse(webClient.DownloadString(AppGlobal.BlogAPIURL));
                var listBlogJSON = listJsonValue["posts"];
                int count = listBlogJSON.Count;
                if (count > 3)
                {
                    count = 3;
                }
                for (int j = 0; j < count; j++)
                {
                    string blogAuthor = "By Theodore Alexander";
                    string blogSlug = listBlogJSON[j]["slug"];
                    string blogTitle = listBlogJSON[j]["title"];
                    string blogDescription = listBlogJSON[j]["meta_description"];
                    string blogImage = listBlogJSON[j]["feature_image"];
                    string blogPublished = listBlogJSON[j]["published_at"];
                    DateTime blogDatePublished = AppGlobal.InitializationDateTime;
                    if (!string.IsNullOrEmpty(blogPublished))
                    {
                        try
                        {
                            string year = blogPublished.Split('-')[0];
                            string month = blogPublished.Split('-')[1];
                            string day = blogPublished.Split('-')[2];
                            day = day.Split('T')[0];
                            blogDatePublished = new DateTime(int.Parse(year), int.Parse(month), int.Parse(day));
                        }
                        catch (Exception e)
                        {
                            string blogMes = e.Message;
                        }
                    }
                    CultureInfo ci = new CultureInfo("en-US");
                    var monthName = DateTime.Now.ToString("MMMM", ci);
                    blogSlug = AppGlobal.DomainURLPRELIVE + AppGlobal.Blog + "/" + blogSlug;
                    blogContent.AppendLine(@"<div class='swiper-slide slider_item d-flex' style='display: flex; justify-content: center;'>");
                    blogContent.AppendLine(@"<div class='img-fullsize-top-home-blog'>");
                    blogContent.AppendLine(@"<a title=""" + blogTitle + @""" style='color: #000 !important;' href='" + blogSlug + "'>");
                    blogContent.AppendLine(@"<img title=""" + blogTitle + @""" alt=""" + blogTitle + @""" class='pic-blog-top' style='object-fit: cover; object-position: center;' src='" + blogImage + "' width='100%' height='100%'>");
                    blogContent.AppendLine(@"</a>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"<div class='post-title content-main-post-top'>");
                    blogContent.AppendLine(@"<a title=""" + blogTitle + @""" style='color: #000 !important;' href='" + blogSlug + "'>");
                    blogContent.AppendLine(@"<h1 class='title-detail-post'>" + blogTitle + "</h1>");
                    blogContent.AppendLine(@"<div class='short-description-top'>" + blogDescription + "</div>");
                    blogContent.AppendLine(@"</a>");
                    blogContent.AppendLine(@"<div class='info-post'>");
                    blogContent.AppendLine(@"<span class='by-post'><i class='icon-user'></i><img style='width: 20px; height: 20px; border-radius: 10px;' alt='" + blogAuthor + "' title='" + blogAuthor + "' src='https://tablog.ghost.io/content/images/2021/01/_--1-.png' /><span style='margin-left: 5px;'>" + blogAuthor + "</span></span>");
                    blogContent.AppendLine(@"<span class='date-post-detail'><i class='icon-timer'></i>" + monthName + " " + blogDatePublished.Day + ", " + blogDatePublished.Year + "</span>");
                    blogContent.AppendLine(@"<div class='share-detail'>");
                    blogContent.AppendLine(@"<span>Share:</span>");
                    blogContent.AppendLine(@"<a target='_blank' href='https://www.facebook.com/sharer/sharer.php?u=" + blogSlug + "' title='facebook'><i class='icon-facebook'></i></a>");
                    blogContent.AppendLine(@"<a target='_blank' href='https://twitter.com/intent/tweet?text=" + blogTitle + "&url=" + blogSlug + "' title='twitter'><i class='icon-twitter'></i></a>");
                    blogContent.AppendLine(@"<a target='_blank' href='https://www.pinterest.com/pin-builder/?url=" + blogSlug + "&media=" + blogImage + "&description=" + blogDescription + "&method=button' title='pinterest'><i class='icon-pinterest2'></i></a>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"</div>");
                    blogContent.AppendLine(@"</div>");
                }

                contentIndex = contentIndex.Replace(@"[DomainName]", AppGlobal.DomainURLPRELIVE);
                contentIndex = contentIndex.Replace(@"[URLCheck]", AppGlobal.Index);
                contentIndex = contentIndex.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentIndex = contentIndex.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentIndex = contentIndex.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentIndex = contentIndex.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentIndex = contentIndex.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentIndex = contentIndex.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentIndex = contentIndex.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentIndex = contentIndex.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);
                contentIndex = contentIndex.Replace(@"[BlogContent]", blogContent.ToString());
                contentIndex = contentIndex.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentIndex = contentIndex.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentIndex = contentIndex.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentIndex = contentIndex.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentIndex = contentIndex.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentIndex = contentIndex.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);

                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Index;
                string physicalPathCreateIndex = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreateIndex))
                {
                    Directory.CreateDirectory(physicalPathCreateIndex);
                }

                physicalPathCreateIndex = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Index);
                if (!Directory.Exists(physicalPathCreateIndex))
                {
                    Directory.CreateDirectory(physicalPathCreateIndex);
                }
                //physicalPathCreateIndex = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.IndexHTML);
                //using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                //{
                //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                //    {
                //        w.WriteLine(contentIndex);
                //    }
                //}

                //subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Index;
                //physicalPathCreateIndex = Path.Combine(AppGlobal.APIPREWebRootPath, subPath);
                //if (!Directory.Exists(physicalPathCreateIndex))
                //{
                //    Directory.CreateDirectory(physicalPathCreateIndex);
                //}

                physicalPathCreateIndex = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Index, AppGlobal.IndexHTML);
                using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentIndex);
                    }
                }

                physicalPathCreateIndex = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.InitializationString, AppGlobal.AboutHTML);
                using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentHTMLAbout);
                    }
                }

                physicalPathCreateIndex = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.InitializationString, AppGlobal.ContactHTML);
                using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                {
                    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    {
                        w.WriteLine(contentHTMLContact);
                    }
                }


                List<ItemDataTransfer> listUS = new List<ItemDataTransfer>();
                List<ItemDataTransfer> listInternational = new List<ItemDataTransfer>();
                List<ItemMenuLeftDataTransfer> listUSMenuLeft = new List<ItemMenuLeftDataTransfer>();
                List<ItemMenuLeftDataTransfer> listInternationalMenuLeft = new List<ItemMenuLeftDataTransfer>();
                i = AppGlobal.InitializationNumber;
                string fileName = AppGlobal.InitializationString;
                string physicalPathCreate = AppGlobal.InitializationString;
                string pageTitle = AppGlobal.InitializationString;
                string pageDescription = AppGlobal.InitializationString;
                string pageKeywords = AppGlobal.InitializationString;
                string pageURL = AppGlobal.InitializationString;
                string uRLCheck = AppGlobal.InitializationString;
                string contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Collection;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Collection);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isCollection == true)
                {
                    foreach (Collection item in listCollection)
                    {

                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='CollectionMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Collection: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onCollectionTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Collection + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Collection + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubUS'", @"id='CollectionListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusUS'", @"id='CollectionListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusUS' hidden", @"id='CollectionListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");
                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubInternational'", @"id='CollectionListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusInternational'", @"id='CollectionListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusInternational' hidden", @"id='CollectionListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Collection");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Collection001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Collection, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }


                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Type;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Type);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isType == true)
                {
                    foreach (TA.Data.Models.Type item in listType)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='TypeMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Room: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onTypeTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Type + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Type + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }
                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubUS'", @"id='RoomListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusUS'", @"id='RoomListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusUS' hidden", @"id='RoomListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "US' hidden", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "US'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconUS' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconUS' class='icon-arrow_dropdown'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubInternational'", @"id='RoomListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusInternational'", @"id='RoomListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusInternational' hidden", @"id='RoomListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "International' hidden", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "International'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconInternational' class='icon-arrow_dropdown'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Type");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Type001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Type, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.RoomAndUsage;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.RoomAndUsage);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isRoom == true)
                {
                    foreach (TA.Data.Models.RoomAndUsage item in listRoomAndUsage)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        int j = AppGlobal.InitializationNumber;
                        List<TA.Data.Models.Type> listTypeSub = new List<Data.Models.Type>();
                        foreach (TA.Data.Models.Type itemType in listType)
                        {
                            if (itemType.RoomAndUsage_ID == item.ID)
                            {
                                listTypeSub.Add(itemType);
                                tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='TypeMenu" + j + "'>");
                                tagsHTML.AppendLine(@"<span style='color:#777777'>" + item.DisplayName + ": &nbsp;</span>");
                                tagsHTML.AppendLine(@"<span>" + itemType.DisplayName + "</span>");
                                tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onTypeTagClose(" + j + ")'></i>");
                                tagsHTML.AppendLine(@"</span>");
                            }
                            j = j + 1;
                        }

                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.RoomAndUsage + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.RoomAndUsage + "_" + item.URLCode;

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubUS'", @"id='RoomListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusUS'", @"id='RoomListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusUS' hidden", @"id='RoomListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "IconUS' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.ID.ToString().ToUpper() + "IconUS' class='icon-arrow_dropdown'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubInternational'", @"id='RoomListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusInternational'", @"id='RoomListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusInternational' hidden", @"id='RoomListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.ID.ToString().ToUpper() + "IconInternational' class='icon-arrow_dropdown'");

                        string typeList = AppGlobal.InitializationString;
                        foreach (TA.Data.Models.Type itemType in listTypeSub)
                        {
                            if (itemType.RoomAndUsage_ID == item.ID)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemType.ID.ToString().ToUpper() + "US' hidden", @"id='" + itemType.ID.ToString().ToUpper() + "US'");
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemType.ID.ToString().ToUpper() + "International' hidden", @"id='" + itemType.ID.ToString().ToUpper() + "International'");
                                typeList = typeList + itemType.URLCode + ";";
                            }
                        }
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";" + typeList);
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Type");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Type001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.RoomAndUsage, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Brand;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Brand);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isBrand == true)
                {
                    foreach (TA.Data.Models.Brand item in listBrand)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        List<TA.Data.Models.Collection> listCollectionSub = new List<Data.Models.Collection>();
                        int j = AppGlobal.InitializationNumber;
                        foreach (TA.Data.Models.Collection itemCollection in listCollection)
                        {
                            if (itemCollection.Brand_ID == item.ID)
                            {
                                listCollectionSub.Add(itemCollection);
                                tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='CollectionMenu" + j + "'>");
                                tagsHTML.AppendLine(@"<span style='color:#777777'>" + item.DisplayName + ": &nbsp;</span>");
                                tagsHTML.AppendLine(@"<span>" + itemCollection.DisplayName + "</span>");
                                tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onCollectionTagClose(" + j + ")'></i>");
                                tagsHTML.AppendLine(@"</span>");
                            }
                            j = j + 1;
                        }

                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Brand + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Brand + "_" + item.URLCode;

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubUS'", @"id='CollectionListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusUS'", @"id='CollectionListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusUS' hidden", @"id='CollectionListIconMinusUS'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubInternational'", @"id='CollectionListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusInternational'", @"id='CollectionListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusInternational' hidden", @"id='CollectionListIconMinusInternational'");

                        string collectionList = AppGlobal.InitializationString;
                        foreach (TA.Data.Models.Collection itemCollection in listCollectionSub)
                        {
                            if (itemCollection.Brand_ID == item.ID)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemCollection.ID.ToString().ToUpper() + "US' hidden", @"id='" + itemCollection.ID.ToString().ToUpper() + "US'");
                                contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemCollection.ID.ToString().ToUpper() + "International' hidden", @"id='" + itemCollection.ID.ToString().ToUpper() + "International'");
                                collectionList = collectionList + itemCollection.URLCode + ";";
                            }
                        }
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";" + collectionList);
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Brand");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Brand001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Brand, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Style;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Style);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                string styleList = AppGlobal.InitializationString;
                if (isStyle == true)
                {
                    foreach (TA.Data.Models.Style item in listStyle)
                    {
                        styleList = styleList + item.URLCode + ";";
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='StyleMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Style: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onStyleTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Style + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Style + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='StyleListSubUS'", @"id='StyleListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconPlusUS'", @"id='StyleListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconMinusUS' hidden", @"id='StyleListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='StyleListSubInternational'", @"id='StyleListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconPlusInternational'", @"id='StyleListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconMinusInternational' hidden", @"id='StyleListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Style");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Style001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Style, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.LifeStyle;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.LifeStyle);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isLifeStyle == true)
                {
                    foreach (TA.Data.Models.LifeStyle item in listLifeStyle)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='LifeStyleMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Life style: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onLifeStyleTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.LifeStyle + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.LifeStyle + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='LifeStyleListSubUS'", @"id='LifeStyleListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconPlusUS'", @"id='LifeStyleListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconMinusUS' hidden", @"id='LifeStyleListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='LifeStyleListSubInternational'", @"id='LifeStyleListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconPlusInternational'", @"id='LifeStyleListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconMinusInternational' hidden", @"id='LifeStyleListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "LifeStyle");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.LifeStyle001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.LifeStyle, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Shape;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Shape);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                if (isShape == true)
                {
                    foreach (TA.Data.Models.Shape item in listShape)
                    {
                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='ShapeMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Shape: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onShapeTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Shape + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Shape + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        if (string.IsNullOrEmpty(item.ImageURL))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                        }
                        if (!string.IsNullOrEmpty(item.URLImageName))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                        }
                        if (item.IsStory == true)
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                        }

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='ShapeListSubUS'", @"id='ShapeListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconPlusUS'", @"id='ShapeListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconMinusUS' hidden", @"id='ShapeListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='ShapeListSubInternational'", @"id='ShapeListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconPlusInternational'", @"id='ShapeListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconMinusInternational' hidden", @"id='ShapeListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "' hidden", @"id='" + item.ID.ToString().ToUpper() + "'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Shape");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", tagsHTML.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Shape001);

                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Shape, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                i = AppGlobal.InitializationNumber;
                fileName = AppGlobal.InitializationString;
                physicalPathCreate = AppGlobal.InitializationString;
                pageTitle = AppGlobal.InitializationString;
                pageDescription = AppGlobal.InitializationString;
                pageKeywords = AppGlobal.InitializationString;
                pageURL = AppGlobal.InitializationString;
                uRLCheck = AppGlobal.InitializationString;
                contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Designer;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Designer);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                if (isDesigner == true)
                {
                    foreach (TA.Data.Models.Designer item in listDesigner)
                    {
                        if (!string.IsNullOrEmpty(item.ImageIcon))
                        {
                            item.URLImageIcon = AppGlobal.DomainURLPRELIVE + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                        }
                        if (!string.IsNullOrEmpty(item.ImageMain))
                        {
                            item.URLImageMain = AppGlobal.DomainURLPRELIVE + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                        }
                        if (!string.IsNullOrEmpty(item.ImageBackground))
                        {
                            item.URLImageBackground = AppGlobal.DomainURLPRELIVE + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                        }

                        StringBuilder tagsHTML = new StringBuilder();
                        tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='DesignerMenu" + i + "'>");
                        tagsHTML.AppendLine(@"<span style='color:#777777'>Designer: &nbsp;</span>");
                        tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                        tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onDesignerTagClose(" + i + ")'></i>");
                        tagsHTML.AppendLine(@"</span>");
                        pageTitle = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Designer + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Designer + "_" + item.URLCode;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLDesigner;
                        if (string.IsNullOrEmpty(item.URLImageMain))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImageMain);
                        }
                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='DesignerListSubUS'", @"id='DesignerListSubUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconPlusUS'", @"id='DesignerListIconPlusUS' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconMinusUS' hidden", @"id='DesignerListIconMinusUS'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                        contentHTMLSub = contentHTMLSub.Replace(@"hidden id='DesignerListSubInternational'", @"id='DesignerListSubInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconPlusInternational'", @"id='DesignerListIconPlusInternational' hidden");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconMinusInternational' hidden", @"id='DesignerListIconMinusInternational'");
                        contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "' hidden", @"id='" + item.ID.ToString().ToUpper() + "'");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Designer");
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", tagsHTML.ToString());

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Designer001);

                        string uRLReadMore = AppGlobal.DomainURLPRELIVE + AppGlobal.Designer + "/" + item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;
                        contentHTMLSub = contentHTMLSub.Replace(@"[DisplayName]", item.DisplayName);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLImageMain]", item.URLImageMain);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLImageBackground]", item.URLImageBackground);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Title001]", item.Title001);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Description]", item.Description);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLReadMore]", uRLReadMore);


                        fileName = item.URLCode + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Designer, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        pageTitle = item.Name + " " + AppGlobal.Infomation;
                        string pageTitleDesigner = item.Name;
                        pageDescription = item.Description;
                        pageKeywords = item.METAKeyword;
                        pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Designer + "/" + item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;
                        string pageURLDesigner = AppGlobal.DomainURLPRELIVE + AppGlobal.Designer + "/" + item.URLCode + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Designer + "_" + item.URLCode + AppGlobal.Infomation;
                        contentHTMLSub = contentHTMLDesignerInfomation;
                        if (string.IsNullOrEmpty(item.URLImageMain))
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        }
                        else
                        {
                            contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImageMain);
                        }
                        StringBuilder title002 = new StringBuilder();
                        if (!string.IsNullOrEmpty(item.Title002))
                        {
                            title002.AppendLine(@"<div class='content_funiture_care'>" + item.Title002 + "</div>");
                        }
                        StringBuilder descriptionLong = new StringBuilder();
                        if (!string.IsNullOrEmpty(item.DescriptionLong))
                        {
                            descriptionLong.AppendLine(@"<div class='content_funiture_care'>" + item.DescriptionLong + "</div>");
                        }
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";" + item.URLCode);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitleDesigner]", pageTitleDesigner);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURLDesigner]", pageURLDesigner);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLImageMain]", item.URLImageMain);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DisplayName]", item.DisplayName);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Title001]", item.Title001);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Title002]", title002.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[DescriptionLong]", descriptionLong.ToString());

                        fileName = item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Designer, fileName);
                        using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        {
                            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            {
                                w.WriteLine(contentHTMLSub);
                            }
                        }

                        i = i + 1;
                    }
                }

                if (isSpecial == true)
                {
                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Special;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Special);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }

                    string title = AppGlobal.InStock001;
                    string pageURLSub = AppGlobal.InStock;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);

                    contentHTMLSub = contentHTMLInStocked;
                    contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = AppGlobal.CasualLiving001;
                    pageURLSub = AppGlobal.CasualLiving;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                    contentHTMLSub = contentHTMLCasualLiving;
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";" + styleList);
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = AppGlobal.NewProducts001;
                    pageURLSub = AppGlobal.NewProducts;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);

                    contentHTMLSub = contentHTMLNewProducts;
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = AppGlobal.CustomPalette001;
                    pageURLSub = AppGlobal.CustomPalette;
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                    listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);
                    listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);

                    contentHTMLSub = contentHTMLCustomPalette;
                    contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLPRELIVE));
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }

                    title = "Search";
                    pageURLSub = "search";
                    pageTitle = title;
                    pageDescription = title;
                    pageKeywords = title;
                    pageURL = AppGlobal.DomainURLPRELIVE + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                    uRLCheck = AppGlobal.Special + "_" + pageURLSub;

                    listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                    listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                    contentHTMLSub = contentHTML;
                    contentHTMLSub = contentHTMLSub.Replace(@"onInitializationProductListData", @"getByQueryString001");
                    contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", AppGlobal.InitializationString);
                    contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                    fileName = pageURLSub + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    physicalPathCreate = Path.Combine(AppGlobal.APIPREWebRootPath, AppGlobal.Special, fileName);
                    using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLSub);
                        }
                    }
                }

            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationHTMLCategoryPageInLIVE(bool isRoom = true, bool isType = true, bool isBrand = true, bool isCollection = true, bool isLifeStyle = true, bool isStyle = true, bool isShape = true, bool isDesigner = true, bool isSpecial = true, bool isProduct = true)
        {
            string result = AppGlobal.InitializationString;
            if (AppGlobal.DomainURLTEST == "https://theodorealexander.com/")
            {
                try
                {
                    string ftpUrl = AppGlobal.InitializationString;
                    FtpWebRequest requestLIVEFTP;
                    byte[] fileContents;

                    string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                    string contentHTML = AppGlobal.InitializationString;
                    string contentHTMLAbout = AppGlobal.InitializationString;
                    string contentHTMLContact = AppGlobal.InitializationString;
                    string contentHTMLNewProducts = AppGlobal.InitializationString;
                    string contentHTMLCasualLiving = AppGlobal.InitializationString;
                    string contentHTMLCustomPalette = AppGlobal.InitializationString;
                    string contentHTMLTailorFitProgram = AppGlobal.InitializationString;
                    string contentHTMLInStocked = AppGlobal.InitializationString;
                    string contentHTMLDesigner = AppGlobal.InitializationString;
                    string contentHTMLDesignerInfomation = AppGlobal.InitializationString;
                    string contentHTMLProduct = AppGlobal.InitializationString;
                    string contentHTMLAlexaHampton = AppGlobal.InitializationString;
                    var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTML = r.ReadToEnd();
                        }
                    }
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateNewProductsLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLNewProducts = r.ReadToEnd();
                        }
                    }
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateCasualLivingLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLCasualLiving = r.ReadToEnd();
                        }
                    }
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateCustomPaletteLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLCustomPalette = r.ReadToEnd();
                        }
                    }
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateTailorFitProgramLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLTailorFitProgram = r.ReadToEnd();
                        }
                    }
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateInStockedLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLInStocked = r.ReadToEnd();
                        }
                    }
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateDesignerLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLDesigner = r.ReadToEnd();
                        }
                    }
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductListTemplateDesignerInfomationLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLDesignerInfomation = r.ReadToEnd();
                        }
                    }

                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.AboutTemplateLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLAbout = r.ReadToEnd();
                        }
                    }

                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ContactTemplateLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLContact = r.ReadToEnd();
                        }
                    }

                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.ProductTemplateLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLProduct = r.ReadToEnd();
                        }
                    }

                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.AlexaHamptonTemplateLIVE);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentHTMLAlexaHampton = r.ReadToEnd();
                        }
                    }

                    contentHTML = contentHTML.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTML = contentHTML.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTML = contentHTML.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTML = contentHTML.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTML = contentHTML.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTML = contentHTML.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTML = contentHTML.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTML = contentHTML.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTML = contentHTML.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTML = contentHTML.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTML = contentHTML.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLProduct = contentHTMLProduct.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);


                    string pageURL001 = AppGlobal.DomainURLTEST + AppGlobal.AboutHTML;
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageTitle]", AppGlobal.About001);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageDescription]", AppGlobal.About001);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywords]", AppGlobal.About001);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[URLCheck]", AppGlobal.About001.ToLower());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageURL]", pageURL001);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    pageURL001 = AppGlobal.DomainURLTEST + AppGlobal.ContactHTML;
                    contentHTMLContact = contentHTMLContact.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentHTMLContact = contentHTMLContact.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentHTMLContact = contentHTMLContact.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentHTMLContact = contentHTMLContact.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentHTMLContact = contentHTMLContact.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentHTMLContact = contentHTMLContact.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentHTMLContact = contentHTMLContact.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageTitle]", AppGlobal.Contact001);
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageDescription]", AppGlobal.Contact001);
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywords]", AppGlobal.Contact001);
                    contentHTMLContact = contentHTMLContact.Replace(@"[URLCheck]", AppGlobal.Contact001.ToLower());
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageURL]", pageURL001);
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                    contentHTMLContact = contentHTMLContact.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                    List<Collection> listCollection = _collectionRepository.GetByIsActiveToList(true);
                    List<Collection> listCollectionTheodoreAlexanderBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TheodoreAlexanderBrandID, true);
                    List<Collection> listCollectionSaloneBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.SaloneBrandID, true);
                    List<Collection> listCollectionTAStudioBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TAStudioBrandID, true);
                    List<Collection> listCollectionUS = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                    List<Collection> listCollectionInternational = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                    List<Style> listStyle = _styleRepository.GetByIsActiveToList(true);
                    List<Style> listStyleUS = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                    List<Style> listStyleInternational = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                    List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                    List<RoomAndUsage> listRoomAndUsageUS = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                    List<RoomAndUsage> listRoomAndUsageInternational = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                    List<Shape> listShape = _shapeRepository.GetByIsActiveToList(true);
                    List<Shape> listShapeUS = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                    List<Shape> listShapeInternational = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                    List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                    List<LifeStyle> listLifeStyleUS = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                    List<LifeStyle> listLifeStyleInternational = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                    List<TA.Data.Models.Type> listType = _typeRepository.GetByIsActiveToList(true);
                    List<TA.Data.Models.Type> listTypeUS = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                    List<TA.Data.Models.Type> listTypeInternational = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                    List<Brand> listBrand = _brandRepository.GetByIsActiveToList(true);
                    List<TA.Data.Models.Designer> listDesigner = _designerRepository.GetByIsActiveToList(true);

                    List<ItemDataTransfer> listItemDataTransferExtendingUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);
                    List<ItemDataTransfer> listItemDataTransferExtendingInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);

                    StringBuilder menuTopBrandTheodoreAlexander = new StringBuilder();
                    StringBuilder menuTopBrandSalone = new StringBuilder();
                    StringBuilder menuTopBrandTAStudio = new StringBuilder();
                    StringBuilder menuTopProduct = new StringBuilder();
                    StringBuilder menuTopDesigner = new StringBuilder();
                    StringBuilder menuLeftUS = new StringBuilder();
                    StringBuilder menuLeftInternational = new StringBuilder();
                    StringBuilder menuBrandMobileTheodoreAlexander = new StringBuilder();
                    StringBuilder menuBrandMobileSalone = new StringBuilder();
                    StringBuilder menuBrandMobileTAStudio = new StringBuilder();
                    StringBuilder menuProductMobile = new StringBuilder();
                    StringBuilder menuDesignerMobile = new StringBuilder();
                    StringBuilder productListProductsUSHTML = new StringBuilder();
                    StringBuilder productListProductsInternationalHTML = new StringBuilder();

                    int i = 1;
                    foreach (Collection item in listCollectionTheodoreAlexanderBrandID)
                    {
                        string liHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        menuBrandMobileTheodoreAlexander.AppendLine(liHTML);
                        if ((i == 1) || (i % 9 == 1))
                        {
                            menuTopBrandTheodoreAlexander.AppendLine("<ul>");
                        }
                        menuTopBrandTheodoreAlexander.AppendLine(liHTML);
                        if (i > 1)
                        {
                            if ((i == listCollectionTheodoreAlexanderBrandID.Count) || (i % 9 == 0))
                            {
                                menuTopBrandTheodoreAlexander.AppendLine("</ul>");
                            }
                        }
                        i = i + 1;
                    }

                    StringBuilder menuTopBrandTAStudioInternational = new StringBuilder();
                    StringBuilder menuTopBrandTAStudioUS = new StringBuilder();
                    menuTopBrandTAStudioInternational.AppendLine(@"<div id='MenuTopBrandTAStudioInternational' style='display: flex;'>");
                    menuTopBrandTAStudioUS.AppendLine(@"<div id='MenuTopBrandTAStudioUS' style='display: flex;'>");
                    i = 1;
                    foreach (Collection item in listCollectionTAStudioBrandID)
                    {
                        string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        if (item.ID.ToString().ToUpper() == "461DA43B-0409-4EBD-8EF2-0FB911718678")
                        {
                            liMobileHTML = @"<li id='TAStudioFrenzy" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        }
                        if (item.ID.ToString().ToUpper() == "85CFC3ED-8876-436E-8159-B1E1025644C8")
                        {
                            liMobileHTML = @"<li id='TAStudioHolli" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        }
                        menuBrandMobileTAStudio.AppendLine(liMobileHTML);
                        if ((i == 1) || (i % 5 == 1))
                        {
                            menuTopBrandTAStudioInternational.AppendLine("<ul style='min-width: 150px;'>");
                            menuTopBrandTAStudioUS.AppendLine("<ul style='min-width: 150px;'>");
                        }
                        menuTopBrandTAStudioInternational.AppendLine(liHTML);
                        if ((item.ID.ToString().ToUpper() != "461DA43B-0409-4EBD-8EF2-0FB911718678") && (item.ID.ToString().ToUpper() != "85CFC3ED-8876-436E-8159-B1E1025644C8"))
                        {
                            menuTopBrandTAStudioUS.AppendLine(liHTML);
                        }
                        if (i > 1)
                        {
                            if ((i == listCollectionTAStudioBrandID.Count) || (i % 5 == 0))
                            {
                                menuTopBrandTAStudioInternational.AppendLine("</ul>");
                                menuTopBrandTAStudioUS.AppendLine("</ul>");
                            }
                        }
                        i = i + 1;
                    }
                    menuTopBrandTAStudioInternational.AppendLine(@"</div>");
                    menuTopBrandTAStudioUS.AppendLine(@"</div>");
                    menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioInternational.ToString());
                    menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioUS.ToString());

                    foreach (Collection item in listCollectionSaloneBrandID)
                    {
                        string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        menuBrandMobileSalone.AppendLine(liMobileHTML);
                        menuTopBrandSalone.AppendLine(liHTML);
                    }


                    foreach (RoomAndUsage item in listRoomAndUsage)
                    {
                        string liMobileHTML = @"<li class='item_left_branch'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        menuTopProduct.AppendLine(@"<ul>");
                        menuTopProduct.AppendLine(@"<li>");
                        menuTopProduct.AppendLine(@"<h1><a title='" + item.DisplayName.ToUpper() + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension + "'>" + item.DisplayName.ToUpper() + "</a></h1>"); ;
                        menuTopProduct.AppendLine(@"</li>");

                        menuProductMobile.AppendLine(@"<li class='sub-item-mobile'>");
                        menuProductMobile.AppendLine(@"<a onclick='on" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Open + "()' title='" + item.DisplayName.ToUpper() + "'><i id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Icon + "' class='icon-plus'></i>" + item.DisplayName.ToUpper() + "</a>");
                        menuProductMobile.AppendLine(@"<ul id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + "Mobile' hidden>");


                        foreach (TA.Data.Models.Type itemType in listType)
                        {
                            string liHTML = @"<li><a title='" + itemType.DisplayName + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + @"/" + itemType.URLCode + AppGlobal.HTMLExtension + "'>" + itemType.DisplayName + "</a></li>";
                            if (itemType.RoomAndUsage_ID == item.ID)
                            {
                                menuTopProduct.AppendLine(liHTML);
                                menuProductMobile.AppendLine(liHTML);
                            }
                        }

                        menuTopProduct.AppendLine(@"</ul>");

                        menuProductMobile.AppendLine(@"</ul>");
                        menuProductMobile.AppendLine(@"<li>");
                    }

                    foreach (Designer item in listDesigner)
                    {
                        if (!string.IsNullOrEmpty(item.ImageIcon))
                        {
                            item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                        }
                        if (!string.IsNullOrEmpty(item.ImageMain))
                        {
                            item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                        }
                        if (!string.IsNullOrEmpty(item.ImageBackground))
                        {
                            item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                        }
                        StringBuilder liHTML = new StringBuilder();
                        liHTML.AppendLine(@"<ul>");
                        liHTML.AppendLine(@"<li class='icon_designer_optimize'>");
                        liHTML.AppendLine(@"<div class='image'>");
                        liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>");
                        liHTML.AppendLine(@"<img src='" + item.URLImageIcon + "' title='" + item.DisplayName + "' alt='" + item.DisplayName + "' />");
                        liHTML.AppendLine(@"</a>");
                        liHTML.AppendLine(@"</div>");
                        liHTML.AppendLine(@"<div class='title_menu_designer'>");
                        liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a>");
                        liHTML.AppendLine(@"</div>");
                        liHTML.AppendLine(@"</li>");
                        liHTML.AppendLine(@"</ul>");
                        string liMobileHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                        menuDesignerMobile.AppendLine(liMobileHTML);
                        menuTopDesigner.AppendLine(liHTML.ToString());
                    }

                    menuLeftUS.AppendLine(@"<ul id='" + AppGlobal.MenuLeft + AppGlobal.US + "'>");

                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.US + "'>");
                    menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()'>ROOMS (<span id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.RoomAndUsage001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftUS.AppendLine(@"<ul " + AppGlobal.Hidden + " id='" + AppGlobal.RoomAndUsage001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "' style='padding-left: 10px;'>");
                    int roomCountUS = AppGlobal.InitializationNumber;
                    foreach (RoomAndUsage item in listRoomAndUsageUS)
                    {
                        menuLeftUS.AppendLine(@"<li class='ngb_accordion_header' id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"'>");
                        menuLeftUS.AppendLine(@"<div style='cursor: pointer; display: flex; border-bottom: 1px dashed #d4d4d4; padding-bottom: 10px;' onclick=""on" + AppGlobal.RoomAndUsage001 + AppGlobal.Sub + AppGlobal.Change + "('" + item.ID.ToString().ToUpper() + @"')""><i id='" + item.ID.ToString().ToUpper() + AppGlobal.Icon + AppGlobal.US + "' class='ngb_accordion_header_expand-collapse-indicatior-arrow'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</div>");
                        menuLeftUS.AppendLine(@"<ul id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='margin-top: 10px; margin-left: 15px;'>");
                        foreach (TA.Data.Models.Type itemType in listTypeUS)
                        {
                            if (itemType.RoomAndUsage_ID == item.ID)
                            {
                                menuLeftUS.AppendLine(@"<li id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.Type001 + AppGlobal.Select + "('" + itemType.ID.ToString().ToUpper() + "', '" + itemType.URLCode + @"', 1)"">");
                                menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + itemType.DisplayName + "'><i class='icon-circle'></i> " + itemType.DisplayName + " (<span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + itemType.ItemCount + "</span><span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + itemType.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + itemType.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                                menuLeftUS.AppendLine(@"</li>");
                            }
                        }
                        menuLeftUS.AppendLine(@"</ul>");
                        menuLeftUS.AppendLine(@"</li>");
                        roomCountUS = roomCountUS + item.ItemCount.Value;
                    }
                    menuLeftUS.AppendLine(@"</ul>");
                    menuLeftUS.AppendLine(@"</li>");

                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.Collection + AppGlobal.US + "'>");
                    menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()'>COLLECTIONS (<span id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.Collection001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' " + AppGlobal.Hidden + " class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' " + AppGlobal.Hidden + " id='" + AppGlobal.Collection001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "'>");
                    int collectionCountUS = AppGlobal.InitializationNumber;
                    foreach (Collection item in listCollectionUS)
                    {
                        menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.Collection001 + AppGlobal.Select + "('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftUS.AppendLine(@"</li>");
                        collectionCountUS = collectionCountUS + item.ItemCount.Value;
                    }
                    menuLeftUS.AppendLine(@"</ul>");
                    menuLeftUS.AppendLine(@"</li>");

                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.LifeStyle001 + AppGlobal.US + "'>");
                    menuLeftUS.AppendLine(@"<span onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()'>LIFESTYLES (<span id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">[" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "]</span><span id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Plus + AppGlobal.US + "' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='on" + AppGlobal.LifeStyle001 + AppGlobal.Change + AppGlobal.US + "()' id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Icon + AppGlobal.Minus + AppGlobal.US + "' " + AppGlobal.Hidden + " class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' " + AppGlobal.Hidden + " id='" + AppGlobal.LifeStyle001 + AppGlobal.List + AppGlobal.Sub + AppGlobal.US + "'>");
                    int lifeStyleCountUS = AppGlobal.InitializationNumber;
                    foreach (LifeStyle item in listLifeStyleUS)
                    {
                        menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + AppGlobal.Li + AppGlobal.US + @"' onclick=""on" + AppGlobal.LifeStyle001 + AppGlobal.Select + "('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden + ">" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'>[" + item.ID.ToString().ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "]</span>) <span id='" + item.ID.ToString().ToUpper() + AppGlobal.US + "' " + AppGlobal.Hidden + " style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftUS.AppendLine(@"</li>");
                        lifeStyleCountUS = lifeStyleCountUS + item.ItemCount.Value;
                    }
                    menuLeftUS.AppendLine(@"</ul>");
                    menuLeftUS.AppendLine(@"</li>");

                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftStyleUS'>");
                    menuLeftUS.AppendLine(@"<span onclick='onStyleChangeUS()'>STYLES (<span id='StyleCountUS' hidden>[StyleCountUS]</span><span id='StyleCountUSFilter'>[StyleCountUSFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onStyleChangeUS()' id='StyleListIconPlusUS' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onStyleChangeUS()' id='StyleListIconMinusUS' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' hidden id='StyleListSubUS'>");
                    int styleCountUS = AppGlobal.InitializationNumber;
                    foreach (Style item in listStyleUS)
                    {
                        menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiUS' onclick=""onStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountUS' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountUSFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountUSFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "US' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftUS.AppendLine(@"</li>");
                        styleCountUS = styleCountUS + item.ItemCount.Value;
                    }
                    menuLeftUS.AppendLine(@"</ul>");
                    menuLeftUS.AppendLine(@"</li>");

                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftShapeUS'>");
                    menuLeftUS.AppendLine(@"<span onclick='onShapeChangeUS()'>SHAPES (<span id='ShapeCountUS' hidden>[ShapeCountUS]</span><span id='ShapeCountUSFilter'>[ShapeCountUSFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onShapeChangeUS()' id='ShapeListIconPlusUS' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onShapeChangeUS()' id='ShapeListIconMinusUS' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftUS.AppendLine(@"<ul style='margin-top: 10px;' hidden id='ShapeListSubUS'>");
                    int shapeCountUS = AppGlobal.InitializationNumber;
                    foreach (Shape item in listShapeUS)
                    {
                        menuLeftUS.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiUS' onclick=""onShapeSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftUS.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountUS' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountUSFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountUSFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "US' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftUS.AppendLine(@"</li>");
                        shapeCountUS = shapeCountUS + item.ItemCount.Value;
                    }
                    menuLeftUS.AppendLine(@"</ul>");
                    menuLeftUS.AppendLine(@"</li>");

                    menuLeftUS.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftExtendingUS' onclick='onEXTENDINGChangeUS()'>");
                    menuLeftUS.AppendLine(@"<a title='EXTENDING'>EXTENDING (<span id='ExtendingCountUS' hidden>" + listItemDataTransferExtendingUS.Count + "</span><span id='ExtendingCountUSFilter'>[ExtendingCountUSFilter]</span>) <span id='EXTENDINGUS' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftUS.AppendLine(@"</li>");

                    menuLeftUS.AppendLine(@"</ul>");


                    menuLeftInternational.AppendLine(@"<ul id='" + AppGlobal.MenuLeft + AppGlobal.International + "' " + AppGlobal.Hidden + ">");

                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.International + "'>");
                    menuLeftInternational.AppendLine(@"<span onclick='onRoomChangeInternational()'>ROOMS (<span id='RoomCountInternational' hidden>[RoomCountInternational]</span><span id='RoomCountInternationalFilter'>[RoomCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onRoomChangeInternational()' id='RoomListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onRoomChangeInternational()' id='RoomListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftInternational.AppendLine(@"<ul hidden id='RoomListSubInternational' style='padding-left: 10px;'>");
                    int roomCountInternational = AppGlobal.InitializationNumber;
                    foreach (RoomAndUsage item in listRoomAndUsageInternational)
                    {
                        menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header' id='" + item.ID.ToString().ToUpper() + @"LiInternational'>");
                        menuLeftInternational.AppendLine(@"<div style='cursor: pointer; display: flex; border-bottom: 1px dashed #d4d4d4; padding-bottom: 10px;' onclick=""onRoomSubChange('" + item.ID.ToString().ToUpper() + @"')""><i id='" + item.ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>)</div>");
                        menuLeftInternational.AppendLine(@"<ul id='" + item.ID.ToString().ToUpper() + "International' hidden style='margin-top: 10px; margin-left: 15px;'>");
                        foreach (TA.Data.Models.Type itemType in listTypeInternational)
                        {
                            if (itemType.RoomAndUsage_ID == item.ID)
                            {
                                menuLeftInternational.AppendLine(@"<li id='" + itemType.ID.ToString().ToUpper() + @"LiInternational' onclick=""onTypeSelect('" + itemType.ID.ToString().ToUpper() + "', '" + itemType.URLCode + @"', 1)"">");
                                menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + itemType.DisplayName + "'><i class='icon-circle'></i> " + itemType.DisplayName + " (<span id='" + itemType.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + itemType.ItemCount + "</span><span id='" + itemType.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + itemType.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + itemType.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                                menuLeftInternational.AppendLine(@"</li>");
                            }
                        }
                        menuLeftInternational.AppendLine(@"</ul>");
                        menuLeftInternational.AppendLine(@"</li>");
                        roomCountInternational = roomCountInternational + item.ItemCount.Value;
                    }
                    menuLeftInternational.AppendLine(@"</ul>");
                    menuLeftInternational.AppendLine(@"</li>");

                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftCollectionInternational'>");
                    menuLeftInternational.AppendLine(@"<span onclick='onCollectionChangeInternational()'>COLLECTIONS (<span id='CollectionCountInternational' hidden>[CollectionCountInternational]</span><span id='CollectionCountInternationalFilter'>[CollectionCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onCollectionChangeInternational()' id='CollectionListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onCollectionChangeInternational()' id='CollectionListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='CollectionListSubInternational'>");
                    int collectionCountInternational = AppGlobal.InitializationNumber;
                    foreach (Collection item in listCollectionInternational)
                    {
                        menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onCollectionSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftInternational.AppendLine(@"</li>");
                        collectionCountInternational = collectionCountInternational + item.ItemCount.Value;
                    }
                    menuLeftInternational.AppendLine(@"</ul>");
                    menuLeftInternational.AppendLine(@"</li>");

                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftLifeStyleInternational'>");
                    menuLeftInternational.AppendLine(@"<span onclick='onLifeStyleChangeInternational()'>LIFESTYLES (<span id='LifeStyleCountInternational' hidden>[LifeStyleCountInternational]</span><span id='LifeStyleCountInternationalFilter'>[LifeStyleCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onLifeStyleChangeInternational()' id='LifeStyleListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onLifeStyleChangeInternational()' id='LifeStyleListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='LifeStyleListSubInternational'>");
                    int lifeStyleCountInternational = AppGlobal.InitializationNumber;
                    foreach (LifeStyle item in listLifeStyleInternational)
                    {
                        menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onLifeStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftInternational.AppendLine(@"</li>");
                        lifeStyleCountInternational = lifeStyleCountInternational + item.ItemCount.Value;
                    }
                    menuLeftInternational.AppendLine(@"</ul>");
                    menuLeftInternational.AppendLine(@"</li>");

                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftStyleInternational'>");
                    menuLeftInternational.AppendLine(@"<span onclick='onStyleChangeInternational()'>STYLES (<span id='StyleCountInternational' hidden>[StyleCountInternational]</span><span id='StyleCountInternationalFilter'>[StyleCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onStyleChangeInternational()' id='StyleListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onStyleChangeInternational()' id='StyleListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='StyleListSubInternational'>");
                    int styleCountInternational = AppGlobal.InitializationNumber;
                    foreach (Style item in listStyleInternational)
                    {
                        menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onStyleSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftInternational.AppendLine(@"</li>");
                        styleCountInternational = styleCountInternational + item.ItemCount.Value;
                    }
                    menuLeftInternational.AppendLine(@"</ul>");
                    menuLeftInternational.AppendLine(@"</li>");

                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftShapeInternational'>");
                    menuLeftInternational.AppendLine(@"<span onclick='onShapeChangeInternational()'>SHAPES (<span id='ShapeCountInternational' hidden>[ShapeCountInternational]</span><span id='ShapeCountInternationalFilter'>[ShapeCountInternationalFilter]</span>)</span> <span style='position: absolute; right: 25px; cursor: pointer;'><i onclick='onShapeChangeInternational()' id='ShapeListIconPlusInternational' class='icon-plus' style='color: #000000; font-weight: bolder;'></i><i onclick='onShapeChangeInternational()' id='ShapeListIconMinusInternational' hidden class='icon-minus' style='color: #000000; font-weight: bolder;'></i></span>");
                    menuLeftInternational.AppendLine(@"<ul style='margin-top: 10px;' hidden id='ShapeListSubInternational'>");
                    int shapeCountInternational = AppGlobal.InitializationNumber;
                    foreach (Shape item in listShapeInternational)
                    {
                        menuLeftInternational.AppendLine(@"<li id='" + item.ID.ToString().ToUpper() + @"LiInternational' onclick=""onShapeSelect('" + item.ID.ToString().ToUpper() + @"', '" + item.URLCode + @"', 1)"">");
                        menuLeftInternational.AppendLine(@"<a class='ngb-accordion_content-ul-li-div' title='" + item.DisplayName + "'><i class='icon-circle'></i>" + item.DisplayName + " (<span id='" + item.ID.ToString().ToUpper() + "ItemCountInternational' hidden>" + item.ItemCount + "</span><span id='" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter'>[" + item.ID.ToString().ToUpper() + "ItemCountInternationalFilter]</span>) <span id='" + item.ID.ToString().ToUpper() + "International' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                        menuLeftInternational.AppendLine(@"</li>");
                        shapeCountInternational = shapeCountInternational + item.ItemCount.Value;
                    }
                    menuLeftInternational.AppendLine(@"</ul>");
                    menuLeftInternational.AppendLine(@"</li>");

                    menuLeftInternational.AppendLine(@"<li class='ngb_accordion_header-level-0' id='MenuLeftExtendingInternational' onclick='onEXTENDINGChangeInternational()'>");
                    menuLeftInternational.AppendLine(@"<a title='EXTENDING'>EXTENDING (<span id='ExtendingCountInternational' hidden>" + listItemDataTransferExtendingInternational.Count + "</span><span id='ExtendingCountInternationalFilter'>[ExtendingCountInternationalFilter]</span>)<span id='EXTENDINGInternational' hidden style='position: absolute; right: 25px; margin-top: 8px;'><i class='icon-checked'></i></span></a>");
                    menuLeftInternational.AppendLine(@"</li>");

                    menuLeftInternational.AppendLine(@"</ul>");

                    contentHTML = contentHTML.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTML = contentHTML.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTML = contentHTML.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTML = contentHTML.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTML = contentHTML.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTML = contentHTML.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTML = contentHTML.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTML = contentHTML.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTML = contentHTML.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTML = contentHTML.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTML = contentHTML.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTML = contentHTML.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTML = contentHTML.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTMLNewProducts = contentHTMLNewProducts.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTMLCasualLiving = contentHTMLCasualLiving.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTMLInStocked = contentHTMLInStocked.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTMLCustomPalette = contentHTMLCustomPalette.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTMLTailorFitProgram = contentHTMLTailorFitProgram.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTMLDesigner = contentHTMLDesigner.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuLeftUS]", menuLeftUS.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuLeftInternational]", menuLeftInternational.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[CollectionCountInternational]", collectionCountInternational.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[CollectionCountUS]", collectionCountUS.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[LifeStyleCountUS]", lifeStyleCountUS.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[LifeStyleCountInternational]", lifeStyleCountInternational.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[StyleCountUS]", styleCountUS.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[StyleCountInternational]", styleCountInternational.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[ShapeCountUS]", shapeCountUS.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[ShapeCountInternational]", shapeCountInternational.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[RoomCountUS]", roomCountUS.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[RoomCountInternational]", roomCountInternational.ToString());
                    contentHTMLDesignerInfomation = contentHTMLDesignerInfomation.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLAbout = contentHTMLAbout.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLContact = contentHTMLContact.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLProduct = contentHTMLProduct.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentHTMLAlexaHampton = contentHTMLAlexaHampton.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                    string contentIndex = AppGlobal.InitializationString;
                    physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.IndexLIVEHTML);
                    using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                    {
                        using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                        {
                            contentIndex = r.ReadToEnd();
                        }
                    }

                    StringBuilder blogContent = new StringBuilder();
                    WebClient webClient = new WebClient();
                    System.Json.JsonValue listJsonValue = JsonValue.Parse(webClient.DownloadString(AppGlobal.BlogAPIURL));
                    var listBlogJSON = listJsonValue["posts"];
                    int count = listBlogJSON.Count;
                    if (count > 3)
                    {
                        count = 3;
                    }
                    for (int j = 0; j < count; j++)
                    {
                        string blogAuthor = "By Theodore Alexander";
                        string blogSlug = listBlogJSON[j]["slug"];
                        string blogTitle = listBlogJSON[j]["title"];
                        string blogDescription = listBlogJSON[j]["meta_description"];
                        string blogImage = listBlogJSON[j]["feature_image"];
                        string blogPublished = listBlogJSON[j]["published_at"];
                        DateTime blogDatePublished = AppGlobal.InitializationDateTime;
                        if (!string.IsNullOrEmpty(blogPublished))
                        {
                            try
                            {
                                string year = blogPublished.Split('-')[0];
                                string month = blogPublished.Split('-')[1];
                                string day = blogPublished.Split('-')[2];
                                day = day.Split('T')[0];
                                blogDatePublished = new DateTime(int.Parse(year), int.Parse(month), int.Parse(day));
                            }
                            catch (Exception e)
                            {
                                string blogMes = e.Message;
                            }
                        }
                        CultureInfo ci = new CultureInfo("en-US");
                        var monthName = DateTime.Now.ToString("MMMM", ci);
                        blogSlug = AppGlobal.DomainURLTEST + AppGlobal.Blog + "/" + blogSlug;
                        blogContent.AppendLine(@"<div class='swiper-slide slider_item d-flex' style='display: flex; justify-content: center;'>");
                        blogContent.AppendLine(@"<div class='img-fullsize-top-home-blog'>");
                        blogContent.AppendLine(@"<a title=""" + blogTitle + @""" style='color: #000 !important;' href='" + blogSlug + "'>");
                        blogContent.AppendLine(@"<img title=""" + blogTitle + @""" alt=""" + blogTitle + @""" class='pic-blog-top' style='object-fit: cover; object-position: center;' src='" + blogImage + "' width='100%' height='100%'>");
                        blogContent.AppendLine(@"</a>");
                        blogContent.AppendLine(@"</div>");
                        blogContent.AppendLine(@"<div class='post-title content-main-post-top'>");
                        blogContent.AppendLine(@"<a title=""" + blogTitle + @""" style='color: #000 !important;' href='" + blogSlug + "'>");
                        blogContent.AppendLine(@"<h1 class='title-detail-post'>" + blogTitle + "</h1>");
                        blogContent.AppendLine(@"<div class='short-description-top'>" + blogDescription + "</div>");
                        blogContent.AppendLine(@"</a>");
                        blogContent.AppendLine(@"<div class='info-post'>");
                        blogContent.AppendLine(@"<span class='by-post'><i class='icon-user'></i><img style='width: 20px; height: 20px; border-radius: 10px;' alt='" + blogAuthor + "' title='" + blogAuthor + "' src='https://tablog.ghost.io/content/images/2021/01/_--1-.png' /><span style='margin-left: 5px;'>" + blogAuthor + "</span></span>");
                        blogContent.AppendLine(@"<span class='date-post-detail'><i class='icon-timer'></i>" + monthName + " " + blogDatePublished.Day + ", " + blogDatePublished.Year + "</span>");
                        blogContent.AppendLine(@"<div class='share-detail'>");
                        blogContent.AppendLine(@"<span>Share:</span>");
                        blogContent.AppendLine(@"<a target='_blank' href='https://www.facebook.com/sharer/sharer.php?u=" + blogSlug + "' title='facebook'><i class='icon-facebook'></i></a>");
                        blogContent.AppendLine(@"<a target='_blank' href='https://twitter.com/intent/tweet?text=" + blogTitle + "&url=" + blogSlug + "' title='twitter'><i class='icon-twitter'></i></a>");
                        blogContent.AppendLine(@"<a target='_blank' href='https://www.pinterest.com/pin-builder/?url=" + blogSlug + "&media=" + blogImage + "&description=" + blogDescription + "&method=button' title='pinterest'><i class='icon-pinterest2'></i></a>");
                        blogContent.AppendLine(@"</div>");
                        blogContent.AppendLine(@"</div>");
                        blogContent.AppendLine(@"</div>");
                        blogContent.AppendLine(@"</div>");
                    }

                    contentIndex = contentIndex.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                    contentIndex = contentIndex.Replace(@"[URLCheck]", AppGlobal.Index);
                    contentIndex = contentIndex.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                    contentIndex = contentIndex.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                    contentIndex = contentIndex.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);
                    contentIndex = contentIndex.Replace(@"[BlogContent]", blogContent.ToString());
                    contentIndex = contentIndex.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                    contentIndex = contentIndex.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                    contentIndex = contentIndex.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                    contentIndex = contentIndex.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                    contentIndex = contentIndex.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                    contentIndex = contentIndex.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);

                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Index;
                    string physicalPathCreateIndex = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreateIndex))
                    {
                        Directory.CreateDirectory(physicalPathCreateIndex);
                    }

                    physicalPathCreateIndex = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Index);
                    if (!Directory.Exists(physicalPathCreateIndex))
                    {
                        Directory.CreateDirectory(physicalPathCreateIndex);
                    }
                    //physicalPathCreateIndex = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.IndexHTML);
                    //using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentIndex);
                    //    }
                    //}

                    //subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Index;
                    //physicalPathCreateIndex = Path.Combine(AppGlobal.APILIVEWebRootPath, subPath);
                    //if (!Directory.Exists(physicalPathCreateIndex))
                    //{
                    //    Directory.CreateDirectory(physicalPathCreateIndex);
                    //}

                    physicalPathCreateIndex = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Index, AppGlobal.IndexHTML);
                    using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentIndex);
                        }
                    }

                    physicalPathCreateIndex = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.InitializationString, AppGlobal.AboutHTML);
                    using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLAbout);
                        }
                    }


                    physicalPathCreateIndex = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.InitializationString, AppGlobal.ContactHTML);
                    using (FileStream fs = new FileStream(physicalPathCreateIndex, FileMode.Create))
                    {
                        using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        {
                            w.WriteLine(contentHTMLContact);
                        }
                    }

                    //ftpUrl = AppGlobal.LIVEFTP + AppGlobal.AboutHTML;
                    //requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                    //requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                    //requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                    //fileContents = Encoding.UTF8.GetBytes(contentHTMLAbout);
                    //requestLIVEFTP.ContentLength = fileContents.Length;
                    //using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                    //{
                    //    requestStream.Write(fileContents, 0, fileContents.Length);
                    //}

                    //ftpUrl = AppGlobal.LIVEFTP + AppGlobal.ContactHTML;
                    //requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                    //requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                    //requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                    //fileContents = Encoding.UTF8.GetBytes(contentHTMLContact);
                    //requestLIVEFTP.ContentLength = fileContents.Length;
                    //using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                    //{
                    //    requestStream.Write(fileContents, 0, fileContents.Length);
                    //}


                    List<ItemDataTransfer> listUS = new List<ItemDataTransfer>();
                    List<ItemDataTransfer> listInternational = new List<ItemDataTransfer>();
                    List<ItemMenuLeftDataTransfer> listUSMenuLeft = new List<ItemMenuLeftDataTransfer>();
                    List<ItemMenuLeftDataTransfer> listInternationalMenuLeft = new List<ItemMenuLeftDataTransfer>();
                    i = AppGlobal.InitializationNumber;
                    string fileName = AppGlobal.InitializationString;
                    string physicalPathCreate = AppGlobal.InitializationString;
                    string pageTitle = AppGlobal.InitializationString;
                    string pageDescription = AppGlobal.InitializationString;
                    string pageKeywords = AppGlobal.InitializationString;
                    string pageURL = AppGlobal.InitializationString;
                    string uRLCheck = AppGlobal.InitializationString;
                    string contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Collection;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }

                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Collection);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    if (isCollection == true)
                    {
                        foreach (Collection item in listCollection)
                        {

                            StringBuilder tagsHTML = new StringBuilder();
                            tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='CollectionMenu" + i + "'>");
                            tagsHTML.AppendLine(@"<span style='color:#777777'>Collection: &nbsp;</span>");
                            tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                            tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onCollectionTagClose(" + i + ")'></i>");
                            tagsHTML.AppendLine(@"</span>");
                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Collection + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Collection + "_" + item.URLCode;
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(item.ImageURL))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                            }
                            if (!string.IsNullOrEmpty(item.URLImageName))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                            }
                            if (item.IsStory == true)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                            }

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubUS'", @"id='CollectionListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusUS'", @"id='CollectionListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusUS' hidden", @"id='CollectionListIconMinusUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");
                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubInternational'", @"id='CollectionListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusInternational'", @"id='CollectionListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusInternational' hidden", @"id='CollectionListIconMinusInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";" + item.URLCode);
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Collection");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", tagsHTML.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Collection001);

                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Collection, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Collection + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                    }

                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Type;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Type);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }

                    if (isType == true)
                    {
                        foreach (TA.Data.Models.Type item in listType)
                        {
                            StringBuilder tagsHTML = new StringBuilder();
                            tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='TypeMenu" + i + "'>");
                            tagsHTML.AppendLine(@"<span style='color:#777777'>Room: &nbsp;</span>");
                            tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                            tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onTypeTagClose(" + i + ")'></i>");
                            tagsHTML.AppendLine(@"</span>");
                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Type + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Type + "_" + item.URLCode;
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(item.ImageURL))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                            }
                            if (!string.IsNullOrEmpty(item.URLImageName))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                            }
                            if (item.IsStory == true)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                            }

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubUS'", @"id='RoomListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusUS'", @"id='RoomListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusUS' hidden", @"id='RoomListIconMinusUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "US' hidden", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "US'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconUS' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconUS' class='icon-arrow_dropdown'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubInternational'", @"id='RoomListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusInternational'", @"id='RoomListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusInternational' hidden", @"id='RoomListIconMinusInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "International' hidden", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "International'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.RoomAndUsage_ID.ToString().ToUpper() + "IconInternational' class='icon-arrow_dropdown'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";" + item.URLCode);
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Type");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", tagsHTML.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Type001);

                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Type, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Type + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                    }

                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.RoomAndUsage;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.RoomAndUsage);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    if (isRoom == true)
                    {
                        foreach (TA.Data.Models.RoomAndUsage item in listRoomAndUsage)
                        {
                            StringBuilder tagsHTML = new StringBuilder();
                            int j = AppGlobal.InitializationNumber;
                            List<TA.Data.Models.Type> listTypeSub = new List<Data.Models.Type>();
                            foreach (TA.Data.Models.Type itemType in listType)
                            {
                                if (itemType.RoomAndUsage_ID == item.ID)
                                {
                                    listTypeSub.Add(itemType);
                                    tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='TypeMenu" + j + "'>");
                                    tagsHTML.AppendLine(@"<span style='color:#777777'>" + item.DisplayName + ": &nbsp;</span>");
                                    tagsHTML.AppendLine(@"<span>" + itemType.DisplayName + "</span>");
                                    tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onTypeTagClose(" + j + ")'></i>");
                                    tagsHTML.AppendLine(@"</span>");
                                }
                                j = j + 1;
                            }

                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.RoomAndUsage + "_" + item.URLCode;

                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(item.ImageURL))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                            }
                            if (!string.IsNullOrEmpty(item.URLImageName))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                            }
                            if (item.IsStory == true)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                            }

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubUS'", @"id='RoomListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusUS'", @"id='RoomListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusUS' hidden", @"id='RoomListIconMinusUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "IconUS' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.ID.ToString().ToUpper() + "IconUS' class='icon-arrow_dropdown'");

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='RoomListSubInternational'", @"id='RoomListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconPlusInternational'", @"id='RoomListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='RoomListIconMinusInternational' hidden", @"id='RoomListIconMinusInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "IconInternational' class='ngb_accordion_header_expand-collapse-indicatior-arrow'", @"id='" + item.ID.ToString().ToUpper() + "IconInternational' class='icon-arrow_dropdown'");

                            string typeList = AppGlobal.InitializationString;
                            foreach (TA.Data.Models.Type itemType in listTypeSub)
                            {
                                if (itemType.RoomAndUsage_ID == item.ID)
                                {
                                    contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemType.ID.ToString().ToUpper() + "US' hidden", @"id='" + itemType.ID.ToString().ToUpper() + "US'");
                                    contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemType.ID.ToString().ToUpper() + "International' hidden", @"id='" + itemType.ID.ToString().ToUpper() + "International'");
                                    typeList = typeList + itemType.URLCode + ";";
                                }
                            }
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, typeList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";" + typeList);
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Type");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", tagsHTML.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Type001);

                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.RoomAndUsage, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.RoomAndUsage + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                    }

                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Brand;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Brand);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    if (isBrand == true)
                    {
                        foreach (TA.Data.Models.Brand item in listBrand)
                        {
                            StringBuilder tagsHTML = new StringBuilder();
                            List<TA.Data.Models.Collection> listCollectionSub = new List<Data.Models.Collection>();
                            int j = AppGlobal.InitializationNumber;
                            foreach (TA.Data.Models.Collection itemCollection in listCollection)
                            {
                                if (itemCollection.Brand_ID == item.ID)
                                {
                                    listCollectionSub.Add(itemCollection);
                                    tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='CollectionMenu" + j + "'>");
                                    tagsHTML.AppendLine(@"<span style='color:#777777'>" + item.DisplayName + ": &nbsp;</span>");
                                    tagsHTML.AppendLine(@"<span>" + itemCollection.DisplayName + "</span>");
                                    tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onCollectionTagClose(" + j + ")'></i>");
                                    tagsHTML.AppendLine(@"</span>");
                                }
                                j = j + 1;
                            }

                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Brand + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Brand + "_" + item.URLCode;

                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(item.ImageURL))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                            }
                            if (!string.IsNullOrEmpty(item.URLImageName))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                            }
                            if (item.IsStory == true)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                            }

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubUS'", @"id='CollectionListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusUS'", @"id='CollectionListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusUS' hidden", @"id='CollectionListIconMinusUS'");

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='CollectionListSubInternational'", @"id='CollectionListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconPlusInternational'", @"id='CollectionListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='CollectionListIconMinusInternational' hidden", @"id='CollectionListIconMinusInternational'");

                            string collectionList = AppGlobal.InitializationString;
                            foreach (TA.Data.Models.Collection itemCollection in listCollectionSub)
                            {
                                if (itemCollection.Brand_ID == item.ID)
                                {
                                    contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemCollection.ID.ToString().ToUpper() + "US' hidden", @"id='" + itemCollection.ID.ToString().ToUpper() + "US'");
                                    contentHTMLSub = contentHTMLSub.Replace(@"id='" + itemCollection.ID.ToString().ToUpper() + "International' hidden", @"id='" + itemCollection.ID.ToString().ToUpper() + "International'");
                                    collectionList = collectionList + itemCollection.URLCode + ";";
                                }
                            }
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, collectionList, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";" + collectionList);
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Brand");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", tagsHTML.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Brand001);

                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Brand, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Brand + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                    }

                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Style;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Style);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    string styleList = AppGlobal.InitializationString;
                    if (isStyle == true)
                    {
                        foreach (TA.Data.Models.Style item in listStyle)
                        {
                            styleList = styleList + item.URLCode + ";";
                            StringBuilder tagsHTML = new StringBuilder();
                            tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='StyleMenu" + i + "'>");
                            tagsHTML.AppendLine(@"<span style='color:#777777'>Style: &nbsp;</span>");
                            tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                            tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onStyleTagClose(" + i + ")'></i>");
                            tagsHTML.AppendLine(@"</span>");
                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Style + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Style + "_" + item.URLCode;
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(item.ImageURL))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                            }
                            if (!string.IsNullOrEmpty(item.URLImageName))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                            }
                            if (item.IsStory == true)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                            }

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='StyleListSubUS'", @"id='StyleListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconPlusUS'", @"id='StyleListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconMinusUS' hidden", @"id='StyleListIconMinusUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='StyleListSubInternational'", @"id='StyleListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconPlusInternational'", @"id='StyleListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='StyleListIconMinusInternational' hidden", @"id='StyleListIconMinusInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";" + item.URLCode);
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Style");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", tagsHTML.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Style001);

                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Style, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Style + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                    }

                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.LifeStyle;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.LifeStyle);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }

                    if (isLifeStyle == true)
                    {
                        foreach (TA.Data.Models.LifeStyle item in listLifeStyle)
                        {
                            StringBuilder tagsHTML = new StringBuilder();
                            tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='LifeStyleMenu" + i + "'>");
                            tagsHTML.AppendLine(@"<span style='color:#777777'>Life style: &nbsp;</span>");
                            tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                            tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onLifeStyleTagClose(" + i + ")'></i>");
                            tagsHTML.AppendLine(@"</span>");
                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.LifeStyle + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.LifeStyle + "_" + item.URLCode;
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(item.ImageURL))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                            }
                            if (!string.IsNullOrEmpty(item.URLImageName))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                            }
                            if (item.IsStory == true)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                            }

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='LifeStyleListSubUS'", @"id='LifeStyleListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconPlusUS'", @"id='LifeStyleListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconMinusUS' hidden", @"id='LifeStyleListIconMinusUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='LifeStyleListSubInternational'", @"id='LifeStyleListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconPlusInternational'", @"id='LifeStyleListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='LifeStyleListIconMinusInternational' hidden", @"id='LifeStyleListIconMinusInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "International' hidden", @"id='" + item.ID.ToString().ToUpper() + "International'");

                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";" + item.URLCode);
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "LifeStyle");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", tagsHTML.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.LifeStyle001);

                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.LifeStyle, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.LifeStyle + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                    }

                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Shape;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Shape);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    if (isShape == true)
                    {
                        foreach (TA.Data.Models.Shape item in listShape)
                        {
                            StringBuilder tagsHTML = new StringBuilder();
                            tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='ShapeMenu" + i + "'>");
                            tagsHTML.AppendLine(@"<span style='color:#777777'>Shape: &nbsp;</span>");
                            tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                            tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onShapeTagClose(" + i + ")'></i>");
                            tagsHTML.AppendLine(@"</span>");
                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Shape + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Shape + "_" + item.URLCode;
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(item.ImageURL))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.ImageURL);
                            }
                            if (!string.IsNullOrEmpty(item.URLImageName))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", "<img title='" + item.Name + "' alt='" + item.Name + "' src='" + item.URLImageName + "'>");
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[StoryName]", item.Name);
                            }
                            if (item.IsStory == true)
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", AppGlobal.InitializationString);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[IsStory]", "hidden");
                            }

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='ShapeListSubUS'", @"id='ShapeListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconPlusUS'", @"id='ShapeListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconMinusUS' hidden", @"id='ShapeListIconMinusUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='ShapeListSubInternational'", @"id='ShapeListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconPlusInternational'", @"id='ShapeListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='ShapeListIconMinusInternational' hidden", @"id='ShapeListIconMinusInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "' hidden", @"id='" + item.ID.ToString().ToUpper() + "'");

                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";" + item.URLCode);
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Shape");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", tagsHTML.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Shape001);

                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Shape, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Shape + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                    }

                    i = AppGlobal.InitializationNumber;
                    fileName = AppGlobal.InitializationString;
                    physicalPathCreate = AppGlobal.InitializationString;
                    pageTitle = AppGlobal.InitializationString;
                    pageDescription = AppGlobal.InitializationString;
                    pageKeywords = AppGlobal.InitializationString;
                    pageURL = AppGlobal.InitializationString;
                    uRLCheck = AppGlobal.InitializationString;
                    contentHTMLSub = AppGlobal.InitializationString;
                    subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Designer;
                    physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }
                    physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Designer);
                    if (!Directory.Exists(physicalPathCreate))
                    {
                        Directory.CreateDirectory(physicalPathCreate);
                    }

                    if (isDesigner == true)
                    {
                        foreach (TA.Data.Models.Designer item in listDesigner)
                        {
                            if (!string.IsNullOrEmpty(item.ImageIcon))
                            {
                                item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                            }
                            if (!string.IsNullOrEmpty(item.ImageMain))
                            {
                                item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                            }
                            if (!string.IsNullOrEmpty(item.ImageBackground))
                            {
                                item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                            }

                            StringBuilder tagsHTML = new StringBuilder();
                            tagsHTML.AppendLine(@"<span class='productFilter_content_tags_tag' id='DesignerMenu" + i + "'>");
                            tagsHTML.AppendLine(@"<span style='color:#777777'>Designer: &nbsp;</span>");
                            tagsHTML.AppendLine(@"<span>" + item.DisplayName + "</span>");
                            tagsHTML.AppendLine(@"<i title='Close' class='icon-close' onclick='onDesignerTagClose(" + i + ")'></i>");
                            tagsHTML.AppendLine(@"</span>");
                            pageTitle = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Designer + "_" + item.URLCode;
                            listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);
                            listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);

                            listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);
                            listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, item.URLCode, AppGlobal.InitializationString, false, false, false, false);

                            contentHTMLSub = contentHTMLDesigner;
                            if (string.IsNullOrEmpty(item.URLImageMain))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImageMain);
                            }
                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='DesignerListSubUS'", @"id='DesignerListSubUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconPlusUS'", @"id='DesignerListIconPlusUS' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconMinusUS' hidden", @"id='DesignerListIconMinusUS'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "US' hidden", @"id='" + item.ID.ToString().ToUpper() + "US'");

                            contentHTMLSub = contentHTMLSub.Replace(@"hidden id='DesignerListSubInternational'", @"id='DesignerListSubInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconPlusInternational'", @"id='DesignerListIconPlusInternational' hidden");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='DesignerListIconMinusInternational' hidden", @"id='DesignerListIconMinusInternational'");
                            contentHTMLSub = contentHTMLSub.Replace(@"id='" + item.ID.ToString().ToUpper() + "' hidden", @"id='" + item.ID.ToString().ToUpper() + "'");

                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";" + item.URLCode);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Click]", "Designer");
                            contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", tagsHTML.ToString());

                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                            contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.Designer001);

                            string uRLReadMore = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;
                            contentHTMLSub = contentHTMLSub.Replace(@"[DisplayName]", item.DisplayName);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLImageMain]", item.URLImageMain);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLImageBackground]", item.URLImageBackground);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Title001]", item.Title001);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Description]", item.Description);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLReadMore]", uRLReadMore);


                            fileName = item.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Designer, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Designer + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            pageTitle = item.Name + " " + AppGlobal.Infomation;
                            string pageTitleDesigner = item.Name;
                            pageDescription = item.Description;
                            pageKeywords = item.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;
                            string pageURLDesigner = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + item.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Designer + "_" + item.URLCode + AppGlobal.Infomation;
                            contentHTMLSub = contentHTMLDesignerInfomation;
                            if (string.IsNullOrEmpty(item.URLImageMain))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImageMain);
                            }
                            StringBuilder title002 = new StringBuilder();
                            if (!string.IsNullOrEmpty(item.Title002))
                            {
                                title002.AppendLine(@"<div class='content_funiture_care'>" + item.Title002 + "</div>");
                            }
                            StringBuilder descriptionLong = new StringBuilder();
                            if (!string.IsNullOrEmpty(item.DescriptionLong))
                            {
                                descriptionLong.AppendLine(@"<div class='content_funiture_care'>" + item.DescriptionLong + "</div>");
                            }
                            contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                            contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";" + item.URLCode);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitleDesigner]", pageTitleDesigner);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURLDesigner]", pageURLDesigner);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLImageMain]", item.URLImageMain);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DisplayName]", item.DisplayName);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Title001]", item.Title001);
                            contentHTMLSub = contentHTMLSub.Replace(@"[Title002]", title002.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[DescriptionLong]", descriptionLong.ToString());

                            fileName = item.URLCode + "-" + AppGlobal.Infomation + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Designer, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Designer + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }

                            i = i + 1;
                        }
                        string title = "Alexa Hampton";
                        string pageURLSub = "alexa-hampton-page";
                        pageTitle = title;
                        pageDescription = title;
                        pageKeywords = title;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Designer + "/" + pageURLSub + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Designer + "_" + pageURLSub;

                        contentHTMLSub = contentHTMLAlexaHampton;
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", "https://theodorealexander.com/images/alexa-hampton-page.jpg");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);

                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, "alexa-hampton", AppGlobal.InitializationString, false, false, false, false);

                        StringBuilder productFavorites = new StringBuilder();
                        StringBuilder productList = new StringBuilder();
                        foreach (ItemDataTransfer item in listUS)
                        {
                            string url = AppGlobal.DomainURLTEST + AppGlobal.ProductDetail + "/" + item.URLCode + ".html";
                            productFavorites.AppendLine(@"<a href='" + url + "' title='" + item.ProductName + "'>");
                            productFavorites.AppendLine(@"<div class='item'>");
                            productFavorites.AppendLine(@"<img src='" + item.Image + "' alt='" + item.ProductName + "' title='" + item.ProductName + "'>");
                            productFavorites.AppendLine(@"<span>" + item.ProductName + "</span>");
                            productFavorites.AppendLine(@"</div>");
                            productFavorites.AppendLine(@"</a>");

                            productList.AppendLine(@"<div class='_product_item block_flex justify-content-center align-items-center'>");
                            productList.AppendLine(@"<a class='_product_' href='" + url + "'>");
                            productList.AppendLine(@"<div class='_tag'>New</div><img class='block_zoom' src='" + item.Image + "' alt='" + item.ProductName + "' title='" + item.ProductName + "'>");
                            productList.AppendLine(@"<div class='_caption'>");
                            productList.AppendLine(@"<h4>" + item.ProductName + "</h4>");
                            productList.AppendLine(@"<p>" + item.SKU + "</p>");
                            productList.AppendLine(@"</div>");
                            productList.AppendLine(@"</a>");
                            productList.AppendLine(@"</div>");
                        }

                        StringBuilder roomAndUsageList = new StringBuilder();

                        roomAndUsageList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;RoomIds=DBE311AC-8E4F-4A72-BCD0-D60CE0F196D1' title='Bedroom'>");
                        roomAndUsageList.AppendLine(@"<div class='item'>");
                        roomAndUsageList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/slide-4-2.jpeg' title='Bedroom' alt='Bedroom'>");
                        roomAndUsageList.AppendLine(@"<div class='carousel-caption'>");
                        roomAndUsageList.AppendLine(@"<h2>Bedroom</h2>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</a>");

                        roomAndUsageList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;RoomIds=C441230F-C2CE-4744-AAEC-40C0A942D79C' title='Décor'>");
                        roomAndUsageList.AppendLine(@"<div class='item'>");
                        roomAndUsageList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/decord-alx.jpg' title='Décor' alt='Décor'>");
                        roomAndUsageList.AppendLine(@"<div class='carousel-caption'>");
                        roomAndUsageList.AppendLine(@"<h2>Décor</h2>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</a>");

                        roomAndUsageList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;RoomIds=02812CCF-77D7-4C48-92EC-3C1443C1A9B6' title='Dining Room'>");
                        roomAndUsageList.AppendLine(@"<div class='item'>");
                        roomAndUsageList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/dinning-room.jpg' title='Dining Room' alt='Dining Room'>");
                        roomAndUsageList.AppendLine(@"<div class='carousel-caption'>");
                        roomAndUsageList.AppendLine(@"<h2>Dining Room</h2>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</a>");

                        roomAndUsageList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;RoomIds=EE6344A6-D565-4DF1-A77E-DB67F134B210' title='Living Room'>");
                        roomAndUsageList.AppendLine(@"<div class='item'>");
                        roomAndUsageList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/slide-4-3.jpeg' title='Living Room' alt='Living Room'>");
                        roomAndUsageList.AppendLine(@"<div class='carousel-caption'>");
                        roomAndUsageList.AppendLine(@"<h2>Living Room</h2>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</a>");

                        roomAndUsageList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;RoomIds=E3185E73-CB9B-48C4-AFBE-2BFB757B217F' title='Office'>");
                        roomAndUsageList.AppendLine(@"<div class='item'>");
                        roomAndUsageList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/slide-4-1.jpeg' title='Office' alt='Office'>");
                        roomAndUsageList.AppendLine(@"<div class='carousel-caption'>");
                        roomAndUsageList.AppendLine(@"<h2>Office</h2>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</div>");
                        roomAndUsageList.AppendLine(@"</a>");

                        StringBuilder typeList = new StringBuilder();

                        typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;TypeIds=F9BC6A0D-DCEC-4770-A936-F2178F4E1D7D' title='Chairs'>");
                        typeList.AppendLine(@"<div class='item'>");
                        typeList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/new4.jpeg' title='Chairs' alt='Chairs'>");
                        typeList.AppendLine(@"<h2>Chairs</h2>");
                        typeList.AppendLine(@"</div>");
                        typeList.AppendLine(@"</a>");

                        typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;TypeIds=51FF002B-9447-40A7-9663-BDD340CACD46' title='Cocktail Tables'>");
                        typeList.AppendLine(@"<div class='item'>");
                        typeList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/new3.jpeg' title='Cocktail Tables' alt='Cocktail Tables'>");
                        typeList.AppendLine(@"<h2>Cocktail Tables</h2>");
                        typeList.AppendLine(@"</div>");
                        typeList.AppendLine(@"</a>");

                        typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;TypeIds=1A37737A-D388-4B8A-937F-723D57C1FE26' title='Side Tables'>");
                        typeList.AppendLine(@"<div class='item'>");
                        typeList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/new2.jpeg' title='Side Tables' alt='Side Tables'>");
                        typeList.AppendLine(@"<h2>Side Tables</h2>");
                        typeList.AppendLine(@"</div>");
                        typeList.AppendLine(@"</a>");

                        typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + "product-listing;DesignerIds=4F92195A-077E-4B74-BD15-CCEEC5F07024;TypeIds=40B3D638-DD97-4F67-81C3-0697C9A6D169' title='Sofas'>");
                        typeList.AppendLine(@"<div class='item'>");
                        typeList.AppendLine(@"<img src='https://theodorealexander.sirv.com/website/Frontend/Live/assests/landingpage/Alexa-Collection/img/new1.jpeg' title='Sofas & Settees' alt='Sofas'>");
                        typeList.AppendLine(@"<h2>Sofas</h2>");
                        typeList.AppendLine(@"</div>");
                        typeList.AppendLine(@"</a>");

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductFavorites]", productFavorites.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductList]", productList.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomAndUsageList]", roomAndUsageList.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeList]", typeList.ToString());

                        fileName = pageURLSub + AppGlobal.HTMLExtension;

                        ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Designer + "/" + fileName;
                        requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                        requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                        requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                        fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                        requestLIVEFTP.ContentLength = fileContents.Length;
                        using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                        {
                            requestStream.Write(fileContents, 0, fileContents.Length);
                        }
                    }

                    if (isSpecial == true)
                    {
                        i = AppGlobal.InitializationNumber;
                        fileName = AppGlobal.InitializationString;
                        physicalPathCreate = AppGlobal.InitializationString;
                        pageTitle = AppGlobal.InitializationString;
                        pageDescription = AppGlobal.InitializationString;
                        pageKeywords = AppGlobal.InitializationString;
                        pageURL = AppGlobal.InitializationString;
                        uRLCheck = AppGlobal.InitializationString;
                        contentHTMLSub = AppGlobal.InitializationString;
                        subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Special;
                        physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                        if (!Directory.Exists(physicalPathCreate))
                        {
                            Directory.CreateDirectory(physicalPathCreate);
                        }
                        physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Special);
                        if (!Directory.Exists(physicalPathCreate))
                        {
                            Directory.CreateDirectory(physicalPathCreate);
                        }

                        string title = AppGlobal.InStock001;
                        string pageURLSub = AppGlobal.InStock;
                        pageTitle = title;
                        pageDescription = title;
                        pageKeywords = title;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, true, false, false);

                        contentHTMLSub = contentHTMLInStocked;
                        contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                        fileName = pageURLSub + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Special, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Special + "/" + fileName;
                        requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                        requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                        requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                        fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                        requestLIVEFTP.ContentLength = fileContents.Length;
                        using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                        {
                            requestStream.Write(fileContents, 0, fileContents.Length);
                        }

                        title = AppGlobal.CasualLiving001;
                        pageURLSub = AppGlobal.CasualLiving;
                        pageTitle = title;
                        pageDescription = title;
                        pageKeywords = title;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, styleList, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLCasualLiving;
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";" + styleList);
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                        fileName = pageURLSub + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Special, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Special + "/" + fileName;
                        requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                        requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                        requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                        fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                        requestLIVEFTP.ContentLength = fileContents.Length;
                        using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                        {
                            requestStream.Write(fileContents, 0, fileContents.Length);
                        }

                        title = AppGlobal.NewProducts001;
                        pageURLSub = AppGlobal.NewProducts;
                        pageTitle = title;
                        pageDescription = title;
                        pageKeywords = title;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, true);

                        contentHTMLSub = contentHTMLNewProducts;
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                        fileName = pageURLSub + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Special, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Special + "/" + fileName;
                        requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                        requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                        requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                        fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                        requestLIVEFTP.ContentLength = fileContents.Length;
                        using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                        {
                            requestStream.Write(fileContents, 0, fileContents.Length);
                        }

                        title = AppGlobal.CustomPalette001;
                        pageURLSub = AppGlobal.CustomPalette;
                        pageTitle = title;
                        pageDescription = title;
                        pageKeywords = title;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, true, false);

                        contentHTMLSub = contentHTMLCustomPalette;
                        contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductList(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductList(listInternational, AppGlobal.DomainURLTEST));
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                        fileName = pageURLSub + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Special, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Special + "/" + fileName;
                        requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                        requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                        requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                        fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                        requestLIVEFTP.ContentLength = fileContents.Length;
                        using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                        {
                            requestStream.Write(fileContents, 0, fileContents.Length);
                        }

                        title = AppGlobal.TailorFitProgram001;
                        pageURLSub = AppGlobal.TailorFitProgram;
                        pageTitle = title;
                        pageDescription = title;
                        pageKeywords = title;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Special + "_" + pageURLSub;
                        listUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndTailorFitProgramToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndTailorFitProgramToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTMLTailorFitProgram;
                        contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", listUS.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", listInternational.Count.ToString());
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", InitializationHTMLProductListTailorFitProgram(listUS, AppGlobal.DomainURLTEST));
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", InitializationHTMLProductListTailorFitProgram(listInternational, AppGlobal.DomainURLTEST));

                        fileName = pageURLSub + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Special, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Special + "/" + fileName;
                        requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                        requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                        requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                        fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                        requestLIVEFTP.ContentLength = fileContents.Length;
                        using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                        {
                            requestStream.Write(fileContents, 0, fileContents.Length);
                        }

                        title = "Search";
                        pageURLSub = "search";
                        pageTitle = title;
                        pageDescription = title;
                        pageKeywords = title;
                        pageURL = AppGlobal.DomainURLTEST + AppGlobal.Special + "/" + pageURLSub + AppGlobal.HTMLExtension;
                        uRLCheck = AppGlobal.Special + "_" + pageURLSub;

                        listUSMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);
                        listInternationalMenuLeft = _itemRepository.GetItemMenuLeftDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, false, false, false, false);

                        contentHTMLSub = contentHTML;
                        contentHTMLSub = contentHTMLSub.Replace(@"onInitializationProductListData", @"getByQueryString001");
                        contentHTMLSub = contentHTMLSub.Replace(@"<div class=""productFilter_content_tags"" id=""ProductListTags"">", @"<div class=""productFilter_content_tags"" id=""ProductListTags"" hidden>");
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemUSResults]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ItemInternationalResults]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[room_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[brand_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[type_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[shape_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[style_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[lifeStyle_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[collection_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[designer_IDList]", ";");
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                        contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                        contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                        contentHTMLSub = contentHTMLSub.Replace(@"[Click]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[CollectionTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[TypeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[LifeStyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[StyleTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[BrandTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[RoomTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ShapeTagsHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[DesignerTagsHTML]", AppGlobal.InitializationString);

                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsUSHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = contentHTMLSub.Replace(@"[ProductListProductsInternationalHTML]", AppGlobal.InitializationString);
                        contentHTMLSub = InitializationHTMLMenuLeft(listUSMenuLeft, listInternationalMenuLeft, contentHTMLSub, AppGlobal.InitializationString);

                        fileName = pageURLSub + AppGlobal.HTMLExtension;

                        //physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Special, fileName);
                        //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                        //{
                        //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                        //    {
                        //        w.WriteLine(contentHTMLSub);
                        //    }
                        //}

                        ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Special + "/" + fileName;
                        requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                        requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                        requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                        fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                        requestLIVEFTP.ContentLength = fileContents.Length;
                        using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                        {
                            requestStream.Write(fileContents, 0, fileContents.Length);
                        }
                    }

                    if (isProduct == true)
                    {
                        physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Product);
                        if (!Directory.Exists(physicalPathCreate))
                        {
                            Directory.CreateDirectory(physicalPathCreate);
                        }
                        List<ItemDataTransfer> listItemDataTransfer = _itemRepository.GetItemDataTransferByActiveToList();

                        foreach (ItemDataTransfer itemDataTransfer in listItemDataTransfer)
                        {
                            string imageURL = itemDataTransfer.Image;
                            if (string.IsNullOrEmpty(imageURL))
                            {
                                imageURL = itemDataTransfer.ImageSirv;
                            }
                            pageKeywords = itemDataTransfer.METAKeyword;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Product + "/" + itemDataTransfer.URLCode + AppGlobal.HTMLExtension;
                            uRLCheck = AppGlobal.Product + "_" + itemDataTransfer.URLCode;
                            string contentHTMLProductSub = contentHTMLProduct;
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageTitle]", itemDataTransfer.ProductName + " (" + itemDataTransfer.SKU + ")");
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[PageDescription]", itemDataTransfer.Description);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[AdditionalFeatures]", itemDataTransfer.AdditionalFeatures);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[Story]", itemDataTransfer.Story);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[VariationDescription]", itemDataTransfer.VariationDescription);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[ProductImage]", imageURL);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[URLCode]", itemDataTransfer.URLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[RoomAndUsageURLCode]", itemDataTransfer.RoomAndUsageURLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[RoomAndUsageName]", itemDataTransfer.RoomAndUsageName);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[TypeURLCode]", itemDataTransfer.TypeURLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[TypeName]", itemDataTransfer.TypeName);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandURLCode]", itemDataTransfer.BrandURLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandName]", itemDataTransfer.BrandName);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandURLCode]", itemDataTransfer.BrandURLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[BrandName]", itemDataTransfer.BrandName);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[CollectionURLCode]", itemDataTransfer.CollectionURLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[CollectionName]", itemDataTransfer.CollectionName);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[LifeStyleURLCode]", itemDataTransfer.LifeStyleURLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[LifeStyleName]", itemDataTransfer.LifeStyleName);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[StyleURLCode]", itemDataTransfer.StyleURLCode);
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[StyleName]", itemDataTransfer.StyleName);
                            StringBuilder relatedProducts = new StringBuilder();
                            List<Item> listRelatedProducts = _itemRepository.GetByTypeIDAndIDAndRowCountToList(itemDataTransfer.Type_ID.ToString(), itemDataTransfer.ID.ToString(), 4);

                            i = AppGlobal.InitializationNumber;
                            foreach (Item item in listRelatedProducts)
                            {
                                string imageURLRelated = item.Image;
                                if (string.IsNullOrEmpty(imageURLRelated))
                                {
                                    imageURLRelated = item.ImageSirv;
                                }
                                if (i % 4 == 0)
                                {
                                    relatedProducts.AppendLine(@"<div class='product_suggestion_slider row'>");
                                }
                                relatedProducts.AppendLine(@"<div class='col-sm-12 col-md-6 col-xl-3'>");
                                relatedProducts.AppendLine(@"<div class='product_suggestion_slider_item'>");
                                relatedProducts.AppendLine(@"<a title='" + item.ProductName + "' href='" + AppGlobal.DomainURLTEST + "product/" + item.URLCode + ".html' class='product_suggestion_slider_item-a w-100 h-100'>");
                                relatedProducts.AppendLine(@"<img title='" + item.ProductName + "' alt='" + item.ProductName + "' src='" + imageURLRelated + "?scale.option=fill&scale.width=415&scale.height=415' class='product_suggestion_slider_item-img Sirv w-100 h-100'>");
                                relatedProducts.AppendLine(@"</a>");
                                relatedProducts.AppendLine(@"<div class='product_suggestion_slider_item-name'>");
                                relatedProducts.AppendLine(@"<a title='" + item.ProductName + "' href='" + AppGlobal.DomainURLTEST + "product/" + item.URLCode + ".html' class='product_suggestion_slider_item-name-a'>" + item.ProductName + "</a>");
                                relatedProducts.AppendLine(@"</div>");
                                relatedProducts.AppendLine(@"<div class='product_suggestion_slider_item-sku'>");
                                relatedProducts.AppendLine(@"<a title='" + item.ProductName + "' href='" + AppGlobal.DomainURLTEST + "product/" + item.URLCode + ".html' class='product_suggestion_slider_item-name-a'>" + item.SKU + "</a>");
                                relatedProducts.AppendLine(@"</div>");
                                relatedProducts.AppendLine(@"</div>");
                                relatedProducts.AppendLine(@"</div>");
                                if (i % 4 == 3)
                                {
                                    relatedProducts.AppendLine(@"</div>");
                                }
                                i = i + 1;
                            }
                            contentHTMLProductSub = contentHTMLProductSub.Replace(@"[RelatedProducts]", relatedProducts.ToString());
                            fileName = itemDataTransfer.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Product, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLProductSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Product + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLProductSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    result = e.Message;
                }
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationHTMLKeywordPageInLIVE(int rowBegin = 0, int rowEnd = 0)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string ftpUrl = AppGlobal.InitializationString;
                FtpWebRequest requestLIVEFTP;
                byte[] fileContents;


                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.KeywordTemplateLIVE);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }

                contentHTML = contentHTML.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTML = contentHTML.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTML = contentHTML.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTML = contentHTML.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTML = contentHTML.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTML = contentHTML.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTML = contentHTML.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTML = contentHTML.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTML = contentHTML.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                List<Collection> listCollection = _collectionRepository.GetByIsActiveToList(true);
                List<Collection> listCollectionTheodoreAlexanderBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TheodoreAlexanderBrandID, true);
                List<Collection> listCollectionSaloneBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.SaloneBrandID, true);
                List<Collection> listCollectionTAStudioBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TAStudioBrandID, true);
                List<Collection> listCollectionUS = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Collection> listCollectionInternational = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Style> listStyle = _styleRepository.GetByIsActiveToList(true);
                List<Style> listStyleUS = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Style> listStyleInternational = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                List<RoomAndUsage> listRoomAndUsageUS = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<RoomAndUsage> listRoomAndUsageInternational = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Shape> listShape = _shapeRepository.GetByIsActiveToList(true);
                List<Shape> listShapeUS = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Shape> listShapeInternational = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                List<LifeStyle> listLifeStyleUS = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<LifeStyle> listLifeStyleInternational = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<TA.Data.Models.Type> listType = _typeRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Type> listTypeUS = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<TA.Data.Models.Type> listTypeInternational = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Brand> listBrand = _brandRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Designer> listDesigner = _designerRepository.GetByIsActiveToList(true);

                List<ItemDataTransfer> listItemDataTransferExtendingUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);
                List<ItemDataTransfer> listItemDataTransferExtendingInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);

                StringBuilder menuTopBrandTheodoreAlexander = new StringBuilder();
                StringBuilder menuTopBrandSalone = new StringBuilder();
                StringBuilder menuTopBrandTAStudio = new StringBuilder();
                StringBuilder menuTopProduct = new StringBuilder();
                StringBuilder menuTopDesigner = new StringBuilder();
                StringBuilder menuLeftUS = new StringBuilder();
                StringBuilder menuLeftInternational = new StringBuilder();
                StringBuilder menuBrandMobileTheodoreAlexander = new StringBuilder();
                StringBuilder menuBrandMobileSalone = new StringBuilder();
                StringBuilder menuBrandMobileTAStudio = new StringBuilder();
                StringBuilder menuProductMobile = new StringBuilder();
                StringBuilder menuDesignerMobile = new StringBuilder();
                StringBuilder productListProductsUSHTML = new StringBuilder();
                StringBuilder productListProductsInternationalHTML = new StringBuilder();

                int i = 1;
                foreach (Collection item in listCollectionTheodoreAlexanderBrandID)
                {
                    string liHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileTheodoreAlexander.AppendLine(liHTML);
                    if ((i == 1) || (i % 9 == 1))
                    {
                        menuTopBrandTheodoreAlexander.AppendLine("<ul>");
                    }
                    menuTopBrandTheodoreAlexander.AppendLine(liHTML);
                    if (i > 1)
                    {
                        if ((i == listCollectionTheodoreAlexanderBrandID.Count) || (i % 9 == 0))
                        {
                            menuTopBrandTheodoreAlexander.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }

                StringBuilder menuTopBrandTAStudioInternational = new StringBuilder();
                StringBuilder menuTopBrandTAStudioUS = new StringBuilder();
                menuTopBrandTAStudioInternational.AppendLine(@"<div id='MenuTopBrandTAStudioInternational' style='display: flex;'>");
                menuTopBrandTAStudioUS.AppendLine(@"<div id='MenuTopBrandTAStudioUS' style='display: flex;'>");
                i = 1;
                foreach (Collection item in listCollectionTAStudioBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    if (item.ID.ToString().ToUpper() == "461DA43B-0409-4EBD-8EF2-0FB911718678")
                    {
                        liMobileHTML = @"<li id='TAStudioFrenzy" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    if (item.ID.ToString().ToUpper() == "85CFC3ED-8876-436E-8159-B1E1025644C8")
                    {
                        liMobileHTML = @"<li id='TAStudioHolli" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    menuBrandMobileTAStudio.AppendLine(liMobileHTML);
                    if ((i == 1) || (i % 5 == 1))
                    {
                        menuTopBrandTAStudioInternational.AppendLine("<ul style='min-width: 150px;'>");
                        menuTopBrandTAStudioUS.AppendLine("<ul style='min-width: 150px;'>");
                    }
                    menuTopBrandTAStudioInternational.AppendLine(liHTML);
                    if ((item.ID.ToString().ToUpper() != "461DA43B-0409-4EBD-8EF2-0FB911718678") && (item.ID.ToString().ToUpper() != "85CFC3ED-8876-436E-8159-B1E1025644C8"))
                    {
                        menuTopBrandTAStudioUS.AppendLine(liHTML);
                    }
                    if (i > 1)
                    {
                        if ((i == listCollectionTAStudioBrandID.Count) || (i % 5 == 0))
                        {
                            menuTopBrandTAStudioInternational.AppendLine("</ul>");
                            menuTopBrandTAStudioUS.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }
                menuTopBrandTAStudioInternational.AppendLine(@"</div>");
                menuTopBrandTAStudioUS.AppendLine(@"</div>");
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioInternational.ToString());
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioUS.ToString());

                foreach (Collection item in listCollectionSaloneBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileSalone.AppendLine(liMobileHTML);
                    menuTopBrandSalone.AppendLine(liHTML);
                }


                foreach (RoomAndUsage item in listRoomAndUsage)
                {
                    string liMobileHTML = @"<li class='item_left_branch'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuTopProduct.AppendLine(@"<ul>");
                    menuTopProduct.AppendLine(@"<li>");
                    menuTopProduct.AppendLine(@"<h1><a title='" + item.DisplayName.ToUpper() + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension + "'>" + item.DisplayName.ToUpper() + "</a></h1>"); ;
                    menuTopProduct.AppendLine(@"</li>");

                    menuProductMobile.AppendLine(@"<li class='sub-item-mobile'>");
                    menuProductMobile.AppendLine(@"<a onclick='on" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Open + "()' title='" + item.DisplayName.ToUpper() + "'><i id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Icon + "' class='icon-plus'></i>" + item.DisplayName.ToUpper() + "</a>");
                    menuProductMobile.AppendLine(@"<ul id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + "Mobile' hidden>");


                    foreach (TA.Data.Models.Type itemType in listType)
                    {
                        string liHTML = @"<li><a title='" + itemType.DisplayName + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + @"/" + itemType.URLCode + AppGlobal.HTMLExtension + "'>" + itemType.DisplayName + "</a></li>";
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuTopProduct.AppendLine(liHTML);
                            menuProductMobile.AppendLine(liHTML);
                        }
                    }

                    menuTopProduct.AppendLine(@"</ul>");

                    menuProductMobile.AppendLine(@"</ul>");
                    menuProductMobile.AppendLine(@"<li>");
                }

                foreach (Designer item in listDesigner)
                {
                    if (!string.IsNullOrEmpty(item.ImageIcon))
                    {
                        item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                    }
                    if (!string.IsNullOrEmpty(item.ImageMain))
                    {
                        item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                    }
                    if (!string.IsNullOrEmpty(item.ImageBackground))
                    {
                        item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                    }
                    StringBuilder liHTML = new StringBuilder();
                    liHTML.AppendLine(@"<ul>");
                    liHTML.AppendLine(@"<li class='icon_designer_optimize'>");
                    liHTML.AppendLine(@"<div class='image'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>");
                    liHTML.AppendLine(@"<img src='" + item.URLImageIcon + "' title='" + item.DisplayName + "' alt='" + item.DisplayName + "' />");
                    liHTML.AppendLine(@"</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"<div class='title_menu_designer'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"</li>");
                    liHTML.AppendLine(@"</ul>");
                    string liMobileHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuDesignerMobile.AppendLine(liMobileHTML);
                    menuTopDesigner.AppendLine(liHTML.ToString());
                }

                contentHTML = contentHTML.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTML = contentHTML.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTML = contentHTML.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                i = AppGlobal.InitializationNumber;
                string fileName = AppGlobal.InitializationString;
                string physicalPathCreate = AppGlobal.InitializationString;
                string pageTitle = AppGlobal.InitializationString;
                string pageDescription = AppGlobal.InitializationString;
                string pageKeywords = AppGlobal.InitializationString;
                string pageURL = AppGlobal.InitializationString;
                string uRLCheck = AppGlobal.InitializationString;
                string contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Article;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Article);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                List<SEOBlog> listSEOBlog = _sEOBlogRepository.GetByActiveToList(true);

                if (rowEnd == 0)
                {
                    rowEnd = listSEOBlog.Count;
                }
                if (rowEnd > listSEOBlog.Count)
                {
                    rowEnd = listSEOBlog.Count;
                }
                for (int row = rowBegin; row < rowEnd; row++)
                {
                    SEOBlog item = listSEOBlog[row];
                    uRLCheck = AppGlobal.Article + "_" + item.URLCode;
                    pageURL = AppGlobal.DomainURLTEST + AppGlobal.Article + "/" + item.URLCode + ".html";
                    pageTitle = item.Title;
                    pageDescription = item.Description;
                    pageKeywords = item.METAKeyword;
                    StringBuilder storeList = new StringBuilder();
                    StringBuilder typeList = new StringBuilder();
                    StringBuilder productList = new StringBuilder();

                    List<SEOBlogStore> listSEOBlogStore = _sEOBlogStoreRepository.GetByParentIDToList(item.ID);
                    List<SEOBlogType> listSEOBlogType = _sEOBlogTypeRepository.GetByParentIDToList(item.ID);
                    List<SEOBlogItem> listSEOBlogItem = _sEOBlogItemRepository.GetByParentIDToList(item.ID);

                    foreach (SEOBlogStore itemSEOBlogStore in listSEOBlogStore)
                    {
                        storeList.AppendLine(@"<li>");
                        storeList.AppendLine(@"<div><b style='font-size: 18px;'>" + itemSEOBlogStore.Title + "</b><div>");
                        storeList.AppendLine(@"<div>Phone: <a href='tel:" + itemSEOBlogStore.Phone + "' title='" + itemSEOBlogStore.Phone + "'>" + itemSEOBlogStore.Phone + "</a><div>");
                        storeList.AppendLine(@"<div>Email: <a href='mailto:" + itemSEOBlogStore.Email + "' title='" + itemSEOBlogStore.Email + "'>" + itemSEOBlogStore.Email + "</a><div>");
                        storeList.AppendLine(@"<div>Website: <a target='_blank' href='//" + itemSEOBlogStore.Website + "' title='" + itemSEOBlogStore.Website + "'>" + itemSEOBlogStore.Website + "</a><div>");
                        storeList.AppendLine(@"<div>Address: <a target='_blank' href='https://www.google.com/maps/place/" + itemSEOBlogStore.Address + "' title='" + itemSEOBlogStore.Address + "'>" + itemSEOBlogStore.Address + "</a><div>");
                        storeList.AppendLine(@"</li>");
                    }
                    foreach (SEOBlogType itemSEOBlogType in listSEOBlogType)
                    {
                        typeList.AppendLine(@"<li>");
                        typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + "/" + itemSEOBlogType.Code + ".html' title='" + itemSEOBlogType.Title + "'>" + itemSEOBlogType.Title + "</a>");
                        typeList.AppendLine(@"</li>");
                    }
                    foreach (SEOBlogItem itemSEOBlogItem in listSEOBlogItem)
                    {
                        productList.AppendLine(@"<div class='item_content img_catalog'>");
                        productList.AppendLine(@"<a title='" + itemSEOBlogItem.Title + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Product + "/" + itemSEOBlogItem.Code + ".html'>");
                        productList.AppendLine(@"<div class='image'>");
                        productList.AppendLine(@"<img title='" + itemSEOBlogItem.Title + "' alt='" + itemSEOBlogItem.Title + "' src='" + itemSEOBlogItem.Image + "?w=300&h=300'>");
                        productList.AppendLine(@"</div>");
                        productList.AppendLine(@"<span>" + itemSEOBlogItem.Title + "</span>");
                        productList.AppendLine(@"</a>");
                        productList.AppendLine(@"</div>");
                    }
                    contentHTMLSub = contentHTML;
                    if (string.IsNullOrEmpty(item.URLImage))
                    {
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    }
                    else
                    {
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImage);
                    }
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[SEOBlogTemplateContent]", item.SEOBlogTemplateContent);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerName]", item.DesignerName);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerContent]", item.DesignerContent);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RegionName]", item.RegionName);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CountryName]", item.CountryName);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StoreList]", storeList.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeList]", typeList.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductList]", productList.ToString());
                    fileName = item.URLCode + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Article, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Article + "/" + fileName;
                    requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                    requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                    requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                    fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                    requestLIVEFTP.ContentLength = fileContents.Length;
                    using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                    {
                        requestStream.Write(fileContents, 0, fileContents.Length);
                    }
                    i = i + 1;
                }
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationHTMLKeywordPageByKeywordIDAndCountryIDAndRowBeginAndRowEndInLIVE(int sEOKeywordID, string countryID, int rowBegin = 0, int rowEnd = 0)
        {
            string result = AppGlobal.InitializationString;

            string ftpUrl = AppGlobal.InitializationString;
            FtpWebRequest requestLIVEFTP;
            byte[] fileContents;


            string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
            string contentHTML = AppGlobal.InitializationString;
            var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.KeywordTemplateLIVE);
            using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
            {
                using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                {
                    contentHTML = r.ReadToEnd();
                }
            }

            contentHTML = contentHTML.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
            contentHTML = contentHTML.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
            contentHTML = contentHTML.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
            contentHTML = contentHTML.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
            contentHTML = contentHTML.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
            contentHTML = contentHTML.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
            contentHTML = contentHTML.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
            contentHTML = contentHTML.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
            contentHTML = contentHTML.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
            contentHTML = contentHTML.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
            contentHTML = contentHTML.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

            List<Collection> listCollection = new List<Collection>();
            List<Collection> listCollectionTheodoreAlexanderBrandID = new List<Collection>();
            List<Collection> listCollectionSaloneBrandID = new List<Collection>();
            List<Collection> listCollectionTAStudioBrandID = new List<Collection>();
            List<Collection> listCollectionUS = new List<Collection>();
            List<Collection> listCollectionInternational = new List<Collection>();
            List<Style> listStyle = new List<Style>();
            List<Style> listStyleUS = new List<Style>();
            List<Style> listStyleInternational = new List<Style>();
            List<RoomAndUsage> listRoomAndUsage = new List<RoomAndUsage>();
            List<RoomAndUsage> listRoomAndUsageUS = new List<RoomAndUsage>();
            List<RoomAndUsage> listRoomAndUsageInternational = new List<RoomAndUsage>();
            List<Shape> listShape = new List<Shape>();
            List<Shape> listShapeUS = new List<Shape>();
            List<Shape> listShapeInternational = new List<Shape>();
            List<LifeStyle> listLifeStyle = new List<LifeStyle>();
            List<LifeStyle> listLifeStyleUS = new List<LifeStyle>();
            List<LifeStyle> listLifeStyleInternational = new List<LifeStyle>();
            List<TA.Data.Models.Type> listType = new List<TA.Data.Models.Type>();
            List<TA.Data.Models.Type> listTypeUS = new List<TA.Data.Models.Type>();
            List<TA.Data.Models.Type> listTypeInternational = new List<TA.Data.Models.Type>();
            List<Brand> listBrand = new List<Brand>();
            List<TA.Data.Models.Designer> listDesigner = new List<Designer>();

            try
            {
                listCollection = _collectionRepository.GetByIsActiveToList(true);
                listCollectionTheodoreAlexanderBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TheodoreAlexanderBrandID, true);
                listCollectionSaloneBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.SaloneBrandID, true);
                listCollectionTAStudioBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TAStudioBrandID, true);
                listCollectionUS = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                listCollectionInternational = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                listStyle = _styleRepository.GetByIsActiveToList(true);
                listStyleUS = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                listStyleInternational = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                listRoomAndUsageUS = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                listRoomAndUsageInternational = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                listShape = _shapeRepository.GetByIsActiveToList(true);
                listShapeUS = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                listShapeInternational = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                listLifeStyleUS = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                listLifeStyleInternational = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                listType = _typeRepository.GetByIsActiveToList(true);
                listTypeUS = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                listTypeInternational = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                listBrand = _brandRepository.GetByIsActiveToList(true);
                listDesigner = _designerRepository.GetByIsActiveToList(true);
            }
            catch
            {
                result = "10";
            }

            StringBuilder menuTopBrandTheodoreAlexander = new StringBuilder();
            StringBuilder menuTopBrandSalone = new StringBuilder();
            StringBuilder menuTopBrandTAStudio = new StringBuilder();
            StringBuilder menuTopProduct = new StringBuilder();
            StringBuilder menuTopDesigner = new StringBuilder();
            StringBuilder menuLeftUS = new StringBuilder();
            StringBuilder menuLeftInternational = new StringBuilder();
            StringBuilder menuBrandMobileTheodoreAlexander = new StringBuilder();
            StringBuilder menuBrandMobileSalone = new StringBuilder();
            StringBuilder menuBrandMobileTAStudio = new StringBuilder();
            StringBuilder menuProductMobile = new StringBuilder();
            StringBuilder menuDesignerMobile = new StringBuilder();
            StringBuilder productListProductsUSHTML = new StringBuilder();
            StringBuilder productListProductsInternationalHTML = new StringBuilder();

            int i = 1;
            foreach (Collection item in listCollectionTheodoreAlexanderBrandID)
            {
                string liHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                menuBrandMobileTheodoreAlexander.AppendLine(liHTML);
                if ((i == 1) || (i % 9 == 1))
                {
                    menuTopBrandTheodoreAlexander.AppendLine("<ul>");
                }
                menuTopBrandTheodoreAlexander.AppendLine(liHTML);
                if (i > 1)
                {
                    if ((i == listCollectionTheodoreAlexanderBrandID.Count) || (i % 9 == 0))
                    {
                        menuTopBrandTheodoreAlexander.AppendLine("</ul>");
                    }
                }
                i = i + 1;
            }

            StringBuilder menuTopBrandTAStudioInternational = new StringBuilder();
            StringBuilder menuTopBrandTAStudioUS = new StringBuilder();
            menuTopBrandTAStudioInternational.AppendLine(@"<div id='MenuTopBrandTAStudioInternational' style='display: flex;'>");
            menuTopBrandTAStudioUS.AppendLine(@"<div id='MenuTopBrandTAStudioUS' style='display: flex;'>");
            i = 1;
            foreach (Collection item in listCollectionTAStudioBrandID)
            {
                string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                if (item.ID.ToString().ToUpper() == "461DA43B-0409-4EBD-8EF2-0FB911718678")
                {
                    liMobileHTML = @"<li id='TAStudioFrenzy" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                }
                if (item.ID.ToString().ToUpper() == "85CFC3ED-8876-436E-8159-B1E1025644C8")
                {
                    liMobileHTML = @"<li id='TAStudioHolli" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                }
                menuBrandMobileTAStudio.AppendLine(liMobileHTML);
                if ((i == 1) || (i % 5 == 1))
                {
                    menuTopBrandTAStudioInternational.AppendLine("<ul style='min-width: 150px;'>");
                    menuTopBrandTAStudioUS.AppendLine("<ul style='min-width: 150px;'>");
                }
                menuTopBrandTAStudioInternational.AppendLine(liHTML);
                if ((item.ID.ToString().ToUpper() != "461DA43B-0409-4EBD-8EF2-0FB911718678") && (item.ID.ToString().ToUpper() != "85CFC3ED-8876-436E-8159-B1E1025644C8"))
                {
                    menuTopBrandTAStudioUS.AppendLine(liHTML);
                }
                if (i > 1)
                {
                    if ((i == listCollectionTAStudioBrandID.Count) || (i % 5 == 0))
                    {
                        menuTopBrandTAStudioInternational.AppendLine("</ul>");
                        menuTopBrandTAStudioUS.AppendLine("</ul>");
                    }
                }
                i = i + 1;
            }
            menuTopBrandTAStudioInternational.AppendLine(@"</div>");
            menuTopBrandTAStudioUS.AppendLine(@"</div>");
            menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioInternational.ToString());
            menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioUS.ToString());

            foreach (Collection item in listCollectionSaloneBrandID)
            {
                string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                menuBrandMobileSalone.AppendLine(liMobileHTML);
                menuTopBrandSalone.AppendLine(liHTML);
            }


            foreach (RoomAndUsage item in listRoomAndUsage)
            {
                string liMobileHTML = @"<li class='item_left_branch'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                menuTopProduct.AppendLine(@"<ul>");
                menuTopProduct.AppendLine(@"<li>");
                menuTopProduct.AppendLine(@"<h1><a title='" + item.DisplayName.ToUpper() + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension + "'>" + item.DisplayName.ToUpper() + "</a></h1>"); ;
                menuTopProduct.AppendLine(@"</li>");

                menuProductMobile.AppendLine(@"<li class='sub-item-mobile'>");
                menuProductMobile.AppendLine(@"<a onclick='on" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Open + "()' title='" + item.DisplayName.ToUpper() + "'><i id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Icon + "' class='icon-plus'></i>" + item.DisplayName.ToUpper() + "</a>");
                menuProductMobile.AppendLine(@"<ul id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + "Mobile' hidden>");


                foreach (TA.Data.Models.Type itemType in listType)
                {
                    string liHTML = @"<li><a title='" + itemType.DisplayName + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + @"/" + itemType.URLCode + AppGlobal.HTMLExtension + "'>" + itemType.DisplayName + "</a></li>";
                    if (itemType.RoomAndUsage_ID == item.ID)
                    {
                        menuTopProduct.AppendLine(liHTML);
                        menuProductMobile.AppendLine(liHTML);
                    }
                }

                menuTopProduct.AppendLine(@"</ul>");

                menuProductMobile.AppendLine(@"</ul>");
                menuProductMobile.AppendLine(@"<li>");
            }

            foreach (Designer item in listDesigner)
            {
                if (!string.IsNullOrEmpty(item.ImageIcon))
                {
                    item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                }
                if (!string.IsNullOrEmpty(item.ImageMain))
                {
                    item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                }
                if (!string.IsNullOrEmpty(item.ImageBackground))
                {
                    item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                }
                StringBuilder liHTML = new StringBuilder();
                liHTML.AppendLine(@"<ul>");
                liHTML.AppendLine(@"<li class='icon_designer_optimize'>");
                liHTML.AppendLine(@"<div class='image'>");
                liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>");
                liHTML.AppendLine(@"<img src='" + item.URLImageIcon + "' title='" + item.DisplayName + "' alt='" + item.DisplayName + "' />");
                liHTML.AppendLine(@"</a>");
                liHTML.AppendLine(@"</div>");
                liHTML.AppendLine(@"<div class='title_menu_designer'>");
                liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a>");
                liHTML.AppendLine(@"</div>");
                liHTML.AppendLine(@"</li>");
                liHTML.AppendLine(@"</ul>");
                string liMobileHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                menuDesignerMobile.AppendLine(liMobileHTML);
                menuTopDesigner.AppendLine(liHTML.ToString());
            }

            contentHTML = contentHTML.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
            contentHTML = contentHTML.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
            contentHTML = contentHTML.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
            contentHTML = contentHTML.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
            contentHTML = contentHTML.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
            contentHTML = contentHTML.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
            contentHTML = contentHTML.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
            contentHTML = contentHTML.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
            contentHTML = contentHTML.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
            contentHTML = contentHTML.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
            contentHTML = contentHTML.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

            i = AppGlobal.InitializationNumber;
            string fileName = AppGlobal.InitializationString;
            string physicalPathCreate = AppGlobal.InitializationString;
            string pageTitle = AppGlobal.InitializationString;
            string pageDescription = AppGlobal.InitializationString;
            string pageKeywords = AppGlobal.InitializationString;
            string pageURL = AppGlobal.InitializationString;
            string uRLCheck = AppGlobal.InitializationString;
            string contentHTMLSub = AppGlobal.InitializationString;
            subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Article;
            physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
            if (!Directory.Exists(physicalPathCreate))
            {
                Directory.CreateDirectory(physicalPathCreate);
            }

            physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Article);
            if (!Directory.Exists(physicalPathCreate))
            {
                Directory.CreateDirectory(physicalPathCreate);
            }
            List<SEOBlog> listSEOBlog = new List<SEOBlog>();
            try
            {
                listSEOBlog = _sEOBlogRepository.GetByKeywordIDAndCountryIDAndActiveAndRowBeginAndRowEndToList(sEOKeywordID, countryID, true, rowBegin, rowEnd);
            }
            catch
            {
                result = "100";
            }
            foreach (SEOBlog item in listSEOBlog)
            {
                uRLCheck = AppGlobal.Article + "_" + item.URLCode;
                pageURL = AppGlobal.DomainURLTEST + AppGlobal.Article + "/" + item.URLCode + ".html";
                pageTitle = item.Title;
                pageDescription = item.Description;
                pageKeywords = item.METAKeyword;
                StringBuilder storeList = new StringBuilder();
                StringBuilder typeList = new StringBuilder();
                StringBuilder productList = new StringBuilder();

                List<SEOBlogStore> listSEOBlogStore = new List<SEOBlogStore>();
                List<SEOBlogType> listSEOBlogType = new List<SEOBlogType>();
                List<SEOBlogItem> listSEOBlogItem = new List<SEOBlogItem>();
                try
                {
                    listSEOBlogStore = _sEOBlogStoreRepository.GetByParentIDToList(item.ID);
                }
                catch
                {
                    result = "1000";
                }
                //try
                //{
                //    listSEOBlogType = _sEOBlogTypeRepository.GetByParentIDToList(item.ID);
                //}
                //catch
                //{
                //    result = "10000";
                //}
                //try
                //{
                //    listSEOBlogItem = _sEOBlogItemRepository.GetByParentIDToList(item.ID);
                //}
                //catch
                //{
                //    result = "100000";
                //}               

                foreach (SEOBlogStore itemSEOBlogStore in listSEOBlogStore)
                {
                    storeList.AppendLine(@"<li>");
                    storeList.AppendLine(@"<div><b style='font-size: 18px;'>" + itemSEOBlogStore.Title + "</b><div>");
                    storeList.AppendLine(@"<div>Phone: <a href='tel:" + itemSEOBlogStore.Phone + "' title='" + itemSEOBlogStore.Phone + "'>" + itemSEOBlogStore.Phone + "</a><div>");
                    storeList.AppendLine(@"<div>Email: <a href='mailto:" + itemSEOBlogStore.Email + "' title='" + itemSEOBlogStore.Email + "'>" + itemSEOBlogStore.Email + "</a><div>");
                    storeList.AppendLine(@"<div>Website: <a target='_blank' href='//" + itemSEOBlogStore.Website + "' title='" + itemSEOBlogStore.Website + "'>" + itemSEOBlogStore.Website + "</a><div>");
                    storeList.AppendLine(@"<div>Address: <a target='_blank' href='https://www.google.com/maps/place/" + itemSEOBlogStore.Address + "' title='" + itemSEOBlogStore.Address + "'>" + itemSEOBlogStore.Address + "</a><div>");
                    storeList.AppendLine(@"</li>");
                }
                foreach (SEOBlogType itemSEOBlogType in listSEOBlogType)
                {
                    typeList.AppendLine(@"<li>");
                    typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + "/" + itemSEOBlogType.Code + ".html' title='" + itemSEOBlogType.Title + "'>" + itemSEOBlogType.Title + "</a>");
                    typeList.AppendLine(@"</li>");
                }
                foreach (TA.Data.Models.Type type in listType)
                {
                    typeList.AppendLine(@"<li>");
                    typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + "/" + type.URLCode + ".html' title='" + type.DisplayName + "'>" + type.DisplayName + "</a>");
                    typeList.AppendLine(@"</li>");
                }
                foreach (SEOBlogItem itemSEOBlogItem in listSEOBlogItem)
                {
                    productList.AppendLine(@"<div class='item_content img_catalog'>");
                    productList.AppendLine(@"<a title='" + itemSEOBlogItem.Title + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Product + "/" + itemSEOBlogItem.Code + ".html'>");
                    productList.AppendLine(@"<div class='image'>");
                    productList.AppendLine(@"<img title='" + itemSEOBlogItem.Title + "' alt='" + itemSEOBlogItem.Title + "' src='" + itemSEOBlogItem.Image + "?w=300&h=300'>");
                    productList.AppendLine(@"</div>");
                    productList.AppendLine(@"<span>" + itemSEOBlogItem.Title + "</span>");
                    productList.AppendLine(@"</a>");
                    productList.AppendLine(@"</div>");
                }
                contentHTMLSub = contentHTML;
                if (string.IsNullOrEmpty(item.URLImage))
                {
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                }
                else
                {
                    contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", item.URLImage);
                }
                contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                contentHTMLSub = contentHTMLSub.Replace(@"[SEOBlogTemplateContent]", item.SEOBlogTemplateContent);
                contentHTMLSub = contentHTMLSub.Replace(@"[DesignerName]", item.DesignerName);
                contentHTMLSub = contentHTMLSub.Replace(@"[DesignerContent]", item.DesignerContent);
                contentHTMLSub = contentHTMLSub.Replace(@"[RegionName]", item.RegionName);
                contentHTMLSub = contentHTMLSub.Replace(@"[CountryName]", item.CountryName);
                contentHTMLSub = contentHTMLSub.Replace(@"[StoreList]", storeList.ToString());
                contentHTMLSub = contentHTMLSub.Replace(@"[TypeList]", typeList.ToString());
                contentHTMLSub = contentHTMLSub.Replace(@"[ProductList]", productList.ToString());
                fileName = item.URLCode + AppGlobal.HTMLExtension;


                ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Article + "/" + fileName;
                requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                requestLIVEFTP.ContentLength = fileContents.Length;
                using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                {
                    requestStream.Write(fileContents, 0, fileContents.Length);
                }
                i = i + 1;
            }

            return Json(result);
        }
        [HttpGet]
        public JsonResult InitializationHTMLKeywordPageInLIVEByURLCode(string URLCode)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string ftpUrl = AppGlobal.InitializationString;
                FtpWebRequest requestLIVEFTP;
                byte[] fileContents;


                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.KeywordTemplateLIVE);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }

                contentHTML = contentHTML.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTML = contentHTML.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTML = contentHTML.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTML = contentHTML.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTML = contentHTML.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTML = contentHTML.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTML = contentHTML.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTML = contentHTML.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTML = contentHTML.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                List<Collection> listCollection = _collectionRepository.GetByIsActiveToList(true);
                List<Collection> listCollectionTheodoreAlexanderBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TheodoreAlexanderBrandID, true);
                List<Collection> listCollectionSaloneBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.SaloneBrandID, true);
                List<Collection> listCollectionTAStudioBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TAStudioBrandID, true);
                List<Collection> listCollectionUS = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Collection> listCollectionInternational = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Style> listStyle = _styleRepository.GetByIsActiveToList(true);
                List<Style> listStyleUS = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Style> listStyleInternational = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                List<RoomAndUsage> listRoomAndUsageUS = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<RoomAndUsage> listRoomAndUsageInternational = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Shape> listShape = _shapeRepository.GetByIsActiveToList(true);
                List<Shape> listShapeUS = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Shape> listShapeInternational = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                List<LifeStyle> listLifeStyleUS = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<LifeStyle> listLifeStyleInternational = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<TA.Data.Models.Type> listType = _typeRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Type> listTypeUS = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<TA.Data.Models.Type> listTypeInternational = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Brand> listBrand = _brandRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Designer> listDesigner = _designerRepository.GetByIsActiveToList(true);

                List<ItemDataTransfer> listItemDataTransferExtendingUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);
                List<ItemDataTransfer> listItemDataTransferExtendingInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);

                StringBuilder menuTopBrandTheodoreAlexander = new StringBuilder();
                StringBuilder menuTopBrandSalone = new StringBuilder();
                StringBuilder menuTopBrandTAStudio = new StringBuilder();
                StringBuilder menuTopProduct = new StringBuilder();
                StringBuilder menuTopDesigner = new StringBuilder();
                StringBuilder menuLeftUS = new StringBuilder();
                StringBuilder menuLeftInternational = new StringBuilder();
                StringBuilder menuBrandMobileTheodoreAlexander = new StringBuilder();
                StringBuilder menuBrandMobileSalone = new StringBuilder();
                StringBuilder menuBrandMobileTAStudio = new StringBuilder();
                StringBuilder menuProductMobile = new StringBuilder();
                StringBuilder menuDesignerMobile = new StringBuilder();
                StringBuilder productListProductsUSHTML = new StringBuilder();
                StringBuilder productListProductsInternationalHTML = new StringBuilder();

                int i = 1;
                foreach (Collection item in listCollectionTheodoreAlexanderBrandID)
                {
                    string liHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileTheodoreAlexander.AppendLine(liHTML);
                    if ((i == 1) || (i % 9 == 1))
                    {
                        menuTopBrandTheodoreAlexander.AppendLine("<ul>");
                    }
                    menuTopBrandTheodoreAlexander.AppendLine(liHTML);
                    if (i > 1)
                    {
                        if ((i == listCollectionTheodoreAlexanderBrandID.Count) || (i % 9 == 0))
                        {
                            menuTopBrandTheodoreAlexander.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }

                StringBuilder menuTopBrandTAStudioInternational = new StringBuilder();
                StringBuilder menuTopBrandTAStudioUS = new StringBuilder();
                menuTopBrandTAStudioInternational.AppendLine(@"<div id='MenuTopBrandTAStudioInternational' style='display: flex;'>");
                menuTopBrandTAStudioUS.AppendLine(@"<div id='MenuTopBrandTAStudioUS' style='display: flex;'>");
                i = 1;
                foreach (Collection item in listCollectionTAStudioBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    if (item.ID.ToString().ToUpper() == "461DA43B-0409-4EBD-8EF2-0FB911718678")
                    {
                        liMobileHTML = @"<li id='TAStudioFrenzy" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    if (item.ID.ToString().ToUpper() == "85CFC3ED-8876-436E-8159-B1E1025644C8")
                    {
                        liMobileHTML = @"<li id='TAStudioHolli" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    menuBrandMobileTAStudio.AppendLine(liMobileHTML);
                    if ((i == 1) || (i % 5 == 1))
                    {
                        menuTopBrandTAStudioInternational.AppendLine("<ul style='min-width: 150px;'>");
                        menuTopBrandTAStudioUS.AppendLine("<ul style='min-width: 150px;'>");
                    }
                    menuTopBrandTAStudioInternational.AppendLine(liHTML);
                    if ((item.ID.ToString().ToUpper() != "461DA43B-0409-4EBD-8EF2-0FB911718678") && (item.ID.ToString().ToUpper() != "85CFC3ED-8876-436E-8159-B1E1025644C8"))
                    {
                        menuTopBrandTAStudioUS.AppendLine(liHTML);
                    }
                    if (i > 1)
                    {
                        if ((i == listCollectionTAStudioBrandID.Count) || (i % 5 == 0))
                        {
                            menuTopBrandTAStudioInternational.AppendLine("</ul>");
                            menuTopBrandTAStudioUS.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }
                menuTopBrandTAStudioInternational.AppendLine(@"</div>");
                menuTopBrandTAStudioUS.AppendLine(@"</div>");
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioInternational.ToString());
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioUS.ToString());

                foreach (Collection item in listCollectionSaloneBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileSalone.AppendLine(liMobileHTML);
                    menuTopBrandSalone.AppendLine(liHTML);
                }


                foreach (RoomAndUsage item in listRoomAndUsage)
                {
                    string liMobileHTML = @"<li class='item_left_branch'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuTopProduct.AppendLine(@"<ul>");
                    menuTopProduct.AppendLine(@"<li>");
                    menuTopProduct.AppendLine(@"<h1><a title='" + item.DisplayName.ToUpper() + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension + "'>" + item.DisplayName.ToUpper() + "</a></h1>"); ;
                    menuTopProduct.AppendLine(@"</li>");

                    menuProductMobile.AppendLine(@"<li class='sub-item-mobile'>");
                    menuProductMobile.AppendLine(@"<a onclick='on" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Open + "()' title='" + item.DisplayName.ToUpper() + "'><i id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Icon + "' class='icon-plus'></i>" + item.DisplayName.ToUpper() + "</a>");
                    menuProductMobile.AppendLine(@"<ul id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + "Mobile' hidden>");


                    foreach (TA.Data.Models.Type itemType in listType)
                    {
                        string liHTML = @"<li><a title='" + itemType.DisplayName + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + @"/" + itemType.URLCode + AppGlobal.HTMLExtension + "'>" + itemType.DisplayName + "</a></li>";
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuTopProduct.AppendLine(liHTML);
                            menuProductMobile.AppendLine(liHTML);
                        }
                    }

                    menuTopProduct.AppendLine(@"</ul>");

                    menuProductMobile.AppendLine(@"</ul>");
                    menuProductMobile.AppendLine(@"<li>");
                }

                foreach (Designer item in listDesigner)
                {
                    if (!string.IsNullOrEmpty(item.ImageIcon))
                    {
                        item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                    }
                    if (!string.IsNullOrEmpty(item.ImageMain))
                    {
                        item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                    }
                    if (!string.IsNullOrEmpty(item.ImageBackground))
                    {
                        item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                    }
                    StringBuilder liHTML = new StringBuilder();
                    liHTML.AppendLine(@"<ul>");
                    liHTML.AppendLine(@"<li class='icon_designer_optimize'>");
                    liHTML.AppendLine(@"<div class='image'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>");
                    liHTML.AppendLine(@"<img src='" + item.URLImageIcon + "' title='" + item.DisplayName + "' alt='" + item.DisplayName + "' />");
                    liHTML.AppendLine(@"</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"<div class='title_menu_designer'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"</li>");
                    liHTML.AppendLine(@"</ul>");
                    string liMobileHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuDesignerMobile.AppendLine(liMobileHTML);
                    menuTopDesigner.AppendLine(liHTML.ToString());
                }

                contentHTML = contentHTML.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTML = contentHTML.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTML = contentHTML.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                i = AppGlobal.InitializationNumber;
                string fileName = AppGlobal.InitializationString;
                string physicalPathCreate = AppGlobal.InitializationString;
                string pageTitle = AppGlobal.InitializationString;
                string pageDescription = AppGlobal.InitializationString;
                string pageKeywords = AppGlobal.InitializationString;
                string pageURL = AppGlobal.InitializationString;
                string uRLCheck = AppGlobal.InitializationString;
                string contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Article;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Article);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                URLCode = URLCode.Split('/')[URLCode.Split('/').Length - 1];
                URLCode = URLCode.Split('.')[0];

                SEOBlog itemSEOBlog = _sEOBlogRepository.GetByURLCode(URLCode);
                if (itemSEOBlog.ID > 0)
                {
                    uRLCheck = AppGlobal.Article + "_" + itemSEOBlog.URLCode;
                    pageURL = AppGlobal.DomainURLTEST + AppGlobal.Article + "/" + itemSEOBlog.URLCode + ".html";
                    pageTitle = itemSEOBlog.Title;
                    pageDescription = itemSEOBlog.Description;
                    pageKeywords = itemSEOBlog.METAKeyword;
                    StringBuilder storeList = new StringBuilder();
                    StringBuilder typeList = new StringBuilder();
                    StringBuilder productList = new StringBuilder();

                    List<SEOBlogStore> listSEOBlogStore = _sEOBlogStoreRepository.GetByParentIDToList(itemSEOBlog.ID);
                    List<SEOBlogType> listSEOBlogType = _sEOBlogTypeRepository.GetByParentIDToList(itemSEOBlog.ID);
                    List<SEOBlogItem> listSEOBlogItem = _sEOBlogItemRepository.GetByParentIDToList(itemSEOBlog.ID);

                    foreach (SEOBlogStore itemSEOBlogStore in listSEOBlogStore)
                    {
                        storeList.AppendLine(@"<li>");
                        storeList.AppendLine(@"<div><b style='font-size: 18px;'>" + itemSEOBlogStore.Title + "</b><div>");
                        storeList.AppendLine(@"<div>Phone: <a href='tel:" + itemSEOBlogStore.Phone + "' title='" + itemSEOBlogStore.Phone + "'>" + itemSEOBlogStore.Phone + "</a><div>");
                        storeList.AppendLine(@"<div>Email: <a href='mailto:" + itemSEOBlogStore.Email + "' title='" + itemSEOBlogStore.Email + "'>" + itemSEOBlogStore.Email + "</a><div>");
                        storeList.AppendLine(@"<div>Website: <a target='_blank' href='//" + itemSEOBlogStore.Website + "' title='" + itemSEOBlogStore.Website + "'>" + itemSEOBlogStore.Website + "</a><div>");
                        storeList.AppendLine(@"<div>Address: <a target='_blank' href='https://www.google.com/maps/place/" + itemSEOBlogStore.Address + "' title='" + itemSEOBlogStore.Address + "'>" + itemSEOBlogStore.Address + "</a><div>");
                        storeList.AppendLine(@"</li>");
                    }
                    foreach (SEOBlogType itemSEOBlogType in listSEOBlogType)
                    {
                        typeList.AppendLine(@"<li>");
                        typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + "/" + itemSEOBlogType.Code + ".html' title='" + itemSEOBlogType.Title + "'>" + itemSEOBlogType.Title + "</a>");
                        typeList.AppendLine(@"</li>");
                    }
                    foreach (SEOBlogItem itemSEOBlogItem in listSEOBlogItem)
                    {
                        productList.AppendLine(@"<div class='item_content img_catalog'>");
                        productList.AppendLine(@"<a title='" + itemSEOBlogItem.Title + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Product + "/" + itemSEOBlogItem.Code + ".html'>");
                        productList.AppendLine(@"<div class='image'>");
                        productList.AppendLine(@"<img title='" + itemSEOBlogItem.Title + "' alt='" + itemSEOBlogItem.Title + "' src='" + itemSEOBlogItem.Image + "?w=300&h=300'>");
                        productList.AppendLine(@"</div>");
                        productList.AppendLine(@"<span>" + itemSEOBlogItem.Title + "</span>");
                        productList.AppendLine(@"</a>");
                        productList.AppendLine(@"</div>");
                    }
                    contentHTMLSub = contentHTML;
                    if (string.IsNullOrEmpty(itemSEOBlog.URLImage))
                    {
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                    }
                    else
                    {
                        contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", itemSEOBlog.URLImage);
                    }
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                    contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                    contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                    contentHTMLSub = contentHTMLSub.Replace(@"[SEOBlogTemplateContent]", itemSEOBlog.SEOBlogTemplateContent);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerName]", itemSEOBlog.DesignerName);
                    contentHTMLSub = contentHTMLSub.Replace(@"[DesignerContent]", itemSEOBlog.DesignerContent);
                    contentHTMLSub = contentHTMLSub.Replace(@"[RegionName]", itemSEOBlog.RegionName);
                    contentHTMLSub = contentHTMLSub.Replace(@"[CountryName]", itemSEOBlog.CountryName);
                    contentHTMLSub = contentHTMLSub.Replace(@"[StoreList]", storeList.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[TypeList]", typeList.ToString());
                    contentHTMLSub = contentHTMLSub.Replace(@"[ProductList]", productList.ToString());
                    fileName = itemSEOBlog.URLCode + AppGlobal.HTMLExtension;

                    //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Article, fileName);
                    //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                    //{
                    //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                    //    {
                    //        w.WriteLine(contentHTMLSub);
                    //    }
                    //}

                    ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Article + "/" + fileName;
                    requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                    requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                    requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                    fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                    requestLIVEFTP.ContentLength = fileContents.Length;
                    using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                    {
                        requestStream.Write(fileContents, 0, fileContents.Length);
                    }
                    i = i + 1;
                }
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpPost]
        public JsonResult InitializationHTMLKeywordPageInLIVEByURLCodeList()
        {
            string result = AppGlobal.InitializationString;
            try
            {
                string uRLCodeList = JsonConvert.DeserializeObject<string>(Request.Form["data"]);
                string ftpUrl = AppGlobal.InitializationString;
                FtpWebRequest requestLIVEFTP;
                byte[] fileContents;


                string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
                string contentHTML = AppGlobal.InitializationString;
                var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, AppGlobal.KeywordTemplateLIVE);
                using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
                {
                    using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                    {
                        contentHTML = r.ReadToEnd();
                    }
                }

                contentHTML = contentHTML.Replace(@"[DomainName]", AppGlobal.DomainURLTEST);
                contentHTML = contentHTML.Replace(@"[URLInstagram]", AppGlobal.URLInstagram);
                contentHTML = contentHTML.Replace(@"[URLFacebook]", AppGlobal.URLFacebook);
                contentHTML = contentHTML.Replace(@"[URLYoutube]", AppGlobal.URLYoutube);
                contentHTML = contentHTML.Replace(@"[URLTwitter]", AppGlobal.URLTwitter);
                contentHTML = contentHTML.Replace(@"[URLPinterest]", AppGlobal.URLPinterest);
                contentHTML = contentHTML.Replace(@"[URLLinkedin]", AppGlobal.URLLinkedin);
                contentHTML = contentHTML.Replace(@"[PageTitleTemplate]", AppGlobal.PageTitleTemplate);
                contentHTML = contentHTML.Replace(@"[PageDescriptionTemplate]", AppGlobal.PageDescriptionTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsTemplate]", AppGlobal.PageKeywordsTemplate);
                contentHTML = contentHTML.Replace(@"[PageKeywordsNewsTemplate]", AppGlobal.PageKeywordsNewsTemplate);

                List<Collection> listCollection = _collectionRepository.GetByIsActiveToList(true);
                List<Collection> listCollectionTheodoreAlexanderBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TheodoreAlexanderBrandID, true);
                List<Collection> listCollectionSaloneBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.SaloneBrandID, true);
                List<Collection> listCollectionTAStudioBrandID = _collectionRepository.GetByBrand_IDAndIsActiveToList(AppGlobal.TAStudioBrandID, true);
                List<Collection> listCollectionUS = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Collection> listCollectionInternational = _collectionRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Style> listStyle = _styleRepository.GetByIsActiveToList(true);
                List<Style> listStyleUS = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Style> listStyleInternational = _styleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<RoomAndUsage> listRoomAndUsage = _roomAndUsageRepository.GetByIsActiveToList(true);
                List<RoomAndUsage> listRoomAndUsageUS = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<RoomAndUsage> listRoomAndUsageInternational = _roomAndUsageRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Shape> listShape = _shapeRepository.GetByIsActiveToList(true);
                List<Shape> listShapeUS = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<Shape> listShapeInternational = _shapeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<LifeStyle> listLifeStyle = _lifeStyleRepository.GetByIsActiveToList(true);
                List<LifeStyle> listLifeStyleUS = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<LifeStyle> listLifeStyleInternational = _lifeStyleRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<TA.Data.Models.Type> listType = _typeRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Type> listTypeUS = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, true);
                List<TA.Data.Models.Type> listTypeInternational = _typeRepository.GetByIsActiveAndIsActiveTAUSToList(true, false);
                List<Brand> listBrand = _brandRepository.GetByIsActiveToList(true);
                List<TA.Data.Models.Designer> listDesigner = _designerRepository.GetByIsActiveToList(true);

                List<ItemDataTransfer> listItemDataTransferExtendingUS = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, true, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);
                List<ItemDataTransfer> listItemDataTransferExtendingInternational = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, false, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, AppGlobal.InitializationString, true, false, false, false);

                StringBuilder menuTopBrandTheodoreAlexander = new StringBuilder();
                StringBuilder menuTopBrandSalone = new StringBuilder();
                StringBuilder menuTopBrandTAStudio = new StringBuilder();
                StringBuilder menuTopProduct = new StringBuilder();
                StringBuilder menuTopDesigner = new StringBuilder();
                StringBuilder menuLeftUS = new StringBuilder();
                StringBuilder menuLeftInternational = new StringBuilder();
                StringBuilder menuBrandMobileTheodoreAlexander = new StringBuilder();
                StringBuilder menuBrandMobileSalone = new StringBuilder();
                StringBuilder menuBrandMobileTAStudio = new StringBuilder();
                StringBuilder menuProductMobile = new StringBuilder();
                StringBuilder menuDesignerMobile = new StringBuilder();
                StringBuilder productListProductsUSHTML = new StringBuilder();
                StringBuilder productListProductsInternationalHTML = new StringBuilder();

                int i = 1;
                foreach (Collection item in listCollectionTheodoreAlexanderBrandID)
                {
                    string liHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileTheodoreAlexander.AppendLine(liHTML);
                    if ((i == 1) || (i % 9 == 1))
                    {
                        menuTopBrandTheodoreAlexander.AppendLine("<ul>");
                    }
                    menuTopBrandTheodoreAlexander.AppendLine(liHTML);
                    if (i > 1)
                    {
                        if ((i == listCollectionTheodoreAlexanderBrandID.Count) || (i % 9 == 0))
                        {
                            menuTopBrandTheodoreAlexander.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }

                StringBuilder menuTopBrandTAStudioInternational = new StringBuilder();
                StringBuilder menuTopBrandTAStudioUS = new StringBuilder();
                menuTopBrandTAStudioInternational.AppendLine(@"<div id='MenuTopBrandTAStudioInternational' style='display: flex;'>");
                menuTopBrandTAStudioUS.AppendLine(@"<div id='MenuTopBrandTAStudioUS' style='display: flex;'>");
                i = 1;
                foreach (Collection item in listCollectionTAStudioBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    if (item.ID.ToString().ToUpper() == "461DA43B-0409-4EBD-8EF2-0FB911718678")
                    {
                        liMobileHTML = @"<li id='TAStudioFrenzy" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    if (item.ID.ToString().ToUpper() == "85CFC3ED-8876-436E-8159-B1E1025644C8")
                    {
                        liMobileHTML = @"<li id='TAStudioHolli" + AppGlobal.US + AppGlobal.Mobile + "'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    }
                    menuBrandMobileTAStudio.AppendLine(liMobileHTML);
                    if ((i == 1) || (i % 5 == 1))
                    {
                        menuTopBrandTAStudioInternational.AppendLine("<ul style='min-width: 150px;'>");
                        menuTopBrandTAStudioUS.AppendLine("<ul style='min-width: 150px;'>");
                    }
                    menuTopBrandTAStudioInternational.AppendLine(liHTML);
                    if ((item.ID.ToString().ToUpper() != "461DA43B-0409-4EBD-8EF2-0FB911718678") && (item.ID.ToString().ToUpper() != "85CFC3ED-8876-436E-8159-B1E1025644C8"))
                    {
                        menuTopBrandTAStudioUS.AppendLine(liHTML);
                    }
                    if (i > 1)
                    {
                        if ((i == listCollectionTAStudioBrandID.Count) || (i % 5 == 0))
                        {
                            menuTopBrandTAStudioInternational.AppendLine("</ul>");
                            menuTopBrandTAStudioUS.AppendLine("</ul>");
                        }
                    }
                    i = i + 1;
                }
                menuTopBrandTAStudioInternational.AppendLine(@"</div>");
                menuTopBrandTAStudioUS.AppendLine(@"</div>");
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioInternational.ToString());
                menuTopBrandTAStudio.AppendLine(menuTopBrandTAStudioUS.ToString());

                foreach (Collection item in listCollectionSaloneBrandID)
                {
                    string liHTML = @"<li><a href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    string liMobileHTML = @"<li class='item_left_branch'> <a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuBrandMobileSalone.AppendLine(liMobileHTML);
                    menuTopBrandSalone.AppendLine(liHTML);
                }


                foreach (RoomAndUsage item in listRoomAndUsage)
                {
                    string liMobileHTML = @"<li class='item_left_branch'><a class='item_left_branch' href='" + AppGlobal.DomainURLTEST + AppGlobal.Collection + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuTopProduct.AppendLine(@"<ul>");
                    menuTopProduct.AppendLine(@"<li>");
                    menuTopProduct.AppendLine(@"<h1><a title='" + item.DisplayName.ToUpper() + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.RoomAndUsage + @"/" + item.URLCode + AppGlobal.HTMLExtension + "'>" + item.DisplayName.ToUpper() + "</a></h1>"); ;
                    menuTopProduct.AppendLine(@"</li>");

                    menuProductMobile.AppendLine(@"<li class='sub-item-mobile'>");
                    menuProductMobile.AppendLine(@"<a onclick='on" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Open + "()' title='" + item.DisplayName.ToUpper() + "'><i id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + AppGlobal.Mobile + AppGlobal.Icon + "' class='icon-plus'></i>" + item.DisplayName.ToUpper() + "</a>");
                    menuProductMobile.AppendLine(@"<ul id='" + AppGlobal.Menu + item.DisplayName.Replace(@" ", @"").Replace(@"é", @"e").ToUpper() + "Mobile' hidden>");


                    foreach (TA.Data.Models.Type itemType in listType)
                    {
                        string liHTML = @"<li><a title='" + itemType.DisplayName + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + @"/" + itemType.URLCode + AppGlobal.HTMLExtension + "'>" + itemType.DisplayName + "</a></li>";
                        if (itemType.RoomAndUsage_ID == item.ID)
                        {
                            menuTopProduct.AppendLine(liHTML);
                            menuProductMobile.AppendLine(liHTML);
                        }
                    }

                    menuTopProduct.AppendLine(@"</ul>");

                    menuProductMobile.AppendLine(@"</ul>");
                    menuProductMobile.AppendLine(@"<li>");
                }

                foreach (Designer item in listDesigner)
                {
                    if (!string.IsNullOrEmpty(item.ImageIcon))
                    {
                        item.URLImageIcon = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageIcon;
                    }
                    if (!string.IsNullOrEmpty(item.ImageMain))
                    {
                        item.URLImageMain = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageMain;
                    }
                    if (!string.IsNullOrEmpty(item.ImageBackground))
                    {
                        item.URLImageBackground = AppGlobal.DomainURLTEST + AppGlobal.Images + "/" + AppGlobal.Designer + "/" + item.ImageBackground;
                    }
                    StringBuilder liHTML = new StringBuilder();
                    liHTML.AppendLine(@"<ul>");
                    liHTML.AppendLine(@"<li class='icon_designer_optimize'>");
                    liHTML.AppendLine(@"<div class='image'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>");
                    liHTML.AppendLine(@"<img src='" + item.URLImageIcon + "' title='" + item.DisplayName + "' alt='" + item.DisplayName + "' />");
                    liHTML.AppendLine(@"</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"<div class='title_menu_designer'>");
                    liHTML.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a>");
                    liHTML.AppendLine(@"</div>");
                    liHTML.AppendLine(@"</li>");
                    liHTML.AppendLine(@"</ul>");
                    string liMobileHTML = @"<li> <a href='" + AppGlobal.DomainURLTEST + AppGlobal.Designer + @"/" + item.URLCode + AppGlobal.HTMLExtension + @"' title='" + item.DisplayName + "'>" + item.DisplayName + "</a></li>";
                    menuDesignerMobile.AppendLine(liMobileHTML);
                    menuTopDesigner.AppendLine(liHTML.ToString());
                }

                contentHTML = contentHTML.Replace(@"[MenuTopDesigner]", menuTopDesigner.ToString());
                contentHTML = contentHTML.Replace(@"[MenuDesignerMobile]", menuDesignerMobile.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTheodoreAlexander]", menuTopBrandTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandSalone]", menuTopBrandSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopBrandTAStudio]", menuTopBrandTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuTopProduct]", menuTopProduct.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTheodoreAlexander]", menuBrandMobileTheodoreAlexander.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileSalone]", menuBrandMobileSalone.ToString());
                contentHTML = contentHTML.Replace(@"[MenuBrandMobileTAStudio]", menuBrandMobileTAStudio.ToString());
                contentHTML = contentHTML.Replace(@"[MenuProductMobile]", menuProductMobile.ToString());
                contentHTML = contentHTML.Replace(@"[DateTimeCode]", AppGlobal.InitializationDateTimeCode);

                i = AppGlobal.InitializationNumber;
                string fileName = AppGlobal.InitializationString;
                string physicalPathCreate = AppGlobal.InitializationString;
                string pageTitle = AppGlobal.InitializationString;
                string pageDescription = AppGlobal.InitializationString;
                string pageKeywords = AppGlobal.InitializationString;
                string pageURL = AppGlobal.InitializationString;
                string uRLCheck = AppGlobal.InitializationString;
                string contentHTMLSub = AppGlobal.InitializationString;
                subPath = AppGlobal.Download + "/" + AppGlobal.HTML + "/" + AppGlobal.Article;
                physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, subPath);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }

                physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Article);
                if (!Directory.Exists(physicalPathCreate))
                {
                    Directory.CreateDirectory(physicalPathCreate);
                }
                int count = uRLCodeList.Split(' ').Length;
                for (int j = 0; j < count; j++)
                {
                    string uRLCode = uRLCodeList.Split(' ')[j];
                    uRLCode = uRLCode.Split('/')[uRLCode.Split('/').Length - 1];
                    uRLCode = uRLCode.Split('.')[0];

                    SEOBlog itemSEOBlog = _sEOBlogRepository.GetByURLCode(uRLCode);
                    if (itemSEOBlog != null)
                    {
                        if (itemSEOBlog.ID > 0)
                        {
                            uRLCheck = AppGlobal.Article + "_" + itemSEOBlog.URLCode;
                            pageURL = AppGlobal.DomainURLTEST + AppGlobal.Article + "/" + itemSEOBlog.URLCode + ".html";
                            pageTitle = itemSEOBlog.Title;
                            pageDescription = itemSEOBlog.Description;
                            pageKeywords = itemSEOBlog.METAKeyword;
                            StringBuilder storeList = new StringBuilder();
                            StringBuilder typeList = new StringBuilder();
                            StringBuilder productList = new StringBuilder();

                            List<SEOBlogStore> listSEOBlogStore = _sEOBlogStoreRepository.GetByParentIDToList(itemSEOBlog.ID);
                            List<SEOBlogType> listSEOBlogType = _sEOBlogTypeRepository.GetByParentIDToList(itemSEOBlog.ID);
                            List<SEOBlogItem> listSEOBlogItem = _sEOBlogItemRepository.GetByParentIDToList(itemSEOBlog.ID);

                            foreach (SEOBlogStore itemSEOBlogStore in listSEOBlogStore)
                            {
                                storeList.AppendLine(@"<li>");
                                storeList.AppendLine(@"<div><b style='font-size: 18px;'>" + itemSEOBlogStore.Title + "</b><div>");
                                storeList.AppendLine(@"<div>Phone: <a href='tel:" + itemSEOBlogStore.Phone + "' title='" + itemSEOBlogStore.Phone + "'>" + itemSEOBlogStore.Phone + "</a><div>");
                                storeList.AppendLine(@"<div>Email: <a href='mailto:" + itemSEOBlogStore.Email + "' title='" + itemSEOBlogStore.Email + "'>" + itemSEOBlogStore.Email + "</a><div>");
                                storeList.AppendLine(@"<div>Website: <a target='_blank' href='//" + itemSEOBlogStore.Website + "' title='" + itemSEOBlogStore.Website + "'>" + itemSEOBlogStore.Website + "</a><div>");
                                storeList.AppendLine(@"<div>Address: <a target='_blank' href='https://www.google.com/maps/place/" + itemSEOBlogStore.Address + "' title='" + itemSEOBlogStore.Address + "'>" + itemSEOBlogStore.Address + "</a><div>");
                                storeList.AppendLine(@"</li>");
                            }
                            foreach (SEOBlogType itemSEOBlogType in listSEOBlogType)
                            {
                                typeList.AppendLine(@"<li>");
                                typeList.AppendLine(@"<a href='" + AppGlobal.DomainURLTEST + AppGlobal.Type + "/" + itemSEOBlogType.Code + ".html' title='" + itemSEOBlogType.Title + "'>" + itemSEOBlogType.Title + "</a>");
                                typeList.AppendLine(@"</li>");
                            }
                            foreach (SEOBlogItem itemSEOBlogItem in listSEOBlogItem)
                            {
                                productList.AppendLine(@"<div class='item_content img_catalog'>");
                                productList.AppendLine(@"<a title='" + itemSEOBlogItem.Title + "' href='" + AppGlobal.DomainURLTEST + AppGlobal.Product + "/" + itemSEOBlogItem.Code + ".html'>");
                                productList.AppendLine(@"<div class='image'>");
                                productList.AppendLine(@"<img title='" + itemSEOBlogItem.Title + "' alt='" + itemSEOBlogItem.Title + "' src='" + itemSEOBlogItem.Image + "?w=300&h=300'>");
                                productList.AppendLine(@"</div>");
                                productList.AppendLine(@"<span>" + itemSEOBlogItem.Title + "</span>");
                                productList.AppendLine(@"</a>");
                                productList.AppendLine(@"</div>");
                            }
                            contentHTMLSub = contentHTML;
                            if (string.IsNullOrEmpty(itemSEOBlog.URLImage))
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", AppGlobal.MetaImage);
                            }
                            else
                            {
                                contentHTMLSub = contentHTMLSub.Replace(@"[MetaImage]", itemSEOBlog.URLImage);
                            }
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageURL]", pageURL);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageTitle]", pageTitle);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageDescription]", pageDescription);
                            contentHTMLSub = contentHTMLSub.Replace(@"[PageKeywords]", pageKeywords);
                            contentHTMLSub = contentHTMLSub.Replace(@"[URLCheck]", uRLCheck);
                            contentHTMLSub = contentHTMLSub.Replace(@"[SEOBlogTemplateContent]", itemSEOBlog.SEOBlogTemplateContent);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerName]", itemSEOBlog.DesignerName);
                            contentHTMLSub = contentHTMLSub.Replace(@"[DesignerContent]", itemSEOBlog.DesignerContent);
                            contentHTMLSub = contentHTMLSub.Replace(@"[RegionName]", itemSEOBlog.RegionName);
                            contentHTMLSub = contentHTMLSub.Replace(@"[CountryName]", itemSEOBlog.CountryName);
                            contentHTMLSub = contentHTMLSub.Replace(@"[StoreList]", storeList.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[TypeList]", typeList.ToString());
                            contentHTMLSub = contentHTMLSub.Replace(@"[ProductList]", productList.ToString());
                            fileName = itemSEOBlog.URLCode + AppGlobal.HTMLExtension;

                            //physicalPathCreate = Path.Combine(AppGlobal.APILIVEWebRootPath, AppGlobal.Article, fileName);
                            //using (FileStream fs = new FileStream(physicalPathCreate, FileMode.Create))
                            //{
                            //    using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
                            //    {
                            //        w.WriteLine(contentHTMLSub);
                            //    }
                            //}

                            ftpUrl = AppGlobal.LIVEFTP + AppGlobal.Article + "/" + fileName;
                            requestLIVEFTP = (FtpWebRequest)WebRequest.Create(ftpUrl);
                            requestLIVEFTP.Method = WebRequestMethods.Ftp.UploadFile;
                            requestLIVEFTP.Credentials = new NetworkCredential(AppGlobal.LIVEFTPUserName, AppGlobal.LIVEFTPPassword);
                            fileContents = Encoding.UTF8.GetBytes(contentHTMLSub);
                            requestLIVEFTP.ContentLength = fileContents.Length;
                            using (Stream requestStream = requestLIVEFTP.GetRequestStream())
                            {
                                requestStream.Write(fileContents, 0, fileContents.Length);
                            }
                            i = i + 1;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        private static string InitializationHTMLProductList(List<ItemDataTransfer> list, string domainName)
        {
            StringBuilder html = new StringBuilder();
            int count = list.Count;
            if (count > 15)
            {
                count = 15;
            }
            for (int i = 0; i < count; i++)
            {
                html.AppendLine(@"<div class='product'>");
                html.AppendLine(@"<div class='tags'>");
                if (list[i].IsCFPItem == true)
                {
                    html.AppendLine(@"<img title='CFP Item' src='" + domainName + "assets/img/CP-icon.png' class='pic-icon-cp'>");
                }
                if (list[i].IsAXHCFPItem == true)
                {
                    html.AppendLine(@"<img title='AXHCFP Item' src='" + domainName + "assets/img/icon-AXH.png' class='pic-icon-axh'>");
                }
                if (list[i].IsNew == true)
                {
                    html.AppendLine(@"<span title='New' class='tag'>New</span>");
                }
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div class='info'>");
                html.AppendLine(@"<div class='image'>");
                html.AppendLine(@"<a href='" + domainName + AppGlobal.ProductDetail + "/" + list[i].URLCode + ".html' title='" + list[i].ProductName + "'>");
                html.AppendLine(@"<img src='" + list[i].ImageSirv + "?w=400&h=400' title='" + list[i].ProductName + "' alt='" + list[i].ProductName + "' />");
                html.AppendLine(@"</a>");
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div class='name'>");
                html.AppendLine(@"<a href='" + domainName + AppGlobal.ProductDetail + "/" + list[i].URLCode + ".html' title='" + list[i].ProductName + "'>");
                html.AppendLine(@"<h4>" + list[i].ProductName + "</h4>");
                html.AppendLine(@"</a>");
                html.AppendLine(@"<div class='sku'>" + list[i].SKU + "</div>");
                html.AppendLine(@"<div class='addtowish'>");
                if (list[i].IsInWishList == true)
                {
                    html.AppendLine(@"<i id='" + list[i].ID.ToString().ToUpper() + @"Wishlist' title='Add wishlist' class='icon-heart_fill' onclick=""onOpenAddToWishlist(" + i + @")""></i>");
                }
                else
                {
                    html.AppendLine(@"<i id='" + list[i].ID.ToString().ToUpper() + @"Wishlist' title='Add wishlist' class='icon-heart_outline' onclick=""onOpenAddToWishlist(" + i + @")""></i>");
                }
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div hidden class='productFilter_content_productList_row_product_caption_description'>");
                html.AppendLine(@"" + list[i].ExtendedDescription);
                html.AppendLine(@"</div>");
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div hidden class='productFilter_content_productList_row_product_themestyle'>");
                html.AppendLine(@"<b>Brand:</b> " + list[i].BrandName + "<br />");
                html.AppendLine(@"<b>Collection:</b> " + list[i].CollectionName + "<br />");
                html.AppendLine(@"<b>Room:</b> " + list[i].RoomAndUsageName + "<br />");
                html.AppendLine(@"<b>Type:</b> " + list[i].TypeName + "<br />");
                html.AppendLine(@"</div>");
                html.AppendLine(@"</div>");
                html.AppendLine(@"</div>");
            }
            return html.ToString();
        }
        private static string InitializationHTMLProductListTailorFitProgram(List<ItemDataTransfer> list, string domainName)
        {
            StringBuilder html = new StringBuilder();
            int count = list.Count;
            if (count > 15)
            {
                count = 15;
            }
            for (int i = 0; i < count; i++)
            {
                html.AppendLine(@"<div class='product-tailor'>");
                html.AppendLine(@"<div class='tags'>");
                if (list[i].IsCFPItem == true)
                {
                    html.AppendLine(@"<img title='CFP Item' src='" + domainName + "assets/img/CP-icon.png' class='pic-icon-cp'>");
                }
                if (list[i].IsAXHCFPItem == true)
                {
                    html.AppendLine(@"<img title='AXHCFP Item' src='" + domainName + "assets/img/icon-AXH.png' class='pic-icon-axh'>");
                }
                if (list[i].IsNew == true)
                {
                    html.AppendLine(@"<span title='New' class='tag'>New</span>");
                }
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div class='info'>");
                html.AppendLine(@"<div class='image'>");
                html.AppendLine(@"<a href='" + domainName + AppGlobal.ProductDetail + "/" + list[i].URLCode + ".html' title='" + list[i].ProductName + "'>");
                html.AppendLine(@"<img src='" + list[i].Image + "' title='" + list[i].ProductName + "' alt='" + list[i].ProductName + "' />");
                html.AppendLine(@"</a>");
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div class='name'>");
                html.AppendLine(@"<a href='" + domainName + AppGlobal.ProductDetail + "/" + list[i].URLCode + ".html' title='" + list[i].ProductName + "'>");
                html.AppendLine(@"<h4>" + list[i].ProductName + "</h4>");
                html.AppendLine(@"</a>");
                html.AppendLine(@"<div class='sku'>" + list[i].SKU + "</div>");
                html.AppendLine(@"<div class='addtowish'>");
                if (list[i].IsInWishList == true)
                {
                    html.AppendLine(@"<i id='" + list[i].ID.ToString().ToUpper() + @"Wishlist' title='Add wishlist' class='icon-heart_fill' onclick=""onOpenAddToWishlist(" + i + @")""></i>");
                }
                else
                {
                    html.AppendLine(@"<i id='" + list[i].ID.ToString().ToUpper() + @"Wishlist' title='Add wishlist' class='icon-heart_outline' onclick=""onOpenAddToWishlist(" + i + @")""></i>");
                }
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div hidden class='productFilter_content_productList_row_product_caption_description'>");
                html.AppendLine(@"" + list[i].ExtendedDescription);
                html.AppendLine(@"</div>");
                html.AppendLine(@"</div>");
                html.AppendLine(@"<div hidden class='productFilter_content_productList_row_product_themestyle'>");
                html.AppendLine(@"<b>Brand:</b> " + list[i].BrandName + "<br />");
                html.AppendLine(@"<b>Collection:</b> " + list[i].CollectionName + "<br />");
                html.AppendLine(@"<b>Room:</b> " + list[i].RoomAndUsageName + "<br />");
                html.AppendLine(@"<b>Type:</b> " + list[i].TypeName + "<br />");
                html.AppendLine(@"</div>");
                html.AppendLine(@"</div>");
                html.AppendLine(@"</div>");
            }
            return html.ToString();
        }
        private static string InitializationHTMLMenuLeft(List<ItemMenuLeftDataTransfer> listUSMenuLeft, List<ItemMenuLeftDataTransfer> listInternationalMenuLeft, string contentHTMLSub, string category)
        {
            int roomCountUSFilter = AppGlobal.InitializationNumber;
            int collectionCountUSFilter = AppGlobal.InitializationNumber;
            int lifeStyleCountUSFilter = AppGlobal.InitializationNumber;
            int styleCountUSFilter = AppGlobal.InitializationNumber;
            int shapeCountUSFilter = AppGlobal.InitializationNumber;
            int extendingCountUSFilter = AppGlobal.InitializationNumber;
            int roomCountInternationalFilter = AppGlobal.InitializationNumber;
            int collectionCountInternationalFilter = AppGlobal.InitializationNumber;
            int lifeStyleCountInternationalFilter = AppGlobal.InitializationNumber;
            int styleCountInternationalFilter = AppGlobal.InitializationNumber;
            int shapeCountInternationalFilter = AppGlobal.InitializationNumber;
            int extendingCountInternationalFilter = AppGlobal.InitializationNumber;
            foreach (ItemMenuLeftDataTransfer item in listUSMenuLeft)
            {
                string ID = "[" + item.ID.ToUpper() + "ItemCount" + AppGlobal.US + "Filter]";
                contentHTMLSub = contentHTMLSub.Replace(ID, item.ItemCount.Value.ToString());
                switch (item.Category)
                {
                    case "RoomAndUsage":
                        roomCountUSFilter = roomCountUSFilter + item.ItemCount.Value;
                        break;
                    case "Collection":
                        collectionCountUSFilter = collectionCountUSFilter + item.ItemCount.Value;
                        break;
                    case "LifeStyle":
                        lifeStyleCountUSFilter = lifeStyleCountUSFilter + item.ItemCount.Value;
                        break;
                    case "Style":
                        styleCountUSFilter = styleCountUSFilter + item.ItemCount.Value;
                        break;
                    case "Shape":
                        shapeCountUSFilter = shapeCountUSFilter + item.ItemCount.Value;
                        break;
                    case "Extending":
                        extendingCountUSFilter = extendingCountUSFilter + item.ItemCount.Value;
                        break;
                }
            }
            int dem = AppGlobal.InitializationNumber;
            foreach (ItemMenuLeftDataTransfer item in listInternationalMenuLeft)
            {
                string ID = "[" + item.ID.ToUpper() + "ItemCount" + AppGlobal.International + "Filter]";
                contentHTMLSub = contentHTMLSub.Replace(ID, item.ItemCount.Value.ToString());
                switch (item.Category)
                {
                    case "RoomAndUsage":
                        roomCountInternationalFilter = roomCountInternationalFilter + item.ItemCount.Value;
                        break;
                    case "Collection":
                        collectionCountInternationalFilter = collectionCountInternationalFilter + item.ItemCount.Value;
                        break;
                    case "LifeStyle":
                        lifeStyleCountInternationalFilter = lifeStyleCountInternationalFilter + item.ItemCount.Value;
                        break;
                    case "Style":
                        styleCountInternationalFilter = styleCountInternationalFilter + item.ItemCount.Value;
                        break;
                    case "Shape":
                        shapeCountInternationalFilter = shapeCountInternationalFilter + item.ItemCount.Value;
                        break;
                    case "Extending":
                        extendingCountInternationalFilter = extendingCountInternationalFilter + item.ItemCount.Value;
                        break;
                }
                if ((item.Category == category) || (category == AppGlobal.Type001 && item.Category == "RoomAndUsage"))
                {
                    if (dem == AppGlobal.InitializationNumber)
                    {
                        switch (item.Category)
                        {
                            case "RoomAndUsage":
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden, "id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'", "id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.International + "' " + AppGlobal.Hidden, "id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.International + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "'", "id='" + AppGlobal.RoomAndUsage001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                break;
                            case "Collection":
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden, "id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'", "id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.International + "' " + AppGlobal.Hidden, "id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.International + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "'", "id='" + AppGlobal.Collection001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                break;
                            case "LifeStyle":
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden, "id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'", "id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.International + "' " + AppGlobal.Hidden, "id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.International + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "'", "id='" + AppGlobal.LifeStyle001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                break;
                            case "Style":
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden, "id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.US + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'", "id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.International + "' " + AppGlobal.Hidden, "id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.International + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "'", "id='" + AppGlobal.Style001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                break;
                            case "Shape":
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden, "id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.US + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'", "id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.International + "' " + AppGlobal.Hidden, "id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.International + "'");
                                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "'", "id='" + AppGlobal.Shape001 + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                                break;
                        }
                        dem = dem + 1;
                    }
                    contentHTMLSub = contentHTMLSub.Replace("id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "' " + AppGlobal.Hidden, "id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + "'");
                    contentHTMLSub = contentHTMLSub.Replace("id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "'", "id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.US + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                    contentHTMLSub = contentHTMLSub.Replace("id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.International + "' " + AppGlobal.Hidden, "id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.International + "'");
                    contentHTMLSub = contentHTMLSub.Replace("id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "'", "id='" + item.ID.ToUpper() + AppGlobal.Item + AppGlobal.Count + AppGlobal.International + AppGlobal.Filter + "' " + AppGlobal.Hidden);
                }
                else
                {
                    if (item.ItemCount == 0)
                    {
                        contentHTMLSub = contentHTMLSub.Replace("id='" + item.ID.ToUpper() + AppGlobal.Li + AppGlobal.US + "'", "id='" + item.ID.ToUpper() + AppGlobal.Li + AppGlobal.US + "' " + AppGlobal.Hidden);
                        contentHTMLSub = contentHTMLSub.Replace("id='" + item.ID.ToUpper() + AppGlobal.Li + AppGlobal.International + "'", "id='" + item.ID.ToUpper() + AppGlobal.Li + AppGlobal.International + "' " + AppGlobal.Hidden);
                    }
                }
            }
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.RoomAndUsage001 + "Count" + AppGlobal.US + "Filter]", roomCountUSFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Collection001 + "Count" + AppGlobal.US + "Filter]", collectionCountUSFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.LifeStyle001 + "Count" + AppGlobal.US + "Filter]", lifeStyleCountUSFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Style001 + "Count" + AppGlobal.US + "Filter]", styleCountUSFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Shape001 + "Count" + AppGlobal.US + "Filter]", shapeCountUSFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Extending001 + "Count" + AppGlobal.US + "Filter]", extendingCountUSFilter.ToString());

            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.RoomAndUsage001 + "Count" + AppGlobal.International + "Filter]", roomCountInternationalFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Collection001 + "Count" + AppGlobal.International + "Filter]", collectionCountInternationalFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.LifeStyle001 + "Count" + AppGlobal.International + "Filter]", lifeStyleCountInternationalFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Style001 + "Count" + AppGlobal.International + "Filter]", styleCountInternationalFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Shape001 + "Count" + AppGlobal.International + "Filter]", shapeCountInternationalFilter.ToString());
            contentHTMLSub = contentHTMLSub.Replace("[" + AppGlobal.Extending001 + "Count" + AppGlobal.International + "Filter]", extendingCountInternationalFilter.ToString());

            if (roomCountUSFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.US + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.US + "' " + AppGlobal.Hidden);
            }
            if (collectionCountUSFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Collection001 + AppGlobal.US + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Collection001 + AppGlobal.US + "' " + AppGlobal.Hidden);
            }
            if (lifeStyleCountUSFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.LifeStyle001 + AppGlobal.US + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.LifeStyle001 + AppGlobal.US + "' " + AppGlobal.Hidden);
            }
            if (styleCountUSFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Style001 + AppGlobal.US + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Style001 + AppGlobal.US + "' " + AppGlobal.Hidden);
            }
            if (shapeCountUSFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Shape001 + AppGlobal.US + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Shape001 + AppGlobal.US + "' " + AppGlobal.Hidden);
            }
            if (extendingCountUSFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Extending001 + AppGlobal.US + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Extending001 + AppGlobal.US + "' " + AppGlobal.Hidden);
            }

            if (roomCountInternationalFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.International + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.RoomAndUsage001 + AppGlobal.International + "' " + AppGlobal.Hidden);
            }
            if (collectionCountInternationalFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Collection001 + AppGlobal.International + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Collection001 + AppGlobal.International + "' " + AppGlobal.Hidden);
            }
            if (lifeStyleCountInternationalFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.LifeStyle001 + AppGlobal.International + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.LifeStyle001 + AppGlobal.International + "' " + AppGlobal.Hidden);
            }
            if (styleCountInternationalFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Style001 + AppGlobal.International + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Style001 + AppGlobal.International + "' " + AppGlobal.Hidden);
            }
            if (shapeCountInternationalFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Shape001 + AppGlobal.International + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Shape001 + AppGlobal.International + "' " + AppGlobal.Hidden);
            }
            if (extendingCountInternationalFilter == AppGlobal.InitializationNumber)
            {
                contentHTMLSub = contentHTMLSub.Replace("id='" + AppGlobal.MenuLeft + AppGlobal.Extending001 + AppGlobal.International + "'", "id='" + AppGlobal.MenuLeft + AppGlobal.Extending001 + AppGlobal.International + "' " + AppGlobal.Hidden);
            }
            return contentHTMLSub;
        }
        [HttpGet]
        public JsonResult GetItemDataTransferByIsActiveTAUSAndType_IDAndInStockProgramAndIsStockedToExcel(bool isActiveTAUS, string type_ID, bool inStockProgram, bool isStocked)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<ItemDataTransfer> list = _itemRepository.GetDataTransferByIsActiveTAUSAndType_IDAndInStockProgramAndIsStockedToList(isActiveTAUS, type_ID, inStockProgram, isStocked);
                string fileName = @"Item_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                if (isActiveTAUS == true)
                {
                    fileName = @"ItemActive_US_ByType_" + type_ID + "_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                }
                else
                {
                    fileName = @"ItemActive_International_ByType_" + type_ID + "_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                }
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SKU";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ProductName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Price";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ParentCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DefaultCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Keywords";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DateCreated";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsBestSeller";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsNew";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsStocked";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsAXHCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Story";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "VariationDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ExtendedDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "AdditionalFeatures";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3_ID";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }
                    row = row + 1;
                    int no = 0;
                    foreach (ItemDataTransfer item in list)
                    {
                        if (item.DateCreated == null)
                        {
                            item.DateCreated = AppGlobal.InitializationDateTime;
                        }
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.SKU;
                        workSheet.Cells[row, 3].Value = item.ProductName;
                        if (item.Price != null)
                        {
                            workSheet.Cells[row, 4].Value = item.Price;
                        }
                        else
                        {
                            workSheet.Cells[row, 4].Value = "";
                        }
                        workSheet.Cells[row, 5].Value = item.ParentCode;
                        workSheet.Cells[row, 6].Value = item.DefaultCode;
                        workSheet.Cells[row, 7].Value = item.DesignerName;
                        workSheet.Cells[row, 8].Value = item.LifeStyleName;
                        workSheet.Cells[row, 9].Value = item.StyleName;
                        workSheet.Cells[row, 10].Value = item.TypeName;
                        workSheet.Cells[row, 11].Value = item.RoomAndUsageName;
                        workSheet.Cells[row, 12].Value = item.BrandName;
                        workSheet.Cells[row, 13].Value = item.CollectionName;
                        workSheet.Cells[row, 14].Value = item.PrimaryMaterialName;
                        workSheet.Cells[row, 15].Value = item.PrimaryMaterialMaterialCategoryName;
                        workSheet.Cells[row, 16].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 17].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 18].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 19].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 20].Value = item.Keywords;
                        workSheet.Cells[row, 21].Value = item.OptionGroupName;
                        workSheet.Cells[row, 22].Value = item.OptionGroupGroupName;
                        workSheet.Cells[row, 23].Value = item.OptionGroup2Name;
                        workSheet.Cells[row, 24].Value = item.OptionGroup2GroupName;
                        workSheet.Cells[row, 25].Value = item.OptionGroup3Name;
                        workSheet.Cells[row, 26].Value = item.OptionGroup3GroupName;
                        if (item.DateCreated != null)
                        {
                            workSheet.Cells[row, 27].Value = item.DateCreated.Value.ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            workSheet.Cells[row, 27].Value = "";
                        }
                        workSheet.Cells[row, 28].Value = item.IsBestSeller;
                        workSheet.Cells[row, 29].Value = item.IsNew;
                        workSheet.Cells[row, 30].Value = item.IsStocked;
                        workSheet.Cells[row, 31].Value = item.IsCFPItem;
                        workSheet.Cells[row, 32].Value = item.IsAXHCFPItem;
                        workSheet.Cells[row, 33].Value = item.Story;
                        workSheet.Cells[row, 34].Value = item.VariationDescription;
                        workSheet.Cells[row, 35].Value = item.ExtendedDescription;
                        workSheet.Cells[row, 36].Value = item.AdditionalFeatures;
                        workSheet.Cells[row, 37].Value = item.ID;
                        if (item.Designer_ID != null)
                        {
                            workSheet.Cells[row, 38].Value = item.Designer_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 38].Value = "";
                        }
                        if (item.LifeStyle_ID != null)
                        {
                            workSheet.Cells[row, 39].Value = item.LifeStyle_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 39].Value = "";
                        }
                        if (item.Style_ID != null)
                        {
                            workSheet.Cells[row, 40].Value = item.Style_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 40].Value = "";
                        }
                        if (item.Type_ID != null)
                        {
                            workSheet.Cells[row, 41].Value = item.Type_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 41].Value = "";
                        }
                        if (item.RoomAndUsage_ID != null)
                        {
                            workSheet.Cells[row, 42].Value = item.RoomAndUsage_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 42].Value = "";
                        }
                        if (item.Brand_ID != null)
                        {
                            workSheet.Cells[row, 43].Value = item.Brand_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 43].Value = "";
                        }
                        if (item.Collection_ID != null)
                        {
                            workSheet.Cells[row, 44].Value = item.Collection_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 44].Value = "";
                        }
                        if (item.PrimaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 45].Value = item.PrimaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 45].Value = "";
                        }
                        if (item.SecondaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 46].Value = item.SecondaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 46].Value = "";
                        }
                        if (item.TertiaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 47].Value = item.TertiaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 47].Value = "";
                        }
                        if (item.OptionGroup_ID != null)
                        {
                            workSheet.Cells[row, 48].Value = item.OptionGroup_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 48].Value = "";
                        }
                        if (item.OptionGroup2_ID != null)
                        {
                            workSheet.Cells[row, 49].Value = item.OptionGroup2_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 49].Value = "";
                        }
                        if (item.OptionGroup3_ID != null)
                        {
                            workSheet.Cells[row, 50].Value = item.OptionGroup3_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 50].Value = "";
                        }
                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }

        [HttpGet]
        public JsonResult GetDataTransferByUser_IDAndIsActiveTAUSAndFilters001ToExcel(bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<ItemDataTransfer> list = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, isActiveTAUS, room_IDList, brand_IDList, type_IDList, shape_IDList, style_IDList, lifeStyle_IDList, collection_IDList, designer_IDList, searchString, false, false, false, false);
                string fileName = @"Item_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                if (isActiveTAUS == true)
                {
                    fileName = @"ItemActive_US_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                }
                else
                {
                    fileName = @"ItemActive_International_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                }
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SKU";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ProductName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Price";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ParentCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DefaultCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Keywords";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DateCreated";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsBestSeller";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsNew";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsStocked";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsAXHCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Story";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "VariationDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ExtendedDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "AdditionalFeatures";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSideAndFrontRailApronClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSlatToTopOfSideRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSlatToTopOfFootRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSideAndFrontRailApronClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSlatToTopOfSideRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSlatToTopOfFootRailClearance";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }
                    row = row + 1;
                    int no = 0;
                    foreach (ItemDataTransfer item in list)
                    {
                        if (item.DateCreated == null)
                        {
                            item.DateCreated = AppGlobal.InitializationDateTime;
                        }
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.SKU;
                        workSheet.Cells[row, 3].Value = item.ProductName;
                        if (item.Price != null)
                        {
                            workSheet.Cells[row, 4].Value = item.Price;
                        }
                        else
                        {
                            workSheet.Cells[row, 4].Value = "";
                        }
                        workSheet.Cells[row, 5].Value = item.ParentCode;
                        workSheet.Cells[row, 6].Value = item.DefaultCode;
                        workSheet.Cells[row, 7].Value = item.DesignerName;
                        workSheet.Cells[row, 8].Value = item.LifeStyleName;
                        workSheet.Cells[row, 9].Value = item.StyleName;
                        workSheet.Cells[row, 10].Value = item.TypeName;
                        workSheet.Cells[row, 11].Value = item.RoomAndUsageName;
                        workSheet.Cells[row, 12].Value = item.BrandName;
                        workSheet.Cells[row, 13].Value = item.CollectionName;
                        workSheet.Cells[row, 14].Value = item.PrimaryMaterialName;
                        workSheet.Cells[row, 15].Value = item.PrimaryMaterialMaterialCategoryName;
                        workSheet.Cells[row, 16].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 17].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 18].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 19].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 20].Value = item.Keywords;
                        workSheet.Cells[row, 21].Value = item.OptionGroupName;
                        workSheet.Cells[row, 22].Value = item.OptionGroupGroupName;
                        workSheet.Cells[row, 23].Value = item.OptionGroup2Name;
                        workSheet.Cells[row, 24].Value = item.OptionGroup2GroupName;
                        workSheet.Cells[row, 25].Value = item.OptionGroup3Name;
                        workSheet.Cells[row, 26].Value = item.OptionGroup3GroupName;
                        if (item.DateCreated != null)
                        {
                            workSheet.Cells[row, 27].Value = item.DateCreated.Value.ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            workSheet.Cells[row, 27].Value = "";
                        }
                        workSheet.Cells[row, 28].Value = item.IsBestSeller;
                        workSheet.Cells[row, 29].Value = item.IsNew;
                        workSheet.Cells[row, 30].Value = item.IsStocked;
                        workSheet.Cells[row, 31].Value = item.IsCFPItem;
                        workSheet.Cells[row, 32].Value = item.IsAXHCFPItem;
                        workSheet.Cells[row, 33].Value = item.Story;
                        workSheet.Cells[row, 34].Value = item.VariationDescription;
                        workSheet.Cells[row, 35].Value = item.ExtendedDescription;
                        workSheet.Cells[row, 36].Value = item.AdditionalFeatures;
                        workSheet.Cells[row, 37].Value = item.ID;
                        if (item.Designer_ID != null)
                        {
                            workSheet.Cells[row, 38].Value = item.Designer_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 38].Value = "";
                        }
                        if (item.LifeStyle_ID != null)
                        {
                            workSheet.Cells[row, 39].Value = item.LifeStyle_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 39].Value = "";
                        }
                        if (item.Style_ID != null)
                        {
                            workSheet.Cells[row, 40].Value = item.Style_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 40].Value = "";
                        }
                        if (item.Type_ID != null)
                        {
                            workSheet.Cells[row, 41].Value = item.Type_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 41].Value = "";
                        }
                        if (item.RoomAndUsage_ID != null)
                        {
                            workSheet.Cells[row, 42].Value = item.RoomAndUsage_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 42].Value = "";
                        }
                        if (item.Brand_ID != null)
                        {
                            workSheet.Cells[row, 43].Value = item.Brand_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 43].Value = "";
                        }
                        if (item.Collection_ID != null)
                        {
                            workSheet.Cells[row, 44].Value = item.Collection_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 44].Value = "";
                        }
                        if (item.PrimaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 45].Value = item.PrimaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 45].Value = "";
                        }
                        if (item.SecondaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 46].Value = item.SecondaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 46].Value = "";
                        }
                        if (item.TertiaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 47].Value = item.TertiaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 47].Value = "";
                        }
                        if (item.OptionGroup_ID != null)
                        {
                            workSheet.Cells[row, 48].Value = item.OptionGroup_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 48].Value = "";
                        }
                        if (item.OptionGroup2_ID != null)
                        {
                            workSheet.Cells[row, 49].Value = item.OptionGroup2_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 49].Value = "";
                        }
                        if (item.OptionGroup3_ID != null)
                        {
                            workSheet.Cells[row, 50].Value = item.OptionGroup3_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 50].Value = "";
                        }
                        if (item.CMSideAndFrontRailApronClearance != null)
                        {
                            workSheet.Cells[row, 51].Value = item.CMSideAndFrontRailApronClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 51].Value = "";
                        }
                        if (item.CMSlatToTopOfSideRailClearance != null)
                        {
                            workSheet.Cells[row, 52].Value = item.CMSlatToTopOfSideRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 52].Value = "";
                        }
                        if (item.CMSlatToTopOfFootRailClearance != null)
                        {
                            workSheet.Cells[row, 53].Value = item.CMSlatToTopOfFootRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 53].Value = "";
                        }
                        if (item.INCHSideAndFrontRailApronClearance != null)
                        {
                            workSheet.Cells[row, 54].Value = item.INCHSideAndFrontRailApronClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 54].Value = "";
                        }
                        if (item.INCHSlatToTopOfSideRailClearance != null)
                        {
                            workSheet.Cells[row, 55].Value = item.INCHSlatToTopOfSideRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 55].Value = "";
                        }
                        if (item.INCHSlatToTopOfFootRailClearance != null)
                        {
                            workSheet.Cells[row, 56].Value = item.INCHSlatToTopOfFootRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 56].Value = "";
                        }
                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToExcel(bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString, bool extending, bool isStocked, bool isCFPItem, bool isNew)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<ItemDataTransfer> list = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFiltersToList(AppGlobal.InitializationString, isActiveTAUS, room_IDList, brand_IDList, type_IDList, shape_IDList, style_IDList, lifeStyle_IDList, collection_IDList, designer_IDList, searchString, extending, isStocked, isCFPItem, isNew);
                string fileName = @"Item_";
                if (isActiveTAUS == true)
                {
                    fileName = fileName + @"Active_US_";

                }
                else
                {
                    fileName = fileName + @"Active_International_";
                }
                if (isNew == true)
                {
                    fileName = fileName + @"New";
                }
                if (extending == true)
                {
                    fileName = fileName + @"Extending";
                }
                if (isStocked == true)
                {
                    fileName = fileName + @"Stocked";
                }
                if (isStocked == true)
                {
                    fileName = fileName + @"CFPItem";
                }
                fileName = fileName + @"_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SKU";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ProductName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Price";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ParentCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DefaultCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IntroductionDate";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Keywords";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DateCreated";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsBestSeller";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsNew";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsStocked";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsAXHCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Story";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "VariationDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ExtendedDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "AdditionalFeatures";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSideAndFrontRailApronClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSlatToTopOfSideRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSlatToTopOfFootRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSideAndFrontRailApronClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSlatToTopOfSideRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSlatToTopOfFootRailClearance";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }
                    row = row + 1;
                    int no = 0;
                    foreach (ItemDataTransfer item in list)
                    {
                        if (item.DateCreated == null)
                        {
                            item.DateCreated = AppGlobal.InitializationDateTime;
                        }
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.SKU;
                        workSheet.Cells[row, 3].Value = item.ProductName;
                        if (item.Price != null)
                        {
                            workSheet.Cells[row, 4].Value = item.Price;
                        }
                        else
                        {
                            workSheet.Cells[row, 4].Value = "";
                        }
                        workSheet.Cells[row, 5].Value = item.ParentCode;
                        workSheet.Cells[row, 6].Value = item.DefaultCode;
                        workSheet.Cells[row, 7].Value = item.IntroductionDate;
                        workSheet.Cells[row, 8].Value = item.DesignerName;
                        workSheet.Cells[row, 9].Value = item.LifeStyleName;
                        workSheet.Cells[row, 10].Value = item.StyleName;
                        workSheet.Cells[row, 11].Value = item.TypeName;
                        workSheet.Cells[row, 12].Value = item.RoomAndUsageName;
                        workSheet.Cells[row, 13].Value = item.BrandName;
                        workSheet.Cells[row, 14].Value = item.CollectionName;
                        workSheet.Cells[row, 15].Value = item.PrimaryMaterialName;
                        workSheet.Cells[row, 16].Value = item.PrimaryMaterialMaterialCategoryName;
                        workSheet.Cells[row, 17].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 18].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 19].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 20].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 21].Value = item.Keywords;
                        workSheet.Cells[row, 22].Value = item.OptionGroupName;
                        workSheet.Cells[row, 23].Value = item.OptionGroupGroupName;
                        workSheet.Cells[row, 24].Value = item.OptionGroup2Name;
                        workSheet.Cells[row, 25].Value = item.OptionGroup2GroupName;
                        workSheet.Cells[row, 26].Value = item.OptionGroup3Name;
                        workSheet.Cells[row, 27].Value = item.OptionGroup3GroupName;
                        if (item.DateCreated != null)
                        {
                            workSheet.Cells[row, 28].Value = item.DateCreated.Value.ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            workSheet.Cells[row, 28].Value = "";
                        }
                        workSheet.Cells[row, 29].Value = item.IsBestSeller;
                        workSheet.Cells[row, 30].Value = item.IsNew;
                        workSheet.Cells[row, 31].Value = item.IsStocked;
                        workSheet.Cells[row, 32].Value = item.IsCFPItem;
                        workSheet.Cells[row, 33].Value = item.IsAXHCFPItem;
                        workSheet.Cells[row, 34].Value = item.Story;
                        workSheet.Cells[row, 35].Value = item.VariationDescription;
                        workSheet.Cells[row, 36].Value = item.ExtendedDescription;
                        workSheet.Cells[row, 37].Value = item.AdditionalFeatures;
                        workSheet.Cells[row, 38].Value = item.ID;
                        if (item.Designer_ID != null)
                        {
                            workSheet.Cells[row, 39].Value = item.Designer_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 39].Value = "";
                        }
                        if (item.LifeStyle_ID != null)
                        {
                            workSheet.Cells[row, 40].Value = item.LifeStyle_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 40].Value = "";
                        }
                        if (item.Style_ID != null)
                        {
                            workSheet.Cells[row, 41].Value = item.Style_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 41].Value = "";
                        }
                        if (item.Type_ID != null)
                        {
                            workSheet.Cells[row, 42].Value = item.Type_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 42].Value = "";
                        }
                        if (item.RoomAndUsage_ID != null)
                        {
                            workSheet.Cells[row, 43].Value = item.RoomAndUsage_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 43].Value = "";
                        }
                        if (item.Brand_ID != null)
                        {
                            workSheet.Cells[row, 44].Value = item.Brand_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 44].Value = "";
                        }
                        if (item.Collection_ID != null)
                        {
                            workSheet.Cells[row, 45].Value = item.Collection_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 45].Value = "";
                        }
                        if (item.PrimaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 46].Value = item.PrimaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 46].Value = "";
                        }
                        if (item.SecondaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 47].Value = item.SecondaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 47].Value = "";
                        }
                        if (item.TertiaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 48].Value = item.TertiaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 48].Value = "";
                        }
                        if (item.OptionGroup_ID != null)
                        {
                            workSheet.Cells[row, 49].Value = item.OptionGroup_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 49].Value = "";
                        }
                        if (item.OptionGroup2_ID != null)
                        {
                            workSheet.Cells[row, 50].Value = item.OptionGroup2_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 50].Value = "";
                        }
                        if (item.OptionGroup3_ID != null)
                        {
                            workSheet.Cells[row, 51].Value = item.OptionGroup3_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 51].Value = "";
                        }
                        if (item.CMSideAndFrontRailApronClearance != null)
                        {
                            workSheet.Cells[row, 52].Value = item.CMSideAndFrontRailApronClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 52].Value = "";
                        }
                        if (item.CMSlatToTopOfSideRailClearance != null)
                        {
                            workSheet.Cells[row, 53].Value = item.CMSlatToTopOfSideRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 53].Value = "";
                        }
                        if (item.CMSlatToTopOfFootRailClearance != null)
                        {
                            workSheet.Cells[row, 54].Value = item.CMSlatToTopOfFootRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 54].Value = "";
                        }
                        if (item.INCHSideAndFrontRailApronClearance != null)
                        {
                            workSheet.Cells[row, 55].Value = item.INCHSideAndFrontRailApronClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 55].Value = "";
                        }
                        if (item.INCHSlatToTopOfSideRailClearance != null)
                        {
                            workSheet.Cells[row, 56].Value = item.INCHSlatToTopOfSideRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 56].Value = "";
                        }
                        if (item.INCHSlatToTopOfFootRailClearance != null)
                        {
                            workSheet.Cells[row, 57].Value = item.INCHSlatToTopOfFootRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 57].Value = "";
                        }
                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public JsonResult GetDataTransferByUser_IDAndIsActiveTAUSAndFilters002ToExcel(bool isActiveTAUS, string room_IDList, string brand_IDList, string type_IDList, string shape_IDList, string style_IDList, string lifeStyle_IDList, string collection_IDList, string designer_IDList, string searchString, bool extending, bool isStocked, bool isCFPItem, bool isNew, bool isBestSeller)
        {
            string result = AppGlobal.InitializationString;
            try
            {
                List<ItemDataTransfer> list = _itemRepository.GetDataTransferByUser_IDAndIsActiveTAUSAndFilters002ToList(AppGlobal.InitializationString, isActiveTAUS, room_IDList, brand_IDList, type_IDList, shape_IDList, style_IDList, lifeStyle_IDList, collection_IDList, designer_IDList, searchString, extending, isStocked, isCFPItem, isNew, isBestSeller);
                string fileName = @"Item_";
                if (isActiveTAUS == true)
                {
                    fileName = fileName + @"Active_US_";

                }
                else
                {
                    fileName = fileName + @"Active_International_";
                }
                if (isNew == true)
                {
                    fileName = fileName + @"New";
                }
                if (extending == true)
                {
                    fileName = fileName + @"Extending";
                }
                if (isStocked == true)
                {
                    fileName = fileName + @"Stocked";
                }
                if (isStocked == true)
                {
                    fileName = fileName + @"CFPItem";
                }
                fileName = fileName + @"_" + AppGlobal.InitializationDateTimeCode + ".xlsx";
                var streamExport = new MemoryStream();
                using (var package = new ExcelPackage(streamExport))
                {
                    System.Drawing.Color color = System.Drawing.Color.FromArgb(int.Parse("#c00000".Replace("#", ""), System.Globalization.NumberStyles.AllowHexSpecifier));
                    var workSheet = package.Workbook.Worksheets.Add("Sheet1");
                    int row = 1;
                    int column = 1;
                    workSheet.Cells[row, column].Value = "No";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SKU";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ProductName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Price";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ParentCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DefaultCode";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IntroductionDate";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterialMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterialCategoryName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Keywords";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroupGroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3Name";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3GroupName";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "DateCreated";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsBestSeller";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsNew";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsStocked";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "IsAXHCFPItem";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Story";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "VariationDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ExtendedDescription";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "AdditionalFeatures";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Designer_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "LifeStyle_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Style_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Type_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "RoomAndUsage_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Brand_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "Collection_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "PrimaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "SecondaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "TertiaryMaterial_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup2_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "OptionGroup3_ID";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSideAndFrontRailApronClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSlatToTopOfSideRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "CMSlatToTopOfFootRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSideAndFrontRailApronClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSlatToTopOfSideRailClearance";
                    column = column + 1;
                    workSheet.Cells[row, column].Value = "INCHSlatToTopOfFootRailClearance";
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Cells[row, i].Style.Font.Bold = true;
                        workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        workSheet.Cells[row, i].Style.Font.Color.SetColor(System.Drawing.Color.White);
                        workSheet.Cells[row, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells[row, i].Style.Fill.BackgroundColor.SetColor(color);
                        workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                        workSheet.Cells[row, i].Style.Font.Size = 11;
                        workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                        workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                    }
                    row = row + 1;
                    int no = 0;
                    foreach (ItemDataTransfer item in list)
                    {
                        if (item.DateCreated == null)
                        {
                            item.DateCreated = AppGlobal.InitializationDateTime;
                        }
                        no = no + 1;
                        workSheet.Cells[row, 1].Value = no.ToString();
                        workSheet.Cells[row, 2].Value = item.SKU;
                        workSheet.Cells[row, 3].Value = item.ProductName;
                        if (item.Price != null)
                        {
                            workSheet.Cells[row, 4].Value = item.Price;
                        }
                        else
                        {
                            workSheet.Cells[row, 4].Value = "";
                        }
                        workSheet.Cells[row, 5].Value = item.ParentCode;
                        workSheet.Cells[row, 6].Value = item.DefaultCode;
                        workSheet.Cells[row, 7].Value = item.IntroductionDate;
                        workSheet.Cells[row, 8].Value = item.DesignerName;
                        workSheet.Cells[row, 9].Value = item.LifeStyleName;
                        workSheet.Cells[row, 10].Value = item.StyleName;
                        workSheet.Cells[row, 11].Value = item.TypeName;
                        workSheet.Cells[row, 12].Value = item.RoomAndUsageName;
                        workSheet.Cells[row, 13].Value = item.BrandName;
                        workSheet.Cells[row, 14].Value = item.CollectionName;
                        workSheet.Cells[row, 15].Value = item.PrimaryMaterialName;
                        workSheet.Cells[row, 16].Value = item.PrimaryMaterialMaterialCategoryName;
                        workSheet.Cells[row, 17].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 18].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 19].Value = item.SecondaryMaterialName;
                        workSheet.Cells[row, 20].Value = item.SecondaryMaterialCategoryName;
                        workSheet.Cells[row, 21].Value = item.Keywords;
                        workSheet.Cells[row, 22].Value = item.OptionGroupName;
                        workSheet.Cells[row, 23].Value = item.OptionGroupGroupName;
                        workSheet.Cells[row, 24].Value = item.OptionGroup2Name;
                        workSheet.Cells[row, 25].Value = item.OptionGroup2GroupName;
                        workSheet.Cells[row, 26].Value = item.OptionGroup3Name;
                        workSheet.Cells[row, 27].Value = item.OptionGroup3GroupName;
                        if (item.DateCreated != null)
                        {
                            workSheet.Cells[row, 28].Value = item.DateCreated.Value.ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            workSheet.Cells[row, 28].Value = "";
                        }
                        workSheet.Cells[row, 29].Value = item.IsBestSeller;
                        workSheet.Cells[row, 30].Value = item.IsNew;
                        workSheet.Cells[row, 31].Value = item.IsStocked;
                        workSheet.Cells[row, 32].Value = item.IsCFPItem;
                        workSheet.Cells[row, 33].Value = item.IsAXHCFPItem;
                        workSheet.Cells[row, 34].Value = item.Story;
                        workSheet.Cells[row, 35].Value = item.VariationDescription;
                        workSheet.Cells[row, 36].Value = item.ExtendedDescription;
                        workSheet.Cells[row, 37].Value = item.AdditionalFeatures;
                        workSheet.Cells[row, 38].Value = item.ID;
                        if (item.Designer_ID != null)
                        {
                            workSheet.Cells[row, 39].Value = item.Designer_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 39].Value = "";
                        }
                        if (item.LifeStyle_ID != null)
                        {
                            workSheet.Cells[row, 40].Value = item.LifeStyle_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 40].Value = "";
                        }
                        if (item.Style_ID != null)
                        {
                            workSheet.Cells[row, 41].Value = item.Style_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 41].Value = "";
                        }
                        if (item.Type_ID != null)
                        {
                            workSheet.Cells[row, 42].Value = item.Type_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 42].Value = "";
                        }
                        if (item.RoomAndUsage_ID != null)
                        {
                            workSheet.Cells[row, 43].Value = item.RoomAndUsage_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 43].Value = "";
                        }
                        if (item.Brand_ID != null)
                        {
                            workSheet.Cells[row, 44].Value = item.Brand_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 44].Value = "";
                        }
                        if (item.Collection_ID != null)
                        {
                            workSheet.Cells[row, 45].Value = item.Collection_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 45].Value = "";
                        }
                        if (item.PrimaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 46].Value = item.PrimaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 46].Value = "";
                        }
                        if (item.SecondaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 47].Value = item.SecondaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 47].Value = "";
                        }
                        if (item.TertiaryMaterial_ID != null)
                        {
                            workSheet.Cells[row, 48].Value = item.TertiaryMaterial_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 48].Value = "";
                        }
                        if (item.OptionGroup_ID != null)
                        {
                            workSheet.Cells[row, 49].Value = item.OptionGroup_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 49].Value = "";
                        }
                        if (item.OptionGroup2_ID != null)
                        {
                            workSheet.Cells[row, 50].Value = item.OptionGroup2_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 50].Value = "";
                        }
                        if (item.OptionGroup3_ID != null)
                        {
                            workSheet.Cells[row, 51].Value = item.OptionGroup3_ID;
                        }
                        else
                        {
                            workSheet.Cells[row, 51].Value = "";
                        }
                        if (item.CMSideAndFrontRailApronClearance != null)
                        {
                            workSheet.Cells[row, 52].Value = item.CMSideAndFrontRailApronClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 52].Value = "";
                        }
                        if (item.CMSlatToTopOfSideRailClearance != null)
                        {
                            workSheet.Cells[row, 53].Value = item.CMSlatToTopOfSideRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 53].Value = "";
                        }
                        if (item.CMSlatToTopOfFootRailClearance != null)
                        {
                            workSheet.Cells[row, 54].Value = item.CMSlatToTopOfFootRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 54].Value = "";
                        }
                        if (item.INCHSideAndFrontRailApronClearance != null)
                        {
                            workSheet.Cells[row, 55].Value = item.INCHSideAndFrontRailApronClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 55].Value = "";
                        }
                        if (item.INCHSlatToTopOfSideRailClearance != null)
                        {
                            workSheet.Cells[row, 56].Value = item.INCHSlatToTopOfSideRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 56].Value = "";
                        }
                        if (item.INCHSlatToTopOfFootRailClearance != null)
                        {
                            workSheet.Cells[row, 57].Value = item.INCHSlatToTopOfFootRailClearance;
                        }
                        else
                        {
                            workSheet.Cells[row, 57].Value = "";
                        }
                        for (int i = 1; i <= column; i++)
                        {
                            switch (i)
                            {
                                default:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    break;
                                case 1:
                                    workSheet.Cells[row, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    break;
                            }
                            workSheet.Cells[row, i].Style.Font.Name = "Times New Roman";
                            workSheet.Cells[row, i].Style.Font.Size = 11;
                            workSheet.Cells[row, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                            workSheet.Cells[row, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            workSheet.Cells[row, i].Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                        }
                        row = row + 1;
                    }
                    for (int i = 1; i <= column; i++)
                    {
                        workSheet.Column(i).AutoFit();
                    }
                    package.Save();
                }
                streamExport.Position = 0;
                var physicalPathCreate = Path.Combine(_webHostEnvironment.WebRootPath, AppGlobal.Download, fileName);
                using (var stream = new FileStream(physicalPathCreate, FileMode.Create))
                {
                    streamExport.CopyTo(stream);
                }
                result = AppGlobal.DomainURL + AppGlobal.Download + "/" + fileName;
            }
            catch (Exception e)
            {
                result = e.Message;
            }
            return Json(result);
        }
        [HttpGet]
        public string RemoveStyleAndClass()
        {
            string result = AppGlobal.InitializationString;
            string subPath = AppGlobal.Download + "/" + AppGlobal.HTML;
            string contentHTML = AppGlobal.InitializationString;
            var physicalPathRead = Path.Combine(_webHostEnvironment.WebRootPath, subPath, "indexFormat.html");
            using (FileStream fs = new FileStream(physicalPathRead, FileMode.Open))
            {
                using (StreamReader r = new StreamReader(fs, Encoding.UTF8))
                {
                    contentHTML = r.ReadToEnd();
                    contentHTML = new Regex("style=\"[^\"]*\"").Replace(contentHTML, "");
                    contentHTML = new Regex("class=\"[^\"]*\"").Replace(contentHTML, "");
                    result = contentHTML;
                }
            }
            return result;
        }
        [HttpGet]
        public string AccessLIVEFTP(string URLCode)
        {
            URLCode = URLCode.Split('/')[URLCode.Split('/').Length - 1];
            URLCode = URLCode.Split('.')[0];
            return URLCode;
        }
    }
}
